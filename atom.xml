<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>동글씨</title>
  
  <subtitle>동글씨의 LOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-19T03:27:01.715Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Suyan Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>⚙️ 운영체제(2) 컴퓨터 구조</title>
    <link href="http://yoursite.com/2020/10/19/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-2-%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/"/>
    <id>http://yoursite.com/2020/10/19/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-2-%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/</id>
    <published>2020-10-19T02:31:21.000Z</published>
    <updated>2020-10-19T03:27:01.715Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><p><strong><em>앞서서.. 운영체제 역할은 뭐라고 했었나?</em></strong><br>하드웨어를 관리하는 일.</p><p><strong><em>어떻게?</em></strong><br>운영체제가 하드웨어를 알지 못해도 쉽게 사용할 수 있도록,<br>하드웨어의 효율적인 일처리, 최대의 성능을 발휘할 수 있도록 한다.</p><p><strong><em>그래서,</em></strong><br>운영체제-하드웨어 함께 다니는 이 둘 때문에 <code>컴퓨터 구조</code>는 당연히, 알아야 한다고.</p><hr><br/><center><strong>우리가 알아야 할 것들</strong></center><img width="300" src="https://user-images.githubusercontent.com/28856435/96395180-e538c380-11fe-11eb-8743-0c13568964f4.png"><center><strong>프로그램 실행 기본 플로우</strong></center><center>Fetch > Decode > Execution</center><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><blockquote><p>중앙처리 장치로 모든 연산, 명령 담당. 컴퓨터의 뇌.<br><code>CPU 를 어떻게 관리하는가?</code></p></blockquote><br/><h2 id="ALU-Arithtic-Logic-Unit"><a href="#ALU-Arithtic-Logic-Unit" class="headerlink" title="ALU (Arithtic Logic Unit)"></a>ALU (Arithtic Logic Unit)</h2><blockquote><p>연산 담당하는 주체. 산술, 논리 연산</p></blockquote><br/><h2 id="Control-Unit"><a href="#Control-Unit" class="headerlink" title="Control Unit"></a>Control Unit</h2><blockquote><p>CPU 가 처리해야 할 명령어들을 해석. 그 결과에 따라 적절한 신호를 CPU의 다른 블록에 전송.</p></blockquote><br/><h2 id="메인메모리"><a href="#메인메모리" class="headerlink" title="메인메모리"></a>메인메모리</h2><blockquote><p><strong>램(RAM)</strong> : 컴파일 완료된 소스가 올라가서 실행되는 영역.<br>프로그램 실행을 위해 존재하는 메모리.<br><code>메모리를 어떻게 관리하는가?</code></p></blockquote><br/><h2 id="장치제어기-I-O-Controller-Device-Contorller"><a href="#장치제어기-I-O-Controller-Device-Contorller" class="headerlink" title="장치제어기 (I/O Controller = Device Contorller)"></a>장치제어기 (I/O Controller = Device Contorller)</h2><blockquote><p>입력/출력/저장 기능을 하는 주변장치를 인식하여 제어해준다.<br>(모니터, 프린터, 마우스, 키보드, USB 따위들)</p></blockquote><p>주변장치들은 플러그와 소켓을 통해 연결되는데, 소켓과 Device Controller와 연결되어 있다.</p><p>어떤 장치를 연결하면 드라이버를 다운 받아야 한다. 이 드라이버는 운영체제가 장치와 호환가능하도록 해주는 하나의 코드이며, 이 코드를 디바이스 컨트롤러가 인식하는 것.</p><ul><li>Instruction Register(IR) : CPU의 명령을 저장.</li><li>Data Register(IR) : 값을 읽어옴.<br><code>I/O 장치를 어떻게 관리하는가?</code></li></ul><br/><h2 id="입출력버스"><a href="#입출력버스" class="headerlink" title="입출력버스"></a>입출력버스</h2><blockquote><p><strong>컴퓨터를 구성하는 요소들 간의 데이터 통로</strong></p></blockquote><ul><li>어드레스 버스 : 주소 이동</li><li>데이터 버스 : 데이터 이동</li><li>컨트롤 버스 : 컨트롤 신호 이동. CPU와 메모리 간의 통신.</li><li>하드디스크, 메인메모리, CPU 등 모두 버스와 연결.</li><li>버스 인터페이스 : 버스 프로토콜, 통신방식을 알고 있는것.</li></ul><hr><br/><p><em>※ 이 글은 아래 블로그 글을 바탕으로 혼자 공부하며 간단히 필기해본 내용입니다.<br>좋은 자료를 공유해주신 블로그님께 감사드립니다.</em><br>🔗<a href="https://jhnyang.tistory.com/16" target="_blank" rel="noopener">블로그 주소</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;운영체제도 조금씩 알아보자.&lt;br&gt;&lt;code&gt;컴퓨터 구조&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
  </entry>
  
  <entry>
    <title>⚙️ 운영체제(1) 기능,목적,구조</title>
    <link href="http://yoursite.com/2020/10/19/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-1-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EC%A0%81-%EA%B5%AC%EC%A1%B0/"/>
    <id>http://yoursite.com/2020/10/19/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-1-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EC%A0%81-%EA%B5%AC%EC%A1%B0/</id>
    <published>2020-10-19T02:04:45.000Z</published>
    <updated>2020-10-19T03:27:48.926Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="운영체제가-뭔가요"><a href="#운영체제가-뭔가요" class="headerlink" title="운영체제가 뭔가요?"></a>운영체제가 뭔가요?</h2><p><em>운영체제 아는데.. 알지만, 설명을 할 수 없다면 아는것이 아니라는것!</em></p><blockquote><p>:: 운영체제란 각종 하드웨어적인 자원, 소프트웨어적인 자원을 효율적으로 사용할 수 있도록 제어해주는 관리 시스템 (Operating System) 입니다.<br>:: 사용자에게 편리함을 제공하고 시스템의 생산성을 높여줍니다.<br>:: 모든 하드웨어, 소프트웨어를 관리하는 “실행 관리자” 라고 정의됩니다.<br><code>편리함</code> <code>관리시스템</code> <code>생산성증대</code></p></blockquote><br/><h2 id="운영체제-기능"><a href="#운영체제-기능" class="headerlink" title="운영체제 기능"></a>운영체제 기능</h2><blockquote><p>컴퓨터를 편하고 효율적으로 사용할 수 있도록 도움을 줍니다.<br><code>CPU관리</code> <code>메모리관리</code> <code>IO장치</code></p></blockquote><br/><h2 id="운영체제-목적"><a href="#운영체제-목적" class="headerlink" title="운영체제 목적"></a>운영체제 목적</h2><blockquote><ol><li>처리능력의 향상 : 일정시간내 처리량</li><li>응답시간 최소화</li><li>사용 가능도의 향상 : 얼마나빠르게</li><li>신뢰도의 향상 : 정확성<br><code>처리능력</code> <code>응답시간</code> <code>사용가능도</code> <code>신뢰도</code></li></ol></blockquote><br/><h2 id="운영체제-구조"><a href="#운영체제-구조" class="headerlink" title="운영체제 구조"></a>운영체제 구조</h2><blockquote><ol><li>제어 프로그램</li></ol><ul><li>감시 프로그램 (supervisor) : 시스템 전체의 동작 상태 감독, 지원.</li><li>작업 관리 프로그램 : 자동적 작업 이행을 위한 준비와 처리</li><li>데이터 관리 프로그램 : 데이터 전송, 입출력 데이터 연결, 파일조작 및 처리</li></ul><ol start="2"><li>처리 프로그램</li></ol><ul><li>언어 번역 프로그램</li><li>서비스 프로그램</li><li>문제 처리 프로그램<br><code>제어</code> <code>처리</code></li></ul></blockquote><hr><br/><p><em>※ 이 글은 아래 블로그 글을 바탕으로 혼자 공부하며 간단히 필기해본 내용입니다.<br>좋은 자료를 공유해주신 블로그님께 감사드립니다.</em><br>🔗<a href="https://jhnyang.tistory.com/16" target="_blank" rel="noopener">블로그 주소</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;운영체제도 조금씩 알아보자.&lt;br&gt;&lt;code&gt;OS 기능&lt;/code&gt; &lt;code&gt;OS 목적&lt;/code&gt; &lt;code&gt;OS 구조&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
  </entry>
  
  <entry>
    <title>파이썬의 __init__ 과 self</title>
    <link href="http://yoursite.com/2020/10/08/%ED%8C%8C%EC%9D%B4%EC%8D%AC-init-%EA%B3%BC-self/"/>
    <id>http://yoursite.com/2020/10/08/%ED%8C%8C%EC%9D%B4%EC%8D%AC-init-%EA%B3%BC-self/</id>
    <published>2020-10-08T02:38:09.000Z</published>
    <updated>2020-10-08T03:49:16.789Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="생성자-init"><a href="#생성자-init" class="headerlink" title="생성자 init"></a>생성자 <strong>init</strong></h2><p> <strong>__init__</strong> : 파이썬의 생성자를 나타낸다.<br>클래스 Person() 를 호출하면 객체가 생성되고 <code>__init__</code> 메소드에 첫 번째 매개변수로 전달된다.<br>추가 매개변수 또한 가능하다.</p><p><strong>self</strong> : 객체 자체의 인스턴스를 의미한다.<br>파이썬은 다른 객체지향 언어와는 달리 (대부분 메소드에 숨겨진 매개변수로 전달) <code>self</code> 와 같이 명시적으로 선언해야 한다.</p><hr><br><h2 id="클래스-Person-예시"><a href="#클래스-Person-예시" class="headerlink" title="클래스 Person 예시"></a>클래스 Person 예시</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.n_name= name</span><br><span class="line">        self.n_age= age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.n_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAge</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        self.n_age += num</span><br><span class="line">        print(self.n_age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'Jenny'</span>, <span class="number">12</span>)</span><br><span class="line">p.getName()</span><br><span class="line">p.addAge(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>결과</strong></p><blockquote><p>Jenny<br>17</p></blockquote><p><strong># Line2</strong> : self 가 포함되어 있지만 실제로 <code>name</code> 과 <code>age</code> 두가지 매개변수만 전달한다.<br><strong># Line9</strong> : self 의 <code>n_age</code> 값에 <code>addAge</code> 에 매개변수로 전달되는 숫자를 더해 출력한다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;자주쓰는 __init__ 그리고 self 무엇을 의미하는 것일까?&lt;br&gt;&lt;code&gt;생성자&lt;/code&gt; &lt;code&gt;인스턴스&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Python" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Python/"/>
    
    
  </entry>
  
  <entry>
    <title>CODING TEST {동전} with Python</title>
    <link href="http://yoursite.com/2020/06/16/CODING-TEST-with-Python-0616/"/>
    <id>http://yoursite.com/2020/06/16/CODING-TEST-with-Python-0616/</id>
    <published>2020-06-16T02:03:14.000Z</published>
    <updated>2020-06-16T02:58:14.894Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="문제"><a href="#문제" class="headerlink" title="[문제]"></a>[문제]</h2><blockquote><p>Q. 준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.<br>동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.</p></blockquote><h2 id="입력"><a href="#입력" class="headerlink" title="[입력]"></a>[입력]</h2><blockquote><p>첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000)<br>둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. (1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수)</p></blockquote><h2 id="예제-입력"><a href="#예제-입력" class="headerlink" title="[예제 입력]"></a>[예제 입력]</h2><blockquote><p>10 4200<br>1<br>5<br>10<br>50<br>100<br>500<br>1000<br>5000<br>10000<br>50000</p></blockquote><h2 id="예제-출력"><a href="#예제-출력" class="headerlink" title="[예제 출력]"></a>[예제 출력]</h2><blockquote><p>6</p></blockquote><h2 id="문제-답변"><a href="#문제-답변" class="headerlink" title="[문제 답변]"></a>[문제 답변]</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coin</span><span class="params">(priceArr)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> price</span><br><span class="line"></span><br><span class="line">    priceArr.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> priceArr:</span><br><span class="line">        <span class="keyword">if</span> (price // i) &gt; <span class="number">0</span>:</span><br><span class="line">            total+= price // i</span><br><span class="line">            price -= (price // i)*i</span><br><span class="line">            <span class="keyword">if</span> price==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==  <span class="string">'__main__'</span>:</span><br><span class="line">    arrLen, price= map(int, input().split())</span><br><span class="line">    priceArr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(arrLen):</span><br><span class="line">        priceArr.append(int(input()))</span><br><span class="line"></span><br><span class="line">    print(coin(priceArr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 코딩테스트 with Python&lt;br&gt;Q. 동전&lt;br&gt;&lt;code&gt;백준&lt;/code&gt; &lt;code&gt;알고리즘&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ coding test" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-coding-test/"/>
    
    
      <category term="codingtest" scheme="http://yoursite.com/tags/codingtest/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CODING TEST  {SockMerchant} with Python</title>
    <link href="http://yoursite.com/2020/06/15/CODING-TEST-with-Python-0615/"/>
    <id>http://yoursite.com/2020/06/15/CODING-TEST-with-Python-0615/</id>
    <published>2020-06-15T01:03:11.000Z</published>
    <updated>2020-06-16T02:59:34.278Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="문제-SockMerchant"><a href="#문제-SockMerchant" class="headerlink" title="[문제] SockMerchant"></a>[문제] SockMerchant</h2><blockquote><p>Q. Complete the sockMerchant function below.<br>For example, there are  socks with colors . There is one pair of color  and one of color .<br>There are three odd socks left, one of each color. The number of pairs is.</p></blockquote><h2 id="문제-답변"><a href="#문제-답변" class="headerlink" title="[문제 답변]"></a>[문제 답변]</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sockMerchant</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sockMerchant</span><span class="params">(n, ar)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(ar) !=n:</span><br><span class="line">        print(<span class="string">'리스트 길이를 확인해주세요'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    ar_count = dict()</span><br><span class="line">    cnt =<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> sock <span class="keyword">in</span> ar:</span><br><span class="line">        <span class="keyword">if</span> sock <span class="keyword">not</span> <span class="keyword">in</span> ar_count.keys():</span><br><span class="line">            ar_count[sock] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(ar_count[sock]&lt;<span class="number">2</span>):</span><br><span class="line">                ar_count[sock] += <span class="number">1</span></span><br><span class="line">                cnt +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># del(ar_count[sock]) #같은 key 가 있을때 마지막 값으로 덮어씌워지므로 할필요 없음</span></span><br><span class="line">                ar_count[sock] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            print(<span class="string">'ar_dic : &#123;0&#125; / cnt : &#123;1&#125;'</span>.format(ar_count, cnt))</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  __name__에는 '__main__' 이 들어감. 시작점(entry point) 이다.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input(<span class="string">'리스트 길이 입력: '</span>))</span><br><span class="line">    ar = list(map(int, input(<span class="string">'리스트 원소 입력: '</span>).rstrip().split()))</span><br><span class="line">    print(sockMerchant(n, ar))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 코딩테스트 with Python&lt;br&gt;Q. SockMerchant&lt;br&gt;&lt;code&gt;HackerRank&lt;/code&gt; &lt;code&gt;알고리즘&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ coding test" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-coding-test/"/>
    
    
      <category term="codingtest" scheme="http://yoursite.com/tags/codingtest/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Nginx &amp; Tomcat 비교</title>
    <link href="http://yoursite.com/2020/06/03/nginx-tomcat-%EB%B9%84%EA%B5%90/"/>
    <id>http://yoursite.com/2020/06/03/nginx-tomcat-%EB%B9%84%EA%B5%90/</id>
    <published>2020-06-03T13:12:06.000Z</published>
    <updated>2020-10-08T02:56:10.741Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="Nginx-란"><a href="#Nginx-란" class="headerlink" title="Nginx 란,"></a>Nginx 란,</h2><blockquote><p>apache 의 C10K 문제점 해결을 위해 만들어진 <code>Event-Driven</code> 구조의 웹서버SW 라고 합니다.  OSI7 Layer 중 application Level 아래의 Level 에서 Nginx 같은 웹서버가 HTTP 통신을 담당합니다.</p></blockquote><p><strong><code>C10K</code> 일만개의 클라이언트 문제</strong><br>한 시스템에 동시 접속자수가 1만명이 넘어갈 때 효율적방안</p><hr><h2 id="Nginx-amp-Apache"><a href="#Nginx-amp-Apache" class="headerlink" title="Nginx &amp; Apache"></a>Nginx &amp; Apache</h2><p><code>Nginx</code> 는 <code>Tomcat</code> 과 비교되어 그 장점을 설명할 수 있습니다.</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p><code>MPM 방식</code>으로 HTTP 요청을 처리합니다.</p><blockquote><p>MPM : Multi-Process Module 은 크게 두 가지 방식이 있습니다.<br><code>PreFork 방식</code> <code>Worker 방식</code></p></blockquote><ul><li><p><strong>PreFork MPM (다중 프로세스)</strong><br>o Client 요청에 대해 apache 자식 프로세스를 생성하여 처리합니다.<br>o 요청이 많을 경우 Process 를 생성하여 처리합니다. 이 방식은 Apache 설치시 default 로 설정되어 있습니다.<br>o 하나의 자식프로세스당 <code>하나의 스레드</code> 를 갖습니다. (최대 1024개)<br>o 스레드간 메모리 공유를 하지 않습니다. 이 방식은 독립적이기에 안정적인 반면, 메모리 소모가 크다는 단점이 있습니다.</p></li><li><p><strong>Worker MPM (멀티 프로세스-스레드)</strong><br>o Prefork 보다 메모리 사용량이 적고 동시접속자가 많은 사이트에 적합합니다. 각 프로세스의 스레드를 생성해 처리하는 구조입니다.<br>o 스레드 간의 메모리 공유가 가능합니다.<br>o 프로세스 당 최대 64개의 스레드처리가 가능하며, 각 스레드는 하나의 연결만을 부여받습니다.</p></li></ul><h3 id="Apache-의-한계"><a href="#Apache-의-한계" class="headerlink" title="Apache 의 한계"></a>Apache 의 한계</h3><blockquote><p><strong>클라이언트 접속마다 Process 혹은 Thread 를 생성하는 구조입니다.</strong> 1만 클라이언트로부터 동시접속 요청이 들어온다면 CPU 와 메모리 사용이 증가하고 추가적인 Process/Tread 생성비용이 드는 등 대용량 요청에서 한계를 보입니다.<br>또한, Apache 서버의 프로세스가 <code>blocking</code> 될 때 요청을 처리하지 못하고 처리가 완료될 때까지 대기상태에 있습니다. 이는 <code>Keep Alive(접속대기)</code> 로 해결이 가능하지만, 효율이 떨어집니다.</p></blockquote><hr><h3 id="다시-Nginx-를-살펴봅시다"><a href="#다시-Nginx-를-살펴봅시다" class="headerlink" title="다시 Nginx 를 살펴봅시다."></a>다시 Nginx 를 살펴봅시다.</h3><blockquote><p>Nginx 는 위에서 언급했듯이 Event-Driven 방식으로 동작합니다. 즉, 프로그램 흐름이 이벤트에 의해 결정이 됩니다.<br>한 개 또는 고정된 프로세스만 생성하고, 그 내부에서 비동기로 효율적인 방식으로 task 를 처리합니다. Apache 와 달리 동시접속자 수가 많아져도 추가적인 생성비용이 들지 않습니다.</p></blockquote><p>o 비동기 이벤트 기반으로 요청하여 적은양의 스레드가 사용되기 때문에 CPU소모가 적습니다.<br>o Apache 와 달리 CPU 와 관계없이 I/O 들을 전부 Event Listener로 미루기 때문에 흐름이 끊이지 않습니다.<br>o <code>context switching</code> 비용이 적습니다.</p><p><strong><code>[Context Switching]</code></strong><br><code>Context: 스레드가 작업을 진행하는동안 작업정보 (레지스터, 커널스택, 사용자스택 등)를 보관</code><br><code>O/S 는 A작업을 진행할 때 A스레드의 Context를 읽어오며, B스레드로 전환 할 때 A스레드의 Context를 저장하고 B스레드의 Context를 읽어오는 일련의 반복작업을 합니다.</code><br><code>즉, 스레드 갯수가 많아질 수록 context switching 작업은 더 빈번하게 일어나고 이 때문에 성능이 저하될 수 있습니다.</code></p><h3 id="Apache-amp-Nginx-장점"><a href="#Apache-amp-Nginx-장점" class="headerlink" title="Apache &amp; Nginx 장점"></a>Apache &amp; Nginx 장점</h3><p>O Apache 는 Nginx 에 비해 모듈이 다양합니다.<br>O Apache 의 안정성, 확장성, 호환성을 장점으로 들자면, Nginx 는 성능이 우세하다는 장점이 있습니다.</p><h2 id="어느것이-더-나은가"><a href="#어느것이-더-나은가" class="headerlink" title="어느것이 더 나은가"></a>어느것이 더 나은가</h2><blockquote><p>Apache 나 Nginx 모두 각 웹서버마다의 장단점을 가지고 있으므로 사용에 있어서 정답은 없습니다. 상황과 비용에 따라, 혹은 안정성이나 효율성에 따라 적합한 웹서버를 사용한면 되지 않을까 합니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- ![0_UneV-I-bBldmqkgK](https://user-images.githubusercontent.com/28856435/83641005-e074c980-a5e7-11ea-92d3-c89fd6ba9662.png)
Nginx &amp; Apache 를 비교하며 각 장단점을 알아봅니다. --&gt;
&lt;p&gt;&lt;code&gt;apache&lt;/code&gt; &lt;code&gt;nginx&lt;/code&gt; &lt;code&gt;C10K&lt;/code&gt; &lt;code&gt;MPM&lt;/code&gt; &lt;code&gt;PreFork&lt;/code&gt; &lt;code&gt;Worker&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Web" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Web/"/>
    
    
      <category term="apache" scheme="http://yoursite.com/tags/apache/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="C10K" scheme="http://yoursite.com/tags/C10K/"/>
    
      <category term="MPM" scheme="http://yoursite.com/tags/MPM/"/>
    
      <category term="PreFork" scheme="http://yoursite.com/tags/PreFork/"/>
    
      <category term="Worker" scheme="http://yoursite.com/tags/Worker/"/>
    
  </entry>
  
  <entry>
    <title>react router 사용하기</title>
    <link href="http://yoursite.com/2020/06/01/react-router-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>http://yoursite.com/2020/06/01/react-router-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</id>
    <published>2020-06-01T06:10:25.000Z</published>
    <updated>2020-06-01T06:30:42.521Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h2><blockquote><p><code>React Router</code> 란, <em>SPA(Single Page Application: 모든코드를 하나의 파일에서 관리)</em> 의 라우팅 문제를 보완할 수 있도록 코드의 모듈화를 가능하게 해주는 라이브러리 이다.<br>서로 다른 주소를 가진 view 를 만들어 관리한다. 즉, component 마다 다른 url 을 호출하여 화면을 그려줄 수 있다.<br>function 방식인 <code>Hooks</code> 를 적용.</p></blockquote><hr><p>예제에 대한 클래스 트리이다.<br>&nbsp;&nbsp;&nbsp;public<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴindex.html<br>&nbsp;&nbsp;&nbsp;src<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ components<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ Header.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ Recipe.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ RecipeDetail.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ RecipeFind.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ RecipeNews.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ Chef.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ ChefDetail.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ App.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ index.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ server.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ package.json</p><br/><h3 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h3><ul><li>App.js 에서 Router 를 이용하여 각 함수들을 묶어준다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;BrowserRouter <span class="keyword">as</span> Router, Route, Switch&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./components/Header"</span>;</span><br><span class="line"><span class="keyword">import</span> Recipe <span class="keyword">from</span> <span class="string">"./components/Recipe"</span>;</span><br><span class="line"><span class="keyword">import</span> RecipeDetail <span class="keyword">from</span> <span class="string">"./components/RecipeDetail"</span>;</span><br><span class="line"><span class="keyword">import</span> RecipeFind <span class="keyword">from</span> <span class="string">"./components/RecipeFind"</span>;</span><br><span class="line"><span class="keyword">import</span> RecipeNews <span class="keyword">from</span> <span class="string">"./components/RecipeNews"</span>;</span><br><span class="line"><span class="keyword">import</span> Chef <span class="keyword">from</span> <span class="string">"./components/Chef"</span>;</span><br><span class="line"><span class="keyword">import</span> ChefDetail <span class="keyword">from</span> <span class="string">"./components/ChefDetail"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  index.js</span></span><br><span class="line"><span class="comment">  ReactDom.render(&lt;App/&gt;, document.getElementById('root'))</span></span><br><span class="line"><span class="comment">  &lt;App/&gt; =&gt; html 을 읽어서 =&gt; &lt;div id="root"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">        &lt;Header/&gt;</span><br><span class="line">        &lt;div className=&#123;<span class="string">"container-fluid"</span>&#125;&gt;</span><br><span class="line">          &lt;div className=&#123;<span class="string">"jumbotron"</span>&#125;&gt;</span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">              &lt;Route exact path=&#123;<span class="string">"/"</span>&#125; component=&#123;Recipe&#125;/&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">"/recipe_detail"</span>&#125; component=&#123;RecipeDetail&#125;/&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">"/chef"</span>&#125; component=&#123;Chef&#125;/&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">"/chef_detail"</span>&#125; component=&#123;ChefDetail&#125;/&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">"/news"</span>&#125; component=&#123;RecipeNews&#125;/&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">"/find"</span>&#125; component=&#123;RecipeFind&#125;/&gt;</span><br><span class="line">            &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;/</span>Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Header-js"><a href="#Header-js" class="headerlink" title="Header.js"></a>Header.js</h3><ul><li>navigation 을 그려주는 함수</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NavLink&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;NavLink exact to=&#123;""&#125;&gt;</span></span><br><span class="line"><span class="comment">// NavLink 에서 exact 는 default 값이다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//render()</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;nav className=<span class="string">"navbar navbar-inverse"</span>&gt;</span><br><span class="line">            &lt;div className=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">                &lt;div className=<span class="string">"navbar-header"</span>&gt;</span><br><span class="line">                    &lt;NavLink className=<span class="string">"navbar-brand"</span> to=&#123;<span class="string">"/"</span>&#125;&gt;SIST Recipe&lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &lt;ul className=<span class="string">"nav navbar-nav"</span>&gt;</span><br><span class="line">                    &lt;li className=<span class="string">"active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">exact</span> <span class="attr">to</span>=<span class="string">&#123;</span>"/"&#125;&gt;</span>레시피<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;</span>"/<span class="attr">chef</span>"&#125;&gt;</span>쉐프<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;</span>"/<span class="attr">news</span>"&#125;&gt;</span>레시피뉴스<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;</span>"/<span class="attr">find</span>"&#125;&gt;</span>레시피검색<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><br><h3 id="Recipe-js"><a href="#Recipe-js" class="headerlink" title="Recipe.js"></a>Recipe.js</h3><ul><li>App.js 에 넣어준 <code>RecipeDetail.js</code> <code>RecipeFind.js</code> … 각 화면은 아래와 같이 <code>Recipe.js</code> 와 같은 함수 구조로 되어있다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Recipe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>레시피<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><br><h2 id="server-js-서버를-생성하는-방법"><a href="#server-js-서버를-생성하는-방법" class="headerlink" title="server.js 서버를 생성하는 방법"></a>server.js 서버를 생성하는 방법</h2><blockquote><p>MongoDB 서버를 구축한다.<br>skip =&gt; offset 과 비슷하다.</p></blockquote><ul><li>라이브러리 로드</li><li>서버생성</li><li>서버구동</li><li>cross domain 허용</li><li>클라이언트 통신 및 몽고디비 연결</li><li>request 요청처리 =&gt; reponse 결과전송</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* bind() =&gt; IP, PORT 를 연결 =&gt; 개통</span></span><br><span class="line"><span class="comment">* listen() =&gt; 대기상태</span></span><br><span class="line"><span class="comment">* accept() =&gt; 클라이언트가 접속시에 처리</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">app.listen(<span class="number">3355</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Server Start ..."</span>, <span class="string">"http://localhost:3355"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// cross domain</span></span><br><span class="line">app.all(<span class="string">'/*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클라이언트 통신</span></span><br><span class="line"><span class="comment">// 사용자  URI =&gt; /recipe?page=1</span></span><br><span class="line"><span class="comment">// 몽고디비 연결</span></span><br><span class="line"><span class="comment">// MongoDB Connection</span></span><br><span class="line"><span class="keyword">const</span> Client = <span class="built_in">require</span>(<span class="string">"mongodb"</span>).MongoClient;</span><br><span class="line">app.get(<span class="string">'/recipe'</span>, (request, response)=&gt;&#123;</span><br><span class="line">    <span class="comment">// request =&gt; 사용자가 보낸 요청 : page, id, pwd</span></span><br><span class="line">    <span class="comment">// 요청 처리</span></span><br><span class="line">    <span class="comment">// response =&gt;  결과전송</span></span><br><span class="line">    <span class="keyword">var</span> page= request.query.page; <span class="comment">//request.getParameter("page")</span></span><br><span class="line">    <span class="keyword">var</span> rowSize =<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">var</span> skip = (page*rowSize) - rowSize;</span><br><span class="line">    <span class="comment">// 1page =&gt; skip=0</span></span><br><span class="line">    <span class="comment">// 2page =&gt; skip 12(버림) ==&gt; 13</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"mongodb://211.238.142.181:27017"</span>;</span><br><span class="line">    Client.connect(url, (err, client)=&gt;&#123;</span><br><span class="line">        <span class="keyword">var</span> db = client.db(<span class="string">'mydb'</span>);</span><br><span class="line">        <span class="comment">// SELECT * FROM recipe =&gt; find&#123;()&#125;</span></span><br><span class="line">        <span class="comment">// SELECT * FROM recipe WHERE no=1 =&gt; find&#123;(no:1)&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// skip =&gt; offset 과 비슷함.</span></span><br><span class="line">        <span class="comment">// toArray(err, docs) 콜백 함수: 가져온 데이터를 배열로 묶어줌. (docs에 있음)</span></span><br><span class="line">        db.collection(<span class="string">'recipe'</span>).find(&#123;&#125;).skip(skip).limit(rowSize)</span><br><span class="line">            .toArray(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</span><br><span class="line">                response.json(docs);</span><br><span class="line">                client.close();</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><br><h2 id="axios-서버에서-데이터-읽어오기"><a href="#axios-서버에서-데이터-읽어오기" class="headerlink" title="axios: 서버에서 데이터 읽어오기"></a>axios: 서버에서 데이터 읽어오기</h2><p>axios.get({<code>URL</code>, <code>params:{}</code>}).then((<code>result</code>)=&gt;{ <code>setState변수(result.data)</code> })</p><p><img src="https://user-images.githubusercontent.com/28856435/83317751-f3933c80-a269-11ea-9cbc-43443ad22eeb.png" alt="image"></p><ul><li>useState() 변수 <code>recipe</code> 데이터에 넣어준 값을 화면에 그려준다.</li></ul><p><img src="https://user-images.githubusercontent.com/28856435/83318025-23dbda80-a26c-11ea-8897-fa78ec1e7771.png" alt="image"></p><hr><br><h2 id="NavLink-props-넘기기"><a href="#NavLink-props-넘기기" class="headerlink" title="NavLink: props 넘기기"></a>NavLink: props 넘기기</h2><blockquote><p>Recipe.js 내의 음식 이미지를 클릭하면 그 이미지에 해당하는 상세보기로 넘어갈 수 있도록 NavLink 를 달아줄 것이다.</p></blockquote><p>_</p><ul><li><p>App.js<br><code>RecipeDetail</code>의 path를 다음과 같이 바꿔준다. (no 변수가 추가됨)<br><code>/recipe_detail</code> → <code>/recipe_detail/:no</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&#123;<span class="string">"/recipe_detail/:no"</span>&#125; component=&#123;RecipeDetail&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>Recipe.js<br><code>/recipe_detail/&quot;+m.no</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;NavLink to=&#123;<span class="string">"/recipe_detail/"</span>+m.no&#125;&gt;</span><br><span class="line">  &lt;img src=&#123;m.poster&#125; alt=<span class="string">"Lights"</span> style=&#123;&#123;<span class="string">"width"</span>:<span class="string">"100%"</span>&#125;&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/NavLink&gt;</span></span><br></pre></td></tr></table></figure><ul><li>RecipeDetail.js<br>no 라는 파라미터를 <code>match</code> 를 사용하여 넘길 수 있다.<br><code>props.match.params.no</code> </li></ul><p>방법1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RecipeDetail</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>레시피 상세보기: &#123;props.match.params.no&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>방법2) <code>match</code>클래스를 props에 할당.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RecipeDetail</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;match&#125; = props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>레시피 상세보기: &#123;match.params.no&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>sever.js<br>사용자가 넘겨준 <code>no</code> 라는 파라미터는 서버단에서 <code>request.query.no</code> 로 받을 수 있다.<br>이 때, 형변환이 필요하다는 사실도 잊지 않는다.<br>즉, <code>/recipe-detail?no=1</code> 의 형식이다.<br>이제, <code>http://localhost:3355/recipe-detail</code> 를 사용할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/recipe-detail'</span>, (request, response)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 파라미터를 받는 방법</span></span><br><span class="line">    <span class="keyword">var</span> no = request.query.no;</span><br><span class="line">    Client.connect(URL, (err, client)=&gt;&#123;</span><br><span class="line">        <span class="keyword">var</span> db = client.db(<span class="string">'mydb'</span>);</span><br><span class="line">        <span class="comment">// 형변환 : Number() or parseInt()</span></span><br><span class="line">        db.collection(<span class="string">'recipe_detail'</span>).find(&#123;<span class="attr">no</span>:<span class="built_in">Number</span>(no)&#125;).toArray(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</span><br><span class="line">            response.json(docs[<span class="number">0</span>]); <span class="comment">// Array 타입이기 때문에 하나의 Object 만 가져온다.</span></span><br><span class="line">            client.close();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>다시 RecipeDetail.js<br>server.js 에서 만들었던 API 를 사용하여 상세정보를 뿌려준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [detail, setDetail] = useState(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  axios.get(<span class="string">'http://localhost:3355/recipe-detail'</span>, &#123;</span><br><span class="line">    params:&#123;</span><br><span class="line">      no: match.params.no</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    setDetail(result.data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SPA 의 단점을 보완하고, 표준적으로 쓰이고 있는 &lt;code&gt;React Router&lt;/code&gt; : &lt;code&gt;code split&lt;/code&gt; 을 가능하게 해주는 라이브러리를 사용해 봅니다.&lt;br&gt;&lt;code&gt;React&lt;/code&gt; &lt;code&gt;react router&lt;/code&gt; &lt;code&gt;Hooks&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ React" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-React/"/>
    
    
      <category term="Hooks" scheme="http://yoursite.com/tags/Hooks/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react router" scheme="http://yoursite.com/tags/react-router/"/>
    
  </entry>
  
  <entry>
    <title>Hooks 로 함수형 코딩을 해보자</title>
    <link href="http://yoursite.com/2020/05/29/Hooks/"/>
    <id>http://yoursite.com/2020/05/29/Hooks/</id>
    <published>2020-05-29T00:38:23.000Z</published>
    <updated>2020-06-01T06:08:38.671Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks ?"></a>Hooks ?</h1><blockquote><p>클래스에서 사용했던 기능을 함수에서도 사용할 수 있도록 해줌.</p></blockquote><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><blockquote><p> const [변수명, 메소드]= useState(“[]”)</p></blockquote><ul><li>EX<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [music, setMusic] = useState([]);</span><br></pre></td></tr></table></figure></li></ul><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><blockquote><p>React의 class  방식의 componentDidMount 생명주기를 흉내낼 수 있다.<br>useEffect(fn, [])</p></blockquote><ul><li><p>클래스 방식</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setstate(&#123;<span class="attr">music</span>:&#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>함수 방식 : <code>useState</code> 에서 정의해주었던 <code>music</code> 변수를 저장하고 있는 <code>setMusic</code> state를 사용.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        axios.get(<span class="string">"http://localhost:3000/music.json"</span>)</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;   <span class="comment">// res에 데이터 불러옴</span></span><br><span class="line">                setMusic(res.data);</span><br><span class="line">                <span class="built_in">console</span>.log(res.data);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;,[]);</span><br></pre></td></tr></table></figure></li><li><p>그런데 <code>[]</code> 는 뭔가요? deps 란?</p></li></ul><blockquote><p>mount 할때마다 실행. =&gt; componentDidMount, componentDidUpdate<br>시작하자마자 한번만 읽어로려면, 즉 didMount 에만 함수를 적용하고 싶다면,<br>함수의 2번째 인자로 <code>[] deps</code> 를 줘야함.<br>내용 갱신 시에는 deps 를 쓰지 않는다.</p></blockquote><hr><ul><li>잠깐 문법<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이렇게 하면 forEach 가능한데</span></span><br><span class="line">props.music.forEach(<span class="function">(<span class="params">m</span>)=&gt;</span>&#123;</span><br><span class="line">         ...   </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// html 에서 스크립트를 만들 때는 forEach 적용이 안됨.</span></span><br><span class="line"><span class="keyword">const</span> html = music.map(<span class="function">(<span class="params">m</span>)=&gt;</span></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&#123;m.rank&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tr&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="검색-이벤트-등록"><a href="#검색-이벤트-등록" class="headerlink" title="검색 이벤트 등록"></a>검색 이벤트 등록</h3><ul><li><p>사용 함수<br>AppMain() : main 함수이다.<br>SearchBar()<br>MusicTable()</p></li><li><p><code>handleUserInput</code> 라는 이벤트 등록함수를 만들어 준다.</p></li><li><p>이렇게 이벤트를 넘겨주는 방식은 <code>callByReference</code> 방식이다.<br>callByReference 는 주소값을 넘겨준다. javaScript 는 pointer 로 이루어져 있어 주소값으로 넘겨준다면 이 값은 변할 수 있다.</p></li><li><p>변수 str 을 넘겨주는 방식은 <code>callByValue</code> 방식이다.<br>복사라고 생각하면 된다. 가지고 있는 걸 사용하는 것이 아닌, 새로 똑같은 값을 만들어준다.</p></li></ul><p><strong>AppMain()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 변수 설정</span></span><br><span class="line">    <span class="keyword">const</span> [music, setMusic] = useState([]);</span><br><span class="line">    <span class="comment">// 변수 초기값</span></span><br><span class="line">    <span class="keyword">const</span> [str, setStr]= useState(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        axios.get(<span class="string">"http://localhost:3000/music.json"</span>)</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                setMusic(res.data);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;,[])  <span class="comment">// mount 할때마다 실행. =&gt; componentDidMount, componentDidUpdate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 이벤트 등록</span></span><br><span class="line">    <span class="keyword">const</span> handleUserInput= <span class="function">(<span class="params">str</span>)=&gt;</span>&#123;</span><br><span class="line">        setStr(str);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span>(</span><br><span class="line">        &lt;div className=&#123;<span class="string">"row"</span>&#125;&gt;</span><br><span class="line">            &lt;H/&gt;</span><br><span class="line">            &lt;SearchBar str=&#123;str&#125; onUserInput=&#123;handleUserInput&#125;/&gt;</span><br><span class="line">            &lt;div style=&#123;&#123;<span class="string">"height"</span>:<span class="string">"30px"</span>&#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            &lt;MusicTable music=&#123;music&#125; str=&#123;str&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>onUserInput</code> 이벤트를 연결한다. 이벤트가 발생한 곳의 값(input 태그의 값)을 가져와 <code>onUserInput</code>에 값을 넣어준다.<br><strong>SearchBar(str)</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SearchBar</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// useCallBack</span></span><br><span class="line">    <span class="keyword">const</span> onChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        props.onUserInput(e.target.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;table className=&#123;<span class="string">"table"</span>&#125;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;input type=&#123;<span class="string">"text"</span>&#125; size=&#123;<span class="string">"25"</span>&#125; className=&#123;<span class="string">"input-sm"</span>&#125;</span><br><span class="line">                        placeholder=&#123;<span class="string">"search"</span>&#125; onChange=&#123;onChange&#125; value=&#123;props.str&#125;/&gt;</span><br><span class="line">                &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tr&gt;</span><br><span class="line">        &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="CallBack-useCallBack"><a href="#CallBack-useCallBack" class="headerlink" title="CallBack : useCallBack()"></a>CallBack : useCallBack()</h2><blockquote><ul><li>hooks 의 기능중 <code>useCallBack()</code> 함수를 사용한다. :함수의 주소를 기억하고 있다. Paging 에서 많이 사용된다.<br>Memory 누수가 안됨.</li></ul></blockquote><ul><li>2번 째 인자로 deps :[str] 을 준다. : 검색내용이 변경 될 때에만 함수가 <code>handleUserInput</code> 호출되도록 변경해준다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleUserInput= useCallback(<span class="function">(<span class="params">str</span>)=&gt;</span>&#123;</span><br><span class="line">  setStr(str);</span><br><span class="line">&#125;, [str]) <span class="comment">// str 이 변경될 때에만 호출된다.</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>실제로 데이터를 출력해주는 함수<br><strong>MusicTable()</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MusicTable</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> row=[];</span><br><span class="line">    props.music.forEach(<span class="function">(<span class="params">m</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m.title.indexOf(props.str)==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 배열에 추가</span></span><br><span class="line">        row.push(<span class="xml"><span class="tag">&lt;<span class="name">MusicRow</span> <span class="attr">music</span>=<span class="string">&#123;m&#125;/</span>&gt;</span>);</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    return(</span></span><br><span class="line">        &lt;table className=&#123;"table"&#125;&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">                &lt;tr className=&#123;"danger"&#125;&gt;</span><br><span class="line">                    &lt;th&gt;순위&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;노래명&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;가수&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">            &#123;row&#125;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">    )</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h2><blockquote><ul><li>React 는 컴포넌트를 렌더링 한 뒤, 이전 렌더링 된 결과와 비교하여 DOM 업데이트를 결정한다. 이전 렌더링 결과와 비교하는 과정은 충분히 빠르지만 이 과정에서 속도를 줄일 수 있다.</li></ul></blockquote><ul><li><p><code>React.memo</code> 로 매핑될 때, React 는 컴퍼넌트를 렌더링 후 그 결과를 <code>메모이징(Memoizing)</code> 한다. 그 다음 렌더링 시 <code>props</code> 가 같다면 메모이징 했던 내용을 재사용한다.<br>[출처] <a href="https://ui.toast.com/weekly-pick/ko_20190731/" target="_blank" rel="noopener">https://ui.toast.com/weekly-pick/ko_20190731/</a></p></li><li><p>위에서 진행했던 예제로 계속 설명을 한다면,</p></li><li><p>SearchBar 에  입력할 때마다 즉, <code>onUserInput</code> 이벤트가 발생할 때마다  <code>MusicTable</code> 을 재렌더링 한다.<br>그 때마다 H1 태그는 글자 색상을 랜덤으로 가져온다. <code>Math.random()*5</code></p></li><li><p>즉, input 창에 뭔가를 적을 때마다 반짝반짝 하며 타이틀 색상이 수시로 바뀌게 되는 …뭔가 고쳐주고 싶은 현상을 발견한다.</p></li><li><p>이 때 사용하는것이 바로 <code>memo</code></p></li><li><p>React.memo 적용전</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> H=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// memo : 호출한것 기억.</span></span><br><span class="line">    <span class="keyword">const</span> color = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'yellow'</span>,<span class="string">'pink'</span>];</span><br><span class="line">    <span class="keyword">const</span> no = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">5</span>);</span><br><span class="line">   <span class="comment">// 배열 인덱스 5개중 랜덤수 선택</span></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;h1 className=&#123;<span class="string">"text-center"</span>&#125; style=&#123;&#123;<span class="string">"color"</span>:color[no]&#125;&#125;&gt;Music Top <span class="number">50</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>React.memo 적용 후: searchBar 에 입력해도 변하지 않음.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> H=React.memo(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// memo : 호출한것 기억.</span></span><br><span class="line">    <span class="keyword">const</span> color = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'yellow'</span>,<span class="string">'pink'</span>];</span><br><span class="line">    <span class="keyword">const</span> no = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">5</span>);</span><br><span class="line">   <span class="comment">// 배열 인덱스 5개중 랜덤수 선택</span></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;h1 className=&#123;<span class="string">"text-center"</span>&#125; style=&#123;&#123;<span class="string">"color"</span>:color[no]&#125;&#125;&gt;Music Top <span class="number">50</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;클래스에서 사용했던 기능을 함수에서도 사용할 수 있도록 해주는 HOOKS 를 사용해봅니다.&lt;br&gt;&lt;code&gt;useState&lt;/code&gt; &lt;code&gt;useEffect&lt;/code&gt; &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useCallBack&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ React" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-React/"/>
    
    
      <category term="Hooks" scheme="http://yoursite.com/tags/Hooks/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React 입문해보자</title>
    <link href="http://yoursite.com/2020/05/24/React-start/"/>
    <id>http://yoursite.com/2020/05/24/React-start/</id>
    <published>2020-05-24T13:21:00.000Z</published>
    <updated>2020-05-29T01:25:15.968Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="React"><a href="#React" class="headerlink" title="React ?"></a>React ?</h2><blockquote><dl><dt><strong>VirtualDom</strong></dt><dd>리액트가 관리하는 가상 DOM. (브라우저의 DOM과 별도)</dd></dl></blockquote><ul><li>페이지 내 내용이 변경되면 VirtualDom 은 차이가 있는 부분을 확인한다.</li><li>자체적으로 변경된 부분만 찾아서 Reflow(재렌더링) 한다.</li></ul><blockquote><dl><dt><strong>JSX</strong> (JavaScript+XML)</dt><dd>자바스크립트를 확장한 프로그래밍 언어.</dd></dl></blockquote><p><strong>장점?</strong></p><p>1) Component 를 사용하여 속도가 빠르다.<br>2) react-dom 이라는 가상돔에서 만든다.</p><p><strong>단점?</strong></p><p>1) 단방향, 데이터를 바꿀 때 전체(최상위)를 바꿔야 함. -개선된것 Redux<br>2) function 기반은 전역변수 사용이 어렵다. -개선 Hooks (속성으로 넘기기힘듦 - UserState: state를 자유자재로 쓸수있음)</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>리액트를 사용하기위해 아래 순서대로 설치를 진행해준다.</p><p><strong>1. Node.js 설치</strong></p><p><strong>2. React 설치</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\sist27&gt;npm install -g create-react-app</span><br></pre></td></tr></table></figure><p><strong>3. WebStorm 설치 (편집기)</strong></p><hr><h2 id="React-프로젝트-생성-실행-with-WebStorm"><a href="#React-프로젝트-생성-실행-with-WebStorm" class="headerlink" title="React 프로젝트 생성/실행 with WebStorm"></a>React 프로젝트 생성/실행 with WebStorm</h2><br><ol><li><p>New Project 생성 후 (왼쪽 사이드바에 React App 선택)<br><img src="https://user-images.githubusercontent.com/28856435/81461652-340e1600-91e8-11ea-838f-fc8db1b4fd87.png" alt="image"></p></li><li><p>App.js 에서 약간의 수정이후 터미널에서 <code>npm start</code> 를 실행한다.<br><img src="https://user-images.githubusercontent.com/28856435/81461659-45572280-91e8-11ea-9fda-e3a41631929e.png" alt="image (1)"></p></li><li><p>package.json 의 dependencies 에 axios 버전을 추가해준다.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"axios"</span>: <span class="string">"^0.19.2"</span></span><br></pre></td></tr></table></figure><h2 id="Component-기본-형식-class-기반-function-기반"><a href="#Component-기본-형식-class-기반-function-기반" class="headerlink" title="Component 기본 형식 [class 기반, function 기반]"></a>Component 기본 형식 [class 기반, function 기반]</h2><blockquote><p>class 기반 : 생명주기가 있음</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;&#125;</span><br><span class="line">    <span class="comment">// 화면에 불러오기 전 (데이터 받기전)</span></span><br><span class="line">    componentWillMount()</span><br><span class="line">    <span class="comment">// 화면 출력을 읽는 데이터 (데이터 받음)</span></span><br><span class="line">    render()&#123;&#125;</span><br><span class="line">    <span class="comment">// 화면을 출력 (onLoad() 와 비슷)</span></span><br><span class="line">    componentDidMount()</span><br><span class="line">    <span class="comment">//javaScript onLoad() 방식은 아래와 같음.</span></span><br><span class="line">    componentDidMount() =&gt; $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>function : 생명주기가 없음 -&gt; Data를 넘겨주는 방식 -&gt; 그런데 어려움 -&gt; Hooks 사용</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        &lt;html&gt;</span><br><span class="line">        &lt;<span class="regexp">/html&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="JSX-형식"><a href="#JSX-형식" class="headerlink" title="JSX 형식"></a>JSX 형식</h2><ol><li>반드시 계층구조를 만든다.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//- Error</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 계층구조로 아래와 같이 */</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>HTML 태그는 반드시 소문자<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Html</span>&gt;</span> =&gt; //- Error</span><br></pre></td></tr></table></figure></li><li>속성은 반드시 “”<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">100</span>&gt;</span> //- Error</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React 의 기본개념과 생명주기에 대해 알아봅니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ React" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-React/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>JPA-QueryDsl 간단 쿼리 작성법</title>
    <link href="http://yoursite.com/2020/05/05/JPA-Projection/"/>
    <id>http://yoursite.com/2020/05/05/JPA-Projection/</id>
    <published>2020-05-04T17:45:47.000Z</published>
    <updated>2020-05-28T05:39:32.740Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="BeforeEach"><a href="#BeforeEach" class="headerlink" title="@BeforeEach"></a>@BeforeEach</h2><p>각 테스트를 실행하기 전에 값을 세팅해준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        queryFactory = <span class="keyword">new</span> JPAQueryFactory(em);</span><br><span class="line">        Team teamA = <span class="keyword">new</span> Team(<span class="string">"teamA"</span>);</span><br><span class="line">        Team teamB = <span class="keyword">new</span> Team(<span class="string">"teamB"</span>);</span><br><span class="line"></span><br><span class="line">        em.persist(teamA);</span><br><span class="line">        em.persist(teamB);</span><br><span class="line"></span><br><span class="line">        Member mem1 = <span class="keyword">new</span> Member(<span class="string">"mem1"</span>, <span class="number">10</span>, teamA);</span><br><span class="line">        Member mem2 = <span class="keyword">new</span> Member(<span class="string">"mem2"</span>,<span class="number">20</span>, teamA);</span><br><span class="line">        Member mem3 = <span class="keyword">new</span> Member(<span class="string">"mem3"</span>,<span class="number">30</span>, teamB);</span><br><span class="line">        Member mem4 = <span class="keyword">new</span> Member(<span class="string">"mem4"</span>,<span class="number">40</span>, teamB);</span><br><span class="line"></span><br><span class="line">        em.persist(mem1);</span><br><span class="line">        em.persist(mem2);</span><br><span class="line">        em.persist(mem3);</span><br><span class="line">        em.persist(mem4);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Q-type-활용"><a href="#Q-type-활용" class="headerlink" title="Q-type 활용"></a>Q-type 활용</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startQuerydsl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        queryFactory = <span class="keyword">new</span> JPAQueryFactory(em);</span><br><span class="line"><span class="comment">// Q-type 활용 방법1</span></span><br><span class="line"><span class="comment">//        QMember m1 = new QMember("m1");</span></span><br><span class="line"><span class="comment">// Q-type 활용 방법2</span></span><br><span class="line"><span class="comment">//        QMember m1 = QMember.member;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Q-type 활용 방법3 -권장 static method QMember.member</span></span><br><span class="line">        Member findMember = queryFactory</span><br><span class="line">                .select(member)</span><br><span class="line">                .from(member)</span><br><span class="line">                .where(member.username.eq(<span class="string">"mem1"</span>))  <span class="comment">// PrepareStatement 의 parameterBinding 방식을 사용함.</span></span><br><span class="line">                .fetchOne();</span><br><span class="line"></span><br><span class="line">        assertThat(findMember.getUsername()).isEqualTo(<span class="string">"mem1"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="검색-조건"><a href="#검색-조건" class="headerlink" title="검색 조건"></a>검색 조건</h2><p><code>fetch</code> : 리스트 조회, 데이터 없으면 <code>null</code> 반환<br><code>fetchOne</code> : 단건 조회<br>&nbsp;&nbsp;&nbsp; - 결과 없으면 <code>null</code><br>&nbsp;&nbsp;&nbsp; - 둘 이상이면 <code>com.querydsl.core.NoneUniqueResultException</code><br><code>fetchFirst</code> = limit(1).fetchOne()<br><code>fetchResults</code> : 페이징 정보를 포함. (+)total count 쿼리<br><code>fetchCount</code> : count 쿼리로 변경하여 실행</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resultFetch</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 여러건 조회</span></span><br><span class="line">       List&lt;Member&gt; fetch = queryFactory</span><br><span class="line">               .select(member)</span><br><span class="line">               .fetch();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2 단건조회</span></span><br><span class="line">       Member fetchOne = queryFactory</span><br><span class="line">               .selectFrom(member)</span><br><span class="line">               .fetchOne();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3 처음 한건 조회</span></span><br><span class="line">       Member fetchFirst = queryFactory</span><br><span class="line">               .selectFrom(member)</span><br><span class="line">               .fetchFirst();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4 페이징에서 사용.</span></span><br><span class="line">        <span class="comment">//   쿼리를 두 번 실행함.</span></span><br><span class="line">        QueryResults&lt;Member&gt; results = queryFactory</span><br><span class="line">                .selectFrom(member)</span><br><span class="line">                .fetchResults();</span><br><span class="line">        <span class="keyword">long</span> total = results.getTotal();</span><br><span class="line">        System.out.println(<span class="string">"total =&gt; "</span>+total);</span><br><span class="line">        List&lt;Member&gt; content = results.getResults();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 count 만 조회</span></span><br><span class="line">       <span class="keyword">long</span> count = queryFactory</span><br><span class="line">               .selectFrom(member)</span><br><span class="line">               .fetchCount();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>4 페이징에서 사용</strong> <code>QueryResults</code> 를 사용하여 실행되는 쿼리를 확인해보면<br>count 를 조회하는 쿼리, 실제 member데이터들을 조회하는 쿼리, 2번 실행되는 것을 볼 수 있다.</p><blockquote><p>따라서 성능을 따진다면 count 쿼리를 따로 작성하여 실행해야 한다.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2020-05-06 22:22:57.278 DEBUG 15676 --- [    Test worker] org.hibernate.SQL                        : </span><br><span class="line">    select</span><br><span class="line">        count(member0_.member_id) as col_0_0_ </span><br><span class="line">    from</span><br><span class="line">        member member0_</span><br><span class="line">2020-05-06 22:22:57.418 DEBUG 15676 --- [    Test worker] org.hibernate.SQL                        : </span><br><span class="line">    select</span><br><span class="line">        member0_.member_id as member_i1_0_,</span><br><span class="line">        member0_.age as age2_0_,</span><br><span class="line">        member0_.team_id as team_id4_0_,</span><br><span class="line">        member0_.username as username3_0_ </span><br><span class="line">    from</span><br><span class="line">        member member0_</span><br><span class="line">total =&gt; 4</span><br></pre></td></tr></table></figure><p><strong>5 count 만 조회</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">       count(member0_.member_id) as col_0_0_ </span><br><span class="line">   from</span><br><span class="line">       member member0_</span><br></pre></td></tr></table></figure><h2 id="페이징"><a href="#페이징" class="headerlink" title="페이징"></a>페이징</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paging1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;Member&gt; results = queryFactory</span><br><span class="line">               .select(member)</span><br><span class="line">               .orderBy(member.username.desc())</span><br><span class="line">               .offset(<span class="number">1</span>)</span><br><span class="line">               .limit(<span class="number">2</span>)</span><br><span class="line">               .fetch();</span><br><span class="line"></span><br><span class="line">       assertThat(results.size()).isEqualTo(<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paging2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       QueryResults&lt;Member&gt; results = queryFactory</span><br><span class="line">               .select(member)</span><br><span class="line">               .orderBy(member.username.desc())</span><br><span class="line">               .offset(<span class="number">1</span>)</span><br><span class="line">               .limit(<span class="number">2</span>)</span><br><span class="line">               .fetchResults();</span><br><span class="line"></span><br><span class="line">       assertThat(results.getTotal()).isEqualTo(<span class="number">4</span>);</span><br><span class="line">       assertThat(results.getLimit()).isEqualTo(<span class="number">2</span>);</span><br><span class="line">       assertThat(results.getTotal()).isEqualTo(<span class="number">1</span>);</span><br><span class="line">       assertThat(results.getResults().size()).isEqualTo(<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="집합-함수"><a href="#집합-함수" class="headerlink" title="집합 함수"></a>집합 함수</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 집합함수</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aggregation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Tuple&gt; result = queryFactory</span><br><span class="line">                .select(</span><br><span class="line">                        member.count(),</span><br><span class="line">                        member.age.sum(),</span><br><span class="line">                        member.age.avg(),</span><br><span class="line">                        member.age.max(),</span><br><span class="line">                        member.age.min()</span><br><span class="line">                )</span><br><span class="line">                .from(member)</span><br><span class="line">                .fetch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 한개만 조회됨</span></span><br><span class="line">        Tuple tuple = result.get(<span class="number">0</span>);</span><br><span class="line">        assertThat(tuple.get(member.count())).isEqualTo(<span class="number">4</span>);</span><br><span class="line">        assertThat(tuple.get(member.age.sum())).isEqualTo(<span class="number">100</span>);</span><br><span class="line">        assertThat(tuple.get(member.age.avg())).isEqualTo(<span class="number">25</span>);</span><br><span class="line">        assertThat(tuple.get(member.age.max())).isEqualTo(<span class="number">40</span>);</span><br><span class="line">        assertThat(tuple.get(member.age.min())).isEqualTo(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="그룹-groupBy-having"><a href="#그룹-groupBy-having" class="headerlink" title="그룹 groupBy , having"></a>그룹 groupBy , having</h2><blockquote><p>팀의 이름과 각 팀의 평균연령을 구하는 예제</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">groupBy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Tuple&gt; results = queryFactory</span><br><span class="line">            .select(team.name, member.age.avg())</span><br><span class="line">            .from(member)</span><br><span class="line">            .join(member.team, team)</span><br><span class="line">            .groupBy(team.name)</span><br><span class="line">            .fetch();</span><br><span class="line"></span><br><span class="line">    Tuple teamA = results.get(<span class="number">0</span>);</span><br><span class="line">    Tuple teamB = results.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    assertThat(teamA.get(team.name)).isEqualTo(<span class="string">"teamA"</span>);</span><br><span class="line">    assertThat(teamA.get(member.age.avg())).isEqualTo(<span class="number">15</span>);</span><br><span class="line">    assertThat(teamB.get(team.name)).isEqualTo(<span class="string">"teamB"</span>);</span><br><span class="line">    assertThat(teamB.get(member.age.avg())).isEqualTo(<span class="number">35</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JPA 의 Querydsl 여러 문법에 활용하는 예제를 통해 쿼리를 작성해봅니다.&lt;br&gt;&lt;code&gt;Q-type&lt;/code&gt; &lt;code&gt;검색조건&lt;/code&gt; &lt;code&gt;fetch()&lt;/code&gt; &lt;code&gt;fetchCount()&lt;/code&gt; &lt;code&gt;QueryResults&lt;/code&gt; &lt;code&gt;페이징&lt;/code&gt;&lt;br&gt;&lt;code&gt;집합함수&lt;/code&gt; &lt;code&gt;groupBy&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ JPA" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-JPA/"/>
    
    
      <category term="jpa" scheme="http://yoursite.com/tags/jpa/"/>
    
      <category term="querydsl" scheme="http://yoursite.com/tags/querydsl/"/>
    
  </entry>
  
  <entry>
    <title>개발일지🌟 DB Connection Pool Error (DBCP)</title>
    <link href="http://yoursite.com/2020/04/27/DB-Connection-Pool/"/>
    <id>http://yoursite.com/2020/04/27/DB-Connection-Pool/</id>
    <published>2020-04-27T01:43:05.000Z</published>
    <updated>2020-05-28T05:39:32.737Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="ISSUE-1-DB-Connection-Pool-ERROR"><a href="#ISSUE-1-DB-Connection-Pool-ERROR" class="headerlink" title="ISSUE[1] DB Connection Pool ERROR"></a>ISSUE[1] DB Connection Pool ERROR</h2><h3 id="현상"><a href="#현상" class="headerlink" title="현상"></a>현상</h3><blockquote><p><strong>DB Connection pool error timeout waiting for idle object</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> DatabaseException - nested exception is org.apache.ibatis.exceptions.PersistenceException:</span><br><span class="line">### Error updating database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: </span><br><span class="line">Could not get JDBC Connection; nested exception is java.sql.SQLException: Cannot get a </span><br><span class="line">connection, pool error Timeout waiting for idle object</span><br></pre></td></tr></table></figure><h3 id="당시-DataBase-config"><a href="#당시-DataBase-config" class="headerlink" title="당시 DataBase config"></a>당시 DataBase config</h3><p><code>#max-active</code> <code>#min-idle</code> <code>#max-idle</code></p><blockquote><ul><li>풀의 초기 커넥션 갯수 : 10</li><li>Idle상태에 풀이 소유한 최소 커넥션 갯수 : 10</li><li>Idle상태에 풀이 소유한 최대 커넥션 갯수 : 30</li><li>최대 커넥션 갯수 : 50</li><li>커넥션이 존재하지 않을 때, 커넥션을 얻기까지 대기하는 최대 대기시간 : 5000</li></ul></blockquote><h3 id="원인-Transaction"><a href="#원인-Transaction" class="headerlink" title="원인 : @Transaction"></a>원인 : @Transaction</h3><p>특정 API 에서 <code>@Trnasaction</code> 이 걸려있었던 상태.<br>이 <code>transaction</code>이 <code>commit</code> 되지 않은 상태에서 이 API 의 요청이 급증하면서 connection 이 부족하게 되고, <strong>DB Dead Lock</strong> 에 빠지게 되었다.</p><p>게다가 해당 API 내에서 또다른 API나 외부호출 기능 수행단계는 7단계를 거쳐야 했다. 그러니 요청이 많이 오거나 중간단계에서 실패하면 부하가 걸릴 수 밖에 없었던 것이다.</p><h3 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h3><p>결론적으로는 @Transactional 어노테이션이 제거하기로 하였다.</p><hr><br/><p><code>JDBC</code> <code>DBCP</code></p><h2 id="일반적으로-DB-에서-Connection-을-얻어오는-과정"><a href="#일반적으로-DB-에서-Connection-을-얻어오는-과정" class="headerlink" title="일반적으로 DB 에서 Connection 을 얻어오는 과정"></a>일반적으로 DB 에서 Connection 을 얻어오는 과정</h2><blockquote><ol><li>DB 서버접속을 위한 JDBC 드라이버를 로드한다.</li><li>DB 접속정보와 DriverManager.getConnection() 을 통해 DB Connection 을 얻는다.</li><li>Connection 객체로부터 쿼리 수행을 위한 PreparedStatement 객체를 받는다.</li><li>executeQuery 를 수행후 ResultSet 객체로 결과를 처리한다.</li><li>완료 후, 사용된 리소스들을 close() 하여 반환한다.</li></ol></blockquote><p>웹 애플리케이션은 HTTP 요청에 의해 Thread 를 생성하게 되고 대부분의 비지니스 로직은 DB 서버로부터 데이터를 얻게 된다.<br>웹 어플리케이션을 지탱하는 WAS 에서 DB 서버에 접근을 시작하고 데이터를 가져오기까지 어느 단계에서 가장 많은 비용이 소비될까.</p><p><img src="https://user-images.githubusercontent.com/28856435/80331215-6764b280-8882-11ea-93f6-277ba2a0a99d.png" alt="image"></p><p>위와 같은 모든 요청에의해 DB접속을 위한 Driver를 로드하고 Connection 객체를 생성하여 연결한다면 물리적으로 DB 서버에 지속적으로 접근해야 한다.</p><h2 id="DBCP-HikariCP"><a href="#DBCP-HikariCP" class="headerlink" title="DBCP (HikariCP)"></a>DBCP (HikariCP)</h2><blockquote><p>이러한 문제를 해결하기 위해 나온 것이 <strong>DBCP</strong> 이다. DB Connection 객체를 생성하고 연결하는데 드는 비용과 시간을 줄이고 네트워크 연결에 대한 부담을 줄여준다.<br>SpringBoot 2.x 출범 이후 HikariCP 를 기본JDBC Connection Pool 로 사용 가능하게 되었다고 한다. 다른 Connection Pool 에 비해 성능이 압도적이라고 한다.<br><em><a href="https://woowabros.github.io/experience/2020/02/06/hikaricp-avoid-dead-lock.html" target="_blank" rel="noopener">HikariCP Dead lock에서 벗어나기 - 우아한형제들 기술블로그</a> 를 바탕으로 작성되었습니다.</em></p></blockquote><h3 id="getConnection"><a href="#getConnection" class="headerlink" title="getConnection"></a>getConnection</h3><p><strong>1. hikariPool.<em>getConnection()</em></strong><br>Thread 는 HikariCP 로부터 <code>connection</code> 을 요청한다.</p><p><strong>2. hikariPool.<em>concurrentBag.borrow()</em></strong><br><strong>2-a)</strong> 현재 Thread 가 이전에 사용했던 <code>connection</code> 리스트 중에 현재 사용가능한(idle) connection이 있는가<br><code>?connection:2-b</code><br><strong>2-b)</strong> hikari pool 전체 connection 중 현재 사용가능한(idle) connection이 있는가<br><code>?connection:2-c</code><br><strong>2-c)</strong> <em>concurrentBag.handOffQueue</em> (다른 Thread 가 쓰고 반납) 에 사용가능한(idle) connection이 있는가<br><code>?connection:2-d</code><br><strong>2-d)</strong> connectionTimeout 이 지났는지 확인한다. (HikariCP default Connection Timeout 은 30초)</p><h3 id="connection-close"><a href="#connection-close" class="headerlink" title="connection.close()"></a>connection.close()</h3><p>transaction 이 정상적으로 commit 혹은 오류로 인한 rollback 이 되면 <code>connection.close()</code> 가 호출되어 connection 을 Pool 에 반납한다.</p><ol><li>Thread : connection.close() </li><li>Hiraki<br>2-a) poolEntry.setState(SATE_NOT_IN_USE) idle Connetion 으로 변환.<br>2-b) concurrentBag.handOffQueue.off(poolEntry)</li></ol><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>위에서 해결한 connection pool error 의 원인은 transaction 에 의한 오류였다. 다음 포스팅에서는 이상적인 <code>#max-active</code> <code>#min-idle</code> <code>#max-idle</code> 을 설정하기 위해서는 무엇을 고려해봐야 하는지 끄적여보려 한다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DB Connection Pool Error 의 원인을 찾아보며&lt;br&gt;&lt;code&gt;DB Connection Pool&lt;/code&gt; 이 무엇인지, &lt;code&gt;DBCP&lt;/code&gt; 의 개념, &lt;code&gt;Hikari Pool&lt;/code&gt; 의 작동방식을 공부.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ DataBase" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-DataBase/"/>
    
    
      <category term="DBCP" scheme="http://yoursite.com/tags/DBCP/"/>
    
      <category term="DataBase" scheme="http://yoursite.com/tags/DataBase/"/>
    
  </entry>
  
  <entry>
    <title>Python 내장함수</title>
    <link href="http://yoursite.com/2020/04/22/Python%20%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98/"/>
    <id>http://yoursite.com/2020/04/22/Python%20%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98/</id>
    <published>2020-04-22T07:10:28.000Z</published>
    <updated>2020-04-28T01:36:01.147Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h3 id="zip-내장-함수-이진연산"><a href="#zip-내장-함수-이진연산" class="headerlink" title="zip 내장 함수, 이진연산"></a>zip 내장 함수, 이진연산</h3><h4 id="zip-은-길이가-같은-자료형을-묶어준다"><a href="#zip-은-길이가-같은-자료형을-묶어준다" class="headerlink" title="zip() 은 길이가 같은 자료형을 묶어준다."></a>zip() 은 길이가 같은 자료형을 묶어준다.</h4><p><strong>예를 들면, 다음과 같다.</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip([3,4,5], [1,2,3]) =&gt; (3,1),(4,2),(5,3)</span><br><span class="line">zip('ABC', [1,2,3])   =&gt; (A,1), (B,2), (C,3)</span><br></pre></td></tr></table></figure><h4 id="1-두-배열을-받아-n-을-받아-2-binary-연산후-3-자릿수만큼-빈곳은-“-”을-채운다"><a href="#1-두-배열을-받아-n-을-받아-2-binary-연산후-3-자릿수만큼-빈곳은-“-”을-채운다" class="headerlink" title="(1)두 배열을 받아, n 을 받아 (2)binary 연산후 (3)자릿수만큼 빈곳은 “#”을 채운다."></a>(1)두 배열을 받아, n 을 받아 (2)binary 연산후 (3)자릿수만큼 빈곳은 “#”을 채운다.</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ziplist</span><span class="params">(n)</span>:</span></span><br><span class="line">    arr1 =[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    n = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num1, num2 <span class="keyword">in</span> zip(arr1, arr2):</span><br><span class="line">        print(num1, num2)</span><br><span class="line">        tmp = bin(num1|num2)[<span class="number">2</span>:] <span class="comment"># 여기서 파이썬의만의 '문자열 슬라이싱' 아래에서 개념확인</span></span><br><span class="line">        print(<span class="string">'이진연산 후 '</span>+tmp)</span><br><span class="line"></span><br><span class="line">        tmp = tmp.rjust(n, <span class="string">'#'</span>)</span><br><span class="line">        print(<span class="string">'결과 '</span>+tmp)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure><p><strong>출력결과</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(3, 1)</span><br><span class="line">이진연산 후 11</span><br><span class="line">결과 ###11</span><br><span class="line">(4, 2)</span><br><span class="line">이진연산 후 110</span><br><span class="line">결과 ##110</span><br><span class="line">(5, 3)</span><br><span class="line">이진연산 후 111</span><br><span class="line">결과 ##111</span><br></pre></td></tr></table></figure><h3 id="python-문자열-슬라이싱"><a href="#python-문자열-슬라이싱" class="headerlink" title="python 문자열 슬라이싱"></a>python 문자열 슬라이싱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"Pithon"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">1</span>]</span><br><span class="line"><span class="string">'P'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:]</span><br><span class="line"><span class="string">'thon'</span></span><br></pre></td></tr></table></figure><h3 id="rJust-함수-N자릿수로-리턴-빈곳은”-”-으로-채우기"><a href="#rJust-함수-N자릿수로-리턴-빈곳은”-”-으로-채우기" class="headerlink" title="rJust 함수 : N자릿수로 리턴(빈곳은”#” 으로 채우기)"></a>rJust 함수 : N자릿수로 리턴(빈곳은”#” 으로 채우기)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rjst</span><span class="params">(n)</span>:</span></span><br><span class="line">    list= [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</span><br><span class="line">    tostring = <span class="string">""</span>.join(list)</span><br><span class="line">    <span class="keyword">if</span> n &gt; len(tostring):</span><br><span class="line">        tostring = tostring.rjust(n, <span class="string">'#'</span>)</span><br><span class="line">    print(<span class="string">"tostring : "</span> + tostring)</span><br><span class="line">    <span class="comment"># tostring : #######123</span></span><br><span class="line"></span><br><span class="line"> rjst(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="번외-숫자를-한-자리수로-잘라-각각-리스트에-담기"><a href="#번외-숫자를-한-자리수로-잘라-각각-리스트에-담기" class="headerlink" title="(번외) 숫자를 한 자리수로 잘라 각각 리스트에 담기"></a>(번외) 숫자를 한 자리수로 잘라 각각 리스트에 담기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numToList</span><span class="params">(number)</span>:</span></span><br><span class="line">    n = <span class="number">234</span></span><br><span class="line">    list = [ int(i) <span class="keyword">for</span> i <span class="keyword">in</span> str(n)]</span><br><span class="line">    print(list)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">    <span class="comment"># list= [2, 3, 4]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1) 알고리즘 문제 예제를 통해 zip 내장 함수, 이진연산, rJust함수 알아보기&lt;br&gt;2) (번외) 숫자를 한 자리수로 잘라 각각 리스트에 담기&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Python" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="python 이진연산" scheme="http://yoursite.com/tags/python-%EC%9D%B4%EC%A7%84%EC%97%B0%EC%82%B0/"/>
    
      <category term="rJust" scheme="http://yoursite.com/tags/rJust/"/>
    
  </entry>
  
  <entry>
    <title>CODING TEST {&quot;싱글숫자 구하기&quot;} with Java</title>
    <link href="http://yoursite.com/2020/04/22/CODING-TEST-with-Java-0/"/>
    <id>http://yoursite.com/2020/04/22/CODING-TEST-with-Java-0/</id>
    <published>2020-04-22T07:03:14.000Z</published>
    <updated>2020-06-15T01:27:34.691Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="문제-싱글숫자-구하기"><a href="#문제-싱글숫자-구하기" class="headerlink" title="[문제] 싱글숫자 구하기"></a>[문제] 싱글숫자 구하기</h2><blockquote><p>Q. Given a non-empty array of integers, every element appears twice except for one. Find that single one.</p></blockquote><p><strong>문제.</strong><br>다들 아시겠지만, 해석해보자면 배열 안에 자기 짝이 없는 Single N 을 리턴하는 문제이다.<br>누구나 생각할 수 있는 이중 for 문을 사용해 풀었는데<br>이상하게도 아래 주석된 부분의 <code>if(list.get(i)==list.get(j))</code> 이 부분에서 비교를 잘 못하는 오류가 발생했다.<br>두 자리 수 까지는 비교연산이 잘 되는데 왠지 세자리 수 부터 안되는 듯 보였다.<br>혹시 하여 세자리 수에서 십의자리를 늘려가며 까지 연산 테스트를 했는데 130부터 비교되지 않는것..</p><p><strong>해결.</strong><br>해결책은 가장 근본적인 데에 있었다.<br>리스트의 Generics 가 Integer 로 되어 있었는데 <code>==</code> 연산자를 써서 비교했던것 ..<br>자세한 설명은 아래에서 더 하겠다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> single = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.stream(nums).boxed().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> isSingle = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;list.size(); j++)&#123;</span><br><span class="line">                <span class="comment">// if(list.get(i)==list.get(j))&#123;        ----&gt; ERROR</span></span><br><span class="line">                <span class="keyword">if</span>(list.get(i).equals(list.get(j)))&#123;</span><br><span class="line">                    isSingle = <span class="keyword">false</span>;</span><br><span class="line">                    list.remove(list.get(i));</span><br><span class="line">                    j--;</span><br><span class="line">                    list.remove(list.get(j));</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isSingle)&#123;</span><br><span class="line">                single = list.get(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br/><h2 id="JAVA-기본형-Primitive-type-vs-참조형-Reference-type"><a href="#JAVA-기본형-Primitive-type-vs-참조형-Reference-type" class="headerlink" title="JAVA 기본형(Primitive type) vs 참조형(Reference type)"></a>JAVA 기본형(Primitive type) vs 참조형(Reference type)</h2><p><strong>기본형 (Primitive type)</strong><br>o 연산자를 <code>값</code> 으로 비교할 수 있다. 즉, 산술연산이 가능하다.<br>o 초기값을 필요로 한다.<br>o 종류<br>  <code>void</code>, <code>boolean</code>, <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>char</code>, <code>boolean</code>, <code>void</code></p><p><strong>참조형의 종류에는 아래와 같은 타입들이 존재한다.</strong><br>o 연산자가 객체의 <code>주소값</code> 으로 비교된다. 산술연산이 불가하다.<br>o 초기값을 NULL 로 지정할 수 있다.<br>o 종류<br>  <code>Void</code>, <code>Boolean</code>, <code>Byte</code>, <code>Short</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, <code>Double</code>, <code>Character</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 매일매일 코딩테스트 with 자바&lt;/p&gt;
&lt;p&gt;1) 배열안에는 커플숫자 여러개와 싱글숫자 하나만 존재한다. 싱글숫자 구하기.&lt;br&gt;2) 여기서 다시 깨닫는 기초. JAVA 기본형(Primitive type) vs 참조형(Reference type)&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ coding test" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-coding-test/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="codingtest" scheme="http://yoursite.com/tags/codingtest/"/>
    
  </entry>
  
  <entry>
    <title>CODING TEST with Java</title>
    <link href="http://yoursite.com/2020/04/14/coding-test-with-Java%20copy/"/>
    <id>http://yoursite.com/2020/04/14/coding-test-with-Java%20copy/</id>
    <published>2020-04-13T15:05:31.000Z</published>
    <updated>2020-04-28T01:36:01.149Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="최대공약수와-최소공배수"><a href="#최대공약수와-최소공배수" class="headerlink" title="최대공약수와 최소공배수"></a>최대공약수와 최소공배수</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =====================================================================================================</span></span><br><span class="line"><span class="comment">// 문제 설명</span></span><br><span class="line"><span class="comment">// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수,</span></span><br><span class="line"><span class="comment">// solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.</span></span><br><span class="line"><span class="comment">// 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 제한 사항</span></span><br><span class="line"><span class="comment">// 두 수는 1이상 1000000이하의 자연수입니다.</span></span><br><span class="line"><span class="comment">// =====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] solution(<span class="keyword">int</span> n, <span class="keyword">int</span> m) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">1000000</span>; <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> fstnum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sndnum = <span class="number">0</span>;</span><br><span class="line">    List&lt;Integer&gt; fstnumArr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> multi = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m)&#123;</span><br><span class="line">        fstnum= n;</span><br><span class="line">        sndnum = m;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; fstnum =m; sndnum=n; &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"fstnum : "</span>+fstnum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=fstnum; i++)&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"i= %d/ fstnum 나머지= %d"</span>, i, fstnum%i));</span><br><span class="line">        <span class="keyword">if</span>(fstnum%i==<span class="number">0</span>) &#123;</span><br><span class="line">            fstnumArr.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"fstnumArr : "</span>+ fstnumArr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= fstnumArr.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sndnum%fstnumArr.get(i)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min&gt;fstnumArr.get(i))&#123;</span><br><span class="line">                min = fstnumArr.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            multi *= fstnumArr.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"최대 공약수 : "</span> + min);</span><br><span class="line">    System.out.println(<span class="string">"multi : "</span> + multi);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 최대공배수는 각 2개 숫자를 (최소공약수들의 곱의 값으로 나눈 수)* (최소공약수들의 곱)</span></span><br><span class="line">    max = (n/multi) * (m/multi) * multi;</span><br><span class="line">    System.out.println(<span class="string">"최소 공배수 : "</span>+ max);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] answer = <span class="keyword">new</span> Solution().solution(<span class="number">3</span>, <span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="행렬의-덧셈"><a href="#행렬의-덧셈" class="headerlink" title="행렬의 덧셈"></a>행렬의 덧셈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// =====================================================================================================</span></span><br><span class="line">    <span class="comment">// 문제 설명</span></span><br><span class="line">    <span class="comment">// 행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. </span></span><br><span class="line">    <span class="comment">// 2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요.</span></span><br><span class="line">    <span class="comment">// =====================================================================================================</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] solution2(<span class="keyword">int</span>[][] arr1, <span class="keyword">int</span>[][] arr2) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr1.length;</span><br><span class="line">    <span class="keyword">int</span>[][] answer =  <span class="keyword">new</span> <span class="keyword">int</span>[len][arr1[<span class="number">0</span>].length];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr1[i].length; j++)&#123;</span><br><span class="line">            answer[i][j] = arr1[i][j] + arr2[i][j];</span><br><span class="line">            System.out.println(<span class="string">"answer : "</span>+ Arrays.deepToString(answer));</span><br><span class="line">            <span class="comment">//1차원 배열에서는 toString 가능, 2차원 이상에서는 Arrays.deepToString(answer) </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// int[] answer = new Solution().solution(3, 12);</span></span><br><span class="line">    <span class="keyword">int</span>[][] arr1 = &#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] arr2 = &#123;&#123;<span class="number">2</span>&#125;,&#123;<span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] answer = <span class="keyword">new</span> Solution().solution2(arr1, arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 매일매일 코딩테스트 with 자바&lt;/p&gt;
&lt;p&gt;1) 최대공약수와 최소공배수를 반환하는 함수 구현&lt;br&gt;2) 행렬의 덧셈을 반환하는 함수구현&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ coding test" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-coding-test/"/>
    
    
  </entry>
  
  <entry>
    <title>CODING TEST with Java</title>
    <link href="http://yoursite.com/2020/04/14/coding-test-with-Java/"/>
    <id>http://yoursite.com/2020/04/14/coding-test-with-Java/</id>
    <published>2020-04-13T15:05:31.000Z</published>
    <updated>2020-04-28T01:36:01.150Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="최대공약수와-최소공배수"><a href="#최대공약수와-최소공배수" class="headerlink" title="최대공약수와 최소공배수"></a>최대공약수와 최소공배수</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =====================================================================================================</span></span><br><span class="line"><span class="comment">// 문제 설명</span></span><br><span class="line"><span class="comment">// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수,</span></span><br><span class="line"><span class="comment">// solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.</span></span><br><span class="line"><span class="comment">// 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 제한 사항</span></span><br><span class="line"><span class="comment">// 두 수는 1이상 1000000이하의 자연수입니다.</span></span><br><span class="line"><span class="comment">// =====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] solution(<span class="keyword">int</span> n, <span class="keyword">int</span> m) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">1000000</span>; <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> fstnum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sndnum = <span class="number">0</span>;</span><br><span class="line">    List&lt;Integer&gt; fstnumArr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> multi = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m)&#123;</span><br><span class="line">        fstnum= n;</span><br><span class="line">        sndnum = m;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; fstnum =m; sndnum=n; &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"fstnum : "</span>+fstnum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=fstnum; i++)&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"i= %d/ fstnum 나머지= %d"</span>, i, fstnum%i));</span><br><span class="line">        <span class="keyword">if</span>(fstnum%i==<span class="number">0</span>) &#123;</span><br><span class="line">            fstnumArr.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"fstnumArr : "</span>+ fstnumArr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= fstnumArr.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sndnum%fstnumArr.get(i)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min&gt;fstnumArr.get(i))&#123;</span><br><span class="line">                min = fstnumArr.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            multi *= fstnumArr.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"최대 공약수 : "</span> + min);</span><br><span class="line">    System.out.println(<span class="string">"multi : "</span> + multi);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 최대공배수는 각 2개 숫자를 (최소공약수들의 곱의 값으로 나눈 수)* (최소공약수들의 곱)</span></span><br><span class="line">    max = (n/multi) * (m/multi) * multi;</span><br><span class="line">    System.out.println(<span class="string">"최소 공배수 : "</span>+ max);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] answer = <span class="keyword">new</span> Solution().solution(<span class="number">3</span>, <span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="행렬의-덧셈"><a href="#행렬의-덧셈" class="headerlink" title="행렬의 덧셈"></a>행렬의 덧셈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// =====================================================================================================</span></span><br><span class="line">    <span class="comment">// 문제 설명</span></span><br><span class="line">    <span class="comment">// 행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. </span></span><br><span class="line">    <span class="comment">// 2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요.</span></span><br><span class="line">    <span class="comment">// =====================================================================================================</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] solution2(<span class="keyword">int</span>[][] arr1, <span class="keyword">int</span>[][] arr2) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr1.length;</span><br><span class="line">    <span class="keyword">int</span>[][] answer =  <span class="keyword">new</span> <span class="keyword">int</span>[len][arr1[<span class="number">0</span>].length];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr1[i].length; j++)&#123;</span><br><span class="line">            answer[i][j] = arr1[i][j] + arr2[i][j];</span><br><span class="line">            System.out.println(<span class="string">"answer : "</span>+ Arrays.deepToString(answer));</span><br><span class="line">            <span class="comment">//1차원 배열에서는 toString 가능, 2차원 이상에서는 Arrays.deepToString(answer) </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// int[] answer = new Solution().solution(3, 12);</span></span><br><span class="line">    <span class="keyword">int</span>[][] arr1 = &#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] arr2 = &#123;&#123;<span class="number">2</span>&#125;,&#123;<span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] answer = <span class="keyword">new</span> Solution().solution2(arr1, arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 매일매일 코딩테스트 with 자바&lt;/p&gt;
&lt;p&gt;1) 최대공약수와 최소공배수를 반환하는 함수 구현&lt;br&gt;2) 행렬의 덧셈을 반환하는 함수구현&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ coding test" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-coding-test/"/>
    
    
  </entry>
  
  <entry>
    <title>CODING TEST with Python</title>
    <link href="http://yoursite.com/2020/04/12/CODING-TEST-with-Python/"/>
    <id>http://yoursite.com/2020/04/12/CODING-TEST-with-Python/</id>
    <published>2020-04-12T14:51:24.000Z</published>
    <updated>2020-04-28T01:36:01.137Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="Return-n-정수를-받아서-각자리수의-합"><a href="#Return-n-정수를-받아서-각자리수의-합" class="headerlink" title="Return  n 정수를 받아서 각자리수의 합"></a>Return  n 정수를 받아서 각자리수의 합</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment">## 코딩 테스트</span></span><br><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment"># 문제 설명</span></span><br><span class="line"><span class="comment"># n 정수를 받아서 각자리수의 합을 구함 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">substring</span><span class="params">(n)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    num = str(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(num)):</span><br><span class="line">        print(<span class="string">"i = "</span>+str(i))</span><br><span class="line"></span><br><span class="line">        cut= num[i:i+<span class="number">1</span>]</span><br><span class="line">        print(<span class="string">"num &#123;0&#125;=&gt; cut &#123;1&#125;"</span>.format(num, cut))</span><br><span class="line">        sum += cut</span><br><span class="line">        print(sum)</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n)</span>:</span></span><br><span class="line">    answer = substring(n)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line">print(<span class="string">"result : "</span> + str(solution(<span class="number">123</span>)))</span><br></pre></td></tr></table></figure><h2 id="Return-x부터-시작해-x씩-증가하는-숫자를-n개-지니는-리스트"><a href="#Return-x부터-시작해-x씩-증가하는-숫자를-n개-지니는-리스트" class="headerlink" title="Return x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트"></a>Return x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment">## 코딩 테스트</span></span><br><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment"># 문제 설명</span></span><br><span class="line"><span class="comment"># 함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 </span></span><br><span class="line"><span class="comment"># 지니는 리스트를 리턴해야 합니다. 다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 제한 조건</span></span><br><span class="line"><span class="comment"># x는 -10000000 이상, 10000000 이하인 정수입니다.</span></span><br><span class="line"><span class="comment"># n은 1000 이하인 자연수입니다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution2</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    answer= []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        answer.append(x*i)</span><br><span class="line">        print(<span class="string">"answer : &#123;0&#125;"</span>.format(answer))</span><br><span class="line">solution2(<span class="number">2</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="각-문자열의-인덱스-n번째-글자기준-정렬"><a href="#각-문자열의-인덱스-n번째-글자기준-정렬" class="headerlink" title="각 문자열의 인덱스 n번째 글자기준 정렬"></a>각 문자열의 인덱스 n번째 글자기준 정렬</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment">## 코딩 테스트</span></span><br><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment"># 문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 </span></span><br><span class="line"><span class="comment"># 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 [sun, bed, car]이고 n이 1이면 </span></span><br><span class="line"><span class="comment"># 각 단어의 인덱스 1의 문자 u, e, a로 strings를 정렬합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 제한 조건</span></span><br><span class="line"><span class="comment"># strings는 길이 1 이상, 50이하인 배열입니다.</span></span><br><span class="line"><span class="comment"># strings의 원소는 소문자 알파벳으로 이루어져 있습니다.</span></span><br><span class="line"><span class="comment"># strings의 원소는 길이 1 이상, 100이하인 문자열입니다.</span></span><br><span class="line"><span class="comment"># 모든 strings의 원소의 길이는 n보다 큽니다.</span></span><br><span class="line"><span class="comment"># 인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 입출력 예 1</span></span><br><span class="line"><span class="comment"># sun, bed, car의 1번째 인덱스 값은 각각 u, e, a 입니다. 이를 기준으로 strings를 정렬하면 [car, bed, sun] 입니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 입출력 예 2</span></span><br><span class="line"><span class="comment"># abce와 abcd, cdx의 2번째 인덱스 값은 c, c, x입니다. 따라서 정렬 후에는 cdx가 가장 뒤에 위치합니다. </span></span><br><span class="line"><span class="comment"># abce와 abcd는 사전순으로 정렬하면 abcd가 우선하므로, 답은 [abcd, abce, cdx] 입니다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeArr</span><span class="params">(strings, n)</span>:</span></span><br><span class="line">    answer = []</span><br><span class="line">    tupList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strings:</span><br><span class="line">        tmp = i[n:n+<span class="number">1</span>]</span><br><span class="line">        tup = (i, tmp)</span><br><span class="line">        tupList.append(tup)</span><br><span class="line">        print(tupList) </span><br><span class="line">        <span class="comment"># 기본 튜플 정렬 </span></span><br><span class="line">        <span class="comment"># key = lambda x : x[0]</span></span><br><span class="line">        <span class="comment"># 1) 1번째 원소 정렬후 0번째 원소로 정렬</span></span><br><span class="line">        <span class="comment"># key = lambda x : (x[1], x[0])</span></span><br><span class="line">        <span class="comment"># 2) 1번째 원소 내림차순 정렬후 0번째 원소로 정렬</span></span><br><span class="line">        <span class="comment"># key = lambda x : (-x[1], x[0])</span></span><br><span class="line">    tupList.sort(key = <span class="keyword">lambda</span> x : (x[<span class="number">1</span>],x[<span class="number">0</span>]))</span><br><span class="line">    print(<span class="string">"after sort"</span>)</span><br><span class="line">    print(tupList)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">stringList = [<span class="string">'abcw'</span>, <span class="string">'abce'</span>, <span class="string">'cdx'</span>]</span><br><span class="line">n = <span class="number">2</span></span><br><span class="line">makeArr(stringList, n);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 매일매일 코딩테스트 with 파이썬&lt;/p&gt;
&lt;p&gt;1) 정수N 자릿수의 합&lt;br&gt;2) X부터 X만큼 증가, N개를 저장하는 리스트&lt;br&gt;3) 배열내 갹 문자열의 인덱스 n번째 글자기준 정렬&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ coding test" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-coding-test/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>스프링 시큐리티 OAuth 사용한 로그인 기능구현</title>
    <link href="http://yoursite.com/2020/03/26/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0%20%EB%A1%9C%EA%B7%B8%EC%9D%B8%EA%B5%AC%ED%98%84/"/>
    <id>http://yoursite.com/2020/03/26/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0%20%EB%A1%9C%EA%B7%B8%EC%9D%B8%EA%B5%AC%ED%98%84/</id>
    <published>2020-03-26T13:17:40.000Z</published>
    <updated>2020-04-28T01:36:01.152Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h3 id="스프링-시큐리티-Spring-Security"><a href="#스프링-시큐리티-Spring-Security" class="headerlink" title="스프링 시큐리티 Spring Security"></a>스프링 시큐리티 Spring Security</h3><blockquote><p>인증(Authentication)과 인가(Authorization) (권한부여)를 가진 프레임워크이다.</p></blockquote><ul><li>2.0 버전에서 부터는 client 인증정보만 필요로 하게 되었다.</li></ul><h3 id="Google-Cloud-Platform-에서-인증용-API-신청하기"><a href="#Google-Cloud-Platform-에서-인증용-API-신청하기" class="headerlink" title="Google Cloud Platform 에서 인증용 API 신청하기"></a>Google Cloud Platform 에서 인증용 API 신청하기</h3><blockquote><p><a href="https://console.cloud.google.com/home/dashboard?project=fruite" target="_blank" rel="noopener">구글클라우드 플랫폼</a> 에 접속하여 프로젝트를 생성한다. 여기서 발급된 인증정보 <code>clientId</code>, <code>clientSecret</code> 을 통해 스프링 시큐리티를 사용한 로그인 기능을 구현할 수 있다.</p></blockquote><p><strong>생성된 프로젝트에서 OAuth 동의화면을 구성한다.</strong><br><img src="https://user-images.githubusercontent.com/28856435/77653327-e1b7c380-6fb2-11ea-98bd-5ac9eb7393db.png" alt="image"><br><br/></p><p><strong>웹 어플리케이션 유형의 사용자 인증정보를 만든다.</strong><br><img src="https://user-images.githubusercontent.com/28856435/77651410-17a77880-6fb0-11ea-9bf4-5ee0d1c1fed2.png" alt="image"><br><br/></p><p><strong>아래와 같이 웹 어플리케이션의 클라이언트ID가 생성되었다.</strong><br><img src="https://user-images.githubusercontent.com/28856435/77651295-ecbd2480-6faf-11ea-85b2-09bbb8da3f9d.png" alt="image"><br><br/></p><h3 id="로그인-구현을-위한-설정"><a href="#로그인-구현을-위한-설정" class="headerlink" title="로그인 구현을 위한 설정"></a>로그인 구현을 위한 설정</h3><p><strong>build.gradle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-security:2.1.2.RELEASE'</span></span><br><span class="line">implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-oauth2:2.1.2.RELEASE'</span></span><br><span class="line"></span><br><span class="line">compile(<span class="string">'org.springframework.security:spring-security-oauth2-client'</span>)</span><br><span class="line">compile(<span class="string">'org.springframework.security:spring-security-oauth2-jose'</span>)</span><br></pre></td></tr></table></figure><p> <strong>application-oauth.properties</strong><br> /src/main/resources/static/application-oauth.properties 파일을 추가한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.security.oauth2.client.registration.google.client-id=&#123;클라이언트 ID&#125;</span><br><span class="line">spring.security.oauth2.client.registration.google.client-secret=&#123;secret 코드&#125;</span><br><span class="line">spring.security.oauth2.client.registration.google.scope=profile,email</span><br></pre></td></tr></table></figure><p><strong>.gitIgnore</strong><br>해당 설정파일을 gitIgnore 에 넣어준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application-oauth.properties</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong><br><code>include: oauth</code> 를 추가한다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">include:</span> <span class="string">oauth</span></span><br></pre></td></tr></table></figure><h3 id="소셜-인증-구현하기"><a href="#소셜-인증-구현하기" class="headerlink" title="소셜 인증 구현하기"></a>소셜 인증 구현하기</h3><h4 id="ClientResources-클래스"><a href="#ClientResources-클래스" class="headerlink" title="ClientResources 클래스"></a>ClientResources 클래스</h4><p>프로퍼티 설정을 편리하게 이용 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientResources</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NestedConfigurationProperty</span></span><br><span class="line"><span class="keyword">private</span> AuthorizationCodeResourceDetails client = <span class="keyword">new</span> AuthorizationCodeResourceDetails();</span><br><span class="line"><span class="meta">@NestedConfigurationProperty</span></span><br><span class="line"><span class="keyword">private</span> ResourceServerProperties resource = <span class="keyword">new</span> ResourceServerProperties();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationCodeResourceDetails <span class="title">geClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResourceServerProperties <span class="title">getResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> resource;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>** 혹시나 AuthorizationCodeResourceDetails 이 추가되지 않으면 oauth2-autoconfigure 디펜던시가 필요하다.<br>   build.gradle 에 아래와 같이 추가해준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.1.7.RELEASE'</span></span><br></pre></td></tr></table></figure><h4 id="SecurityConfig-클래스-작성"><a href="#SecurityConfig-클래스-작성" class="headerlink" title="SecurityConfig 클래스 작성"></a>SecurityConfig 클래스 작성</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableOAuth</span>2Client</span><br><span class="line"><span class="function"><span class="keyword">public</span> class SecurityConfig extends <span class="title">WebSecurityConfigAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConfigurationProperties</span>(<span class="string">"google"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ClientResources <span class="title">google</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ClientResources();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 인증 요청에 따른 리다이렉션을 위한 빈 등록</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">oauth2ClientFilterRegistration</span><span class="params">(OAuth2ClientContextFilter filter)</span> </span>&#123;</span><br><span class="line">FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">registration.setFilter(filter);</span><br><span class="line">registration.setOrder(-<span class="number">100</span>); <span class="comment">//Spring Security 필터보다 우선순위를 낮게 둔다.</span></span><br><span class="line"><span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Filter <span class="title">ssoFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CompositeFilter filter = <span class="keyword">new</span> CompositeFilter();</span><br><span class="line">List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;Filter&gt;();</span><br><span class="line"></span><br><span class="line">filters.add(ssoFilter(google(), <span class="string">"/login/google"</span>));</span><br><span class="line">filter.setFilters(filters);</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Filter <span class="title">ssoFilter</span><span class="params">(ClientResources client, String path)</span> </span>&#123;</span><br><span class="line"><span class="comment">// OAuth2ClientAuthenticationProcessingFilter</span></span><br><span class="line"><span class="comment">// -&gt; OAuth2 인증 서버에서 OAuth2 액세스 토큰을 획득.</span></span><br><span class="line"><span class="comment">// -&gt; 인증 객체를 SecurityContext 에 로드하는 데 사용할 수 있는 OAuth2 클라이언트 필터</span></span><br><span class="line">OAuth2ClientAuthenticationProcessingFilter filter = <span class="keyword">new</span> OAuth2ClientAuthenticationProcessingFilter(path);</span><br><span class="line">OAuth2RestTemplate restTemplate = <span class="keyword">new</span> OAuth2RestTemplate(client.getClient(), oauth2ClientContext);</span><br><span class="line">filter.setRestTemplate(restTemplate);</span><br><span class="line">UserInfoTokenServices tokenServices = </span><br><span class="line"><span class="keyword">new</span> UserInfoTokenServices(client.getResource().getUserInfoUri(), client.getClient().getClientId());</span><br><span class="line">filter.setTokenServices(tokenServices);</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🍃 SpringBoot, SpringSecurity, OAuth2 를 이용해 Google 로그인을 구현해 봅니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Spring" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Spring/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="OAuth2" scheme="http://yoursite.com/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>Git pull 오류: Nothing to fetch</title>
    <link href="http://yoursite.com/2020/03/17/Git-pull-%EC%98%A4%EB%A5%98-Nothing-to-fetch/"/>
    <id>http://yoursite.com/2020/03/17/Git-pull-%EC%98%A4%EB%A5%98-Nothing-to-fetch/</id>
    <published>2020-03-17T03:09:22.000Z</published>
    <updated>2020-04-28T01:36:01.139Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h3 id="Git-pull-오류"><a href="#Git-pull-오류" class="headerlink" title="Git pull 오류"></a>Git pull 오류</h3><p>이클립스에서 git pull 을 실행하고 아래와 같으 오류를 직면했다.</p><p><img src="https://user-images.githubusercontent.com/28856435/76814014-f969ac00-683c-11ea-865c-62c14c550d22.png" alt="image"></p><h4 id="원인"><a href="#원인" class="headerlink" title="원인?"></a>원인?</h4><blockquote><p>remote 에 fetch 가 잡히지 않아서이다.</p></blockquote><p>그럼 또 의문이 생긴다. 왜 remote 에 fetch 를 잡아줘야 할까 ?<br>Git 에 대해 정확한 개념이 잡혀 있지 않은 듯해서 모호한 개념들에 대해 찾아봤다.</p><h3 id="origin-remote-정확히-짚고-가기"><a href="#origin-remote-정확히-짚고-가기" class="headerlink" title="origin remote 정확히 짚고 가기"></a>origin remote 정확히 짚고 가기</h3><p>필자의 블로그 repository 주소는 <code>https://github.com/ksso730/myblog.git</code> 이다.<br>로컬에 이 서버를 clone 하게되면 Git 은 자동으로 <code>origin</code> 이라는 이름을 붙인다.<br><code>origin</code> 으로부터 해당 repository 데이터를 모두 받고, <code>master</code> 브랜치를 가리키는 포인터를 만든다. 이 포인터를 <code>origin/master</code> 라 부른다.<br>Git 은 로컬의 <code>master</code> 브랜치가 <code>origin/master</code> 를 가리키게 한다.</p><p>정리해보자면 ,</p><p><code>https://github.com/ksso730/myblog.git</code></p><p>(My Computer - origin/master) -&gt; </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;💬 &lt;em&gt;작성중&lt;/em&gt;&lt;br&gt;이클립스에서 Git pull 오류: Nothing to fetch 해결 방법입니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Git" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>gradle 프로젝트 MariaDB 연동</title>
    <link href="http://yoursite.com/2020/03/16/gradle-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-MariaDB-%EC%97%B0%EB%8F%99/"/>
    <id>http://yoursite.com/2020/03/16/gradle-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-MariaDB-%EC%97%B0%EB%8F%99/</id>
    <published>2020-03-16T07:26:02.000Z</published>
    <updated>2020-04-28T01:36:01.150Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h3 id="Test-소스-구조"><a href="#Test-소스-구조" class="headerlink" title="Test 소스 구조"></a>Test 소스 구조</h3><p><img src="https://user-images.githubusercontent.com/28856435/77139690-4efebc80-6aba-11ea-858e-ae959d58ea4a.png" alt="image"></p><br/><h3 id="build-gradle-에-의존성-주입"><a href="#build-gradle-에-의존성-주입" class="headerlink" title="build.gradle 에 의존성 주입"></a>build.gradle 에 의존성 주입</h3><p><strong>build.gradle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.1.7.RELEASE'</span></span><br><span class="line">    id <span class="string">'io.spring.dependency-management'</span> version <span class="string">'1.0.7.RELEASE'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.sue'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="string">'1.8'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123; url <span class="string">"https://plugins.gradle.org/m2/"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//mybatis</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-dependencies:2.0.5.RELEASE'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 스프링 부트를 사용하기 위함</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 데이터를 연동하기 위함</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">//mariadb 사용</span></span><br><span class="line">    compile(<span class="string">"mysql:mysql-connector-java:5.1.34"</span>)</span><br><span class="line">    compile(<span class="string">"org.mariadb.jdbc:mariadb-java-client"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use JUnit test framework</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml-설정파일-생성"><a href="#application-yml-설정파일-생성" class="headerlink" title="application.yml 설정파일 생성"></a>application.yml 설정파일 생성</h3><h4 id="DB-연동-실패한-application-yml"><a href="#DB-연동-실패한-application-yml" class="headerlink" title="DB 연동 실패한 application.yml"></a>DB 연동 실패한 application.yml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /</span><br><span class="line">      </span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//127.0.0.1/sosi?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    username: root</span><br><span class="line">    password: mysql1234</span><br><span class="line">    </span><br><span class="line">    jpa:</span><br><span class="line">    show-sql: <span class="keyword">true</span></span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: create</span><br><span class="line">      naming:</span><br><span class="line">        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span><br><span class="line">      use-<span class="keyword">new</span>-id-generator-mappings: <span class="keyword">false</span></span><br><span class="line">    properties:</span><br><span class="line">       hibernate:</span><br><span class="line">          dialect: org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">          format_sql: <span class="keyword">true</span></span><br><span class="line">    open-in-view: <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-<span class="number">8</span></span><br><span class="line">      enabled: <span class="keyword">true</span></span><br><span class="line">      force: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>위와 같았던 application.yml 파일을 아래와 같이 고쳤더니 DB 연동에 성공했다.<br>DB 연동에 필요했던 profile 이 없었던것.<br>그리고 <code>datasource</code> 상위의 속성도 빠뜨려져 있었다.<br><code>ddl-auto</code> 속성은 DB 생성 이후 <code>create</code> -&gt; <code>update</code> 로 바꿔주었다.</p><h4 id="DB-연동-성공한-application-yml"><a href="#DB-연동-성공한-application-yml" class="headerlink" title="DB 연동 성공한 application.yml"></a>DB 연동 성공한 application.yml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /</span><br><span class="line">    </span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active:       </span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/sue</span></span><br><span class="line">    username: root</span><br><span class="line">    password: ehdrmf</span><br><span class="line">    </span><br><span class="line">  jpa:</span><br><span class="line">    show-sql: <span class="keyword">true</span></span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">      naming:</span><br><span class="line">        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span><br><span class="line">      use-<span class="keyword">new</span>-id-generator-mappings: <span class="keyword">false</span></span><br><span class="line">    properties:</span><br><span class="line">       hibernate:</span><br><span class="line">          dialect: org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">          format_sql: <span class="keyword">true</span></span><br><span class="line">    open-in-view: <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-<span class="number">8</span></span><br><span class="line">      enabled: <span class="keyword">true</span></span><br><span class="line">      force: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gradle 프로젝트에서의 mariaDB 연동방법을 알아봅니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Config" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Config/"/>
    
    
      <category term="jpa" scheme="http://yoursite.com/tags/jpa/"/>
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
      <category term="mariadb" scheme="http://yoursite.com/tags/mariadb/"/>
    
  </entry>
  
  <entry>
    <title>JPA 공통 매핑정보 사용</title>
    <link href="http://yoursite.com/2020/03/04/JPA-%EA%B3%B5%ED%86%B5-%EB%A7%A4%ED%95%91%EC%A0%95%EB%B3%B4-%EC%82%AC%EC%9A%A9/"/>
    <id>http://yoursite.com/2020/03/04/JPA-%EA%B3%B5%ED%86%B5-%EB%A7%A4%ED%95%91%EC%A0%95%EB%B3%B4-%EC%82%AC%EC%9A%A9/</id>
    <published>2020-03-04T14:07:50.000Z</published>
    <updated>2020-04-28T01:36:01.142Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h3 id="MappedSuperclass"><a href="#MappedSuperclass" class="headerlink" title="@MappedSuperclass"></a>@MappedSuperclass</h3><p><code>BaseEntity</code> 클래스.<br>자주쓰이는 공통으로 사용되는 매핑정보들을 모아, 상속받아 사용.<br>실무에서 많이 사용되는 방식이다.<br>추상 클래스로 만들어둔다. <code>abstract</code><br>물론 조회는 안된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String modDate;</span><br><span class="line">    <span class="keyword">private</span> String regDate;</span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예를 들어 Member 가 BasdEnty 를 상속받는다면,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"MEMBER_ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"USERNAME"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long username;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Member member = <span class="keyword">new</span> Member();</span><br><span class="line">    member.setCreatedBy(<span class="string">"Sue"</span>);</span><br><span class="line">    member.setModDate(<span class="string">"20200212"</span>);</span><br><span class="line">    member.setRegDate(<span class="string">"20200110"</span>);</span><br><span class="line"></span><br><span class="line">    em.persist(member);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래와 같이 상속받은 슈퍼 클래스의 값이 잘 입력된것을 확인 !</p><p><img src="https://user-images.githubusercontent.com/28856435/75888907-6cebe080-5e6f-11ea-9e33-17dc4321d674.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@MappedSuperclass 공통 속성을 모아두는 클래스.&lt;br&gt;공통 객체에서 상속받아 공통 속성들을 사용한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ JPA" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-JPA/"/>
    
    
      <category term="jpa" scheme="http://yoursite.com/tags/jpa/"/>
    
  </entry>
  
</feed>
