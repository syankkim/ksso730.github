<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>동글씨</title>
  
  <subtitle>동글씨의 LOG</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-11-25T08:00:47.031Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Suyan Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring vs Nodejs(express)_차이</title>
    <link href="http://yoursite.com/2021/11/25/Spring-Nodejs-express-%EC%B0%A8%EC%9D%B4/"/>
    <id>http://yoursite.com/2021/11/25/Spring-Nodejs-express-%EC%B0%A8%EC%9D%B4/</id>
    <published>2021-11-25T07:50:14.000Z</published>
    <updated>2021-11-25T08:00:47.031Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;Sping과 Express를 사용해본 후 차이점이 궁금하지 않나요 ?&lt;br&gt;&lt;code&gt;#express&lt;/code&gt; &lt;code&gt;#spring&lt;/code&gt; &lt;code&gt;#nodejs&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Spring" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Spring/"/>
    
    <category term="☁️ NodeJS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Spring/%E2%98%81%EF%B8%8F-NodeJS/"/>
    
    
  </entry>
  
  <entry>
    <title>🍪 NodeJS session/cookie &amp; session store</title>
    <link href="http://yoursite.com/2021/10/04/nodejs_wetube_7_session/"/>
    <id>http://yoursite.com/2021/10/04/nodejs_wetube_7_session/</id>
    <published>2021-10-04T14:08:20.000Z</published>
    <updated>2021-11-04T01:14:49.635Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><blockquote><p>express-session 모듈로부터 브라우저가 백엔드와 상호작용할 때마다 session이 브라우저에 cookie를 전달. backend가 브라우저에 주는 정보.</p></blockquote><ul><li>정해진 규칙이 있어서 클라이언트가 request를 보낼때마다 브라우저에서는 cookie정보를 자동으로 추가하여 요청한다.</li><li>같은 컴퓨터에서도 브라우저마다 다른 session 값을 보인다.</li><li>http?<ul><li><code>statless</code>: 클라이언트의 상태정보를 알 수 없음</li><li><code>connectionless</code>: 브라우저와 bacckend의 connection이 영원하지 않음.</li></ul></li><li>브라우저는 session ID가 포함된 <code>cookie</code> 를 가지고 있다.</li></ul><p><img src="https://user-images.githubusercontent.com/28856435/135840108-6e7ef3a1-5a30-4cfc-a30a-c925e75c7fa9.png" alt="image"></p><br><ul><li>session 미들웨어가 서버에 text를 보내는 방법.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">    session(&#123;</span><br><span class="line">        secret: &quot;Hello&quot;,</span><br><span class="line">        resave: true,</span><br><span class="line">        saveUninitialized: true,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><ul><li>server.js 에서 session을 직접 찍어 확인할 수 있다. 우리가 backend에 요청을 보낼 때마다, 즉 새로고침 할 때마다 확인된다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    req.sessionStore.all(<span class="function">(<span class="params">error, sessions</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(sessions);</span><br><span class="line">        next();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28856435/135844113-889988f1-1283-449e-8d6e-199defbfbf73.png" alt="image"></p><br><h2 id="로그인시-세션정보에-User-data-저장"><a href="#로그인시-세션정보에-User-data-저장" class="headerlink" title="로그인시, 세션정보에 User data 저장"></a>로그인시, 세션정보에 User data 저장</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req.session.loggedIn = <span class="literal">true</span>;</span><br><span class="line">req.session.user = user</span><br></pre></td></tr></table></figure><ul><li>session object에서 user data가 찍히는것이 확인된다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /login 200 35.257 ms - 763</span><br><span class="line">[Object: null prototype] &#123;</span><br><span class="line">  _xkMIOUyQfOyn1GqOlhzvoq4AdDT6ry_: &#123;</span><br><span class="line">    cookie: &#123; originalMaxAge: null, expires: null, httpOnly: <span class="literal">true</span>, path: <span class="string">&#x27;/&#x27;</span> &#125;     </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;5lLSTQT-erP7IHsdz2BEtyab7daD7Yhr&#x27;</span>: &#123;</span><br><span class="line">    cookie: &#123; originalMaxAge: null, expires: null, httpOnly: <span class="literal">true</span>, path: <span class="string">&#x27;/&#x27;</span> &#125;     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  _id: new ObjectId(<span class="string">&quot;6156c286d0c358cec3b67416&quot;</span>),</span><br><span class="line">  email: <span class="string">&#x27;suyans730@naver.com &#x27;</span>,</span><br><span class="line">  username: <span class="string">&#x27;sy&#x27;</span>,</span><br><span class="line">  password: <span class="string">&#x27;$2b$05$0AKL1qtzW9MZPPVbYxjiTO7wYZ3I.hxHptUlf2jFq0CS95KMj7QDa&#x27;</span>,        </span><br><span class="line">  name: <span class="string">&#x27;Suyeon Kim&#x27;</span>,</span><br><span class="line">  __v: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>full code of postLogin function </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> postLogin = <span class="keyword">async</span>(req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = req.body;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> User.findOne(&#123; username &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    req.session.loggedIn = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// session에 정보 추가</span></span><br><span class="line">    <span class="built_in">console</span>.log(user);</span><br><span class="line">    req.session.user = user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="req-locals"><a href="#req-locals" class="headerlink" title="req.locals"></a>req.locals</h2><blockquote><p>response객체의 locals를 middleware로 등록해두면, .pug 템플릿 어느곳에서든 저장해두었던 데이터를 가져올 수 있다.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> localsMiddleware = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.locals.loggedIn = <span class="built_in">Boolean</span>(req.session.loggedIn);</span><br><span class="line">    res.locals.loggedInUser = req.session.user;</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Session-Store"><a href="#Session-Store" class="headerlink" title="Session Store"></a>Session Store</h1><blockquote><p>Note: Session data is not saved in the cookie itself, just the session ID. Session data is stored server-side.<br>session ID 외의 세션 데이터는 쿠키에 저장되지 않고, 서버에 저장된다.<br>서버에 저장된 session object를 사용하기 위해서는 session store을 사용해야한다.</p></blockquote><ul><li>npm 에서는 Mongostore를 제공한다. <code>npm i connect-mongo</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MongoStore <span class="keyword">from</span> <span class="string">&quot;connect-mongo&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>session db 생성 확인</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin    0.000GB</span><br><span class="line">config   0.000GB</span><br><span class="line">local    0.000GB</span><br><span class="line">wemovie  0.000GB</span><br><span class="line">wetube   0.000GB</span><br><span class="line">&gt; show collections</span><br><span class="line">sessions</span><br><span class="line">users</span><br><span class="line">videos</span><br></pre></td></tr></table></figure><br><ul><li>로그인 후 sessions collection을 조회하면 데이터가 생성되어 있다.<br>🙌🏼 이제 여러분의 서버를 재시작해도 로그인 세션이 끊어지지 않을것이다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.sessions.find(&#123;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : &quot;1PLHaUy_PkAjVQXNAIBUezbJscN0Awnu&quot;, &quot;expires&quot; : ISODate(&quot;2021-10-18T11:27:43.731Z&quot;), &quot;session&quot; : &quot;</span><br><span class="line">&#123;\&quot;cookie\&quot;:&#123;\&quot;originalMaxAge\&quot;:null,\&quot;expires\&quot;:null,\&quot;httpOnly\&quot;:true,\&quot;path\&quot;:\&quot;/\&quot;&#125;,\&quot;loggedIn\&quot;:true,\&quot;user\&quot;:</span><br><span class="line">&#123;\&quot;_id\&quot;:\&quot;6155d2a24d9be1fa548b0c8b\&quot;,\&quot;email\&quot;:\&quot;suyans730@naver.com \&quot;,\&quot;username\&quot;:\&quot;sy\&quot;,</span><br><span class="line">\&quot;password\&quot;:\&quot;$2b$05$E5D4iGIDc6OQov19Zs9uVuLas0jlmGOhSbyWfcHICEjTaf6fKM/A.\&quot;,\&quot;name\&quot;:\&quot;Suyeon Kim\&quot;,\&quot;__v\&quot;:0&#125;&#125;&quot; &#125;</span><br></pre></td></tr></table></figure><h2 id="Properties-of-Cookie"><a href="#Properties-of-Cookie" class="headerlink" title="Properties of Cookie"></a>Properties of Cookie</h2><ul><li>secret: cookie에 sign 할 때 사요하는 string. 안전을 위해서 길고 복잡하고 랜덤한 string을 사용하는것이 좋음.</li><li>domain: 브라우저는 도메인에 따라 cookie를 저장한다.</li><li>expires: 세션 만료날짜. maxAge 를 추가해서 사용.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cookie: &#123;</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">20000</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br><ul><li>saveUninitialize</li></ul><blockquote><p>세션이 새로 적용되고 만들어진때 수정된적이 없을 때 saveUninitialize.<br>세션을 수정할 때만 DB를 저장하고 쿠키를 넘겨준다. 즉, 로그인한 사용자에게만 쿠키를 주도록 설정..</p></blockquote><p>브라우저에 접속할 때마다 쿠키를 가져왔다면, 이제는 로그인할 때만 적용이 된다.</p><ul><li>resave, saveUninitialized 옵션을 <code>false</code>로 바꿔준다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">    session(&#123;</span><br><span class="line">        <span class="attr">secret</span>: <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">        <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">saveUninitialized</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">store</span>: MongoStore.create(&#123;<span class="attr">mongoUrl</span>: <span class="string">&quot;mongodb://127.0.0.1:27017/wetube&quot;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;session을 저장하여 로그인하고 sessionStore db 에서 세션을 유지해본다.&lt;br&gt;&lt;code&gt;#session&lt;/code&gt; &lt;code&gt;#cookie&lt;/code&gt; &lt;code&gt;#locals&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ NodeJS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-NodeJS/"/>
    
    
    <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS password 저장과 static function</title>
    <link href="http://yoursite.com/2021/10/04/nodejs_wetube_6_%EB%A1%9C%EA%B7%B8%EC%9D%B8/"/>
    <id>http://yoursite.com/2021/10/04/nodejs_wetube_6_%EB%A1%9C%EA%B7%B8%EC%9D%B8/</id>
    <published>2021-10-04T13:08:20.000Z</published>
    <updated>2021-11-04T01:14:49.634Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="Own-static-function"><a href="#Own-static-function" class="headerlink" title="Own static function"></a>Own static function</h1><ul><li>hashtag 값을 저장할 때 Video.js(model)에 아래와 같이 save하기 전에 실행되는 middleware를 추가했었다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// save 이전의 middleaware</span></span><br><span class="line">videoSchema.pre(<span class="string">&#x27;save&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.hashtags = <span class="built_in">this</span>.hashtags[<span class="number">0</span>].split(<span class="string">&quot;,&quot;</span>).map(<span class="function">(<span class="params">word</span>)=&gt;</span> (word.startwith(<span class="string">&quot;#&quot;</span>)? word:<span class="string">`#<span class="subst">$&#123;word&#125;</span>`</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><ul><li>하지만, save 이외의 query들은 pre middleware를 제공하지 않는다. 그렇기 때문에 따로 <code>static function</code> 을 만들어 사용할 수 있다.</li></ul><blockquote><p>You cannot access the document being updated in pre(‘updateOne’) or pre(‘findOneAndUpdate’) query middleware. If you need to access the document that will be updated, you need to execute an explicit query for the document.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">videoSchema.static(<span class="string">&#x27;formatHashtags&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">hashtags</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hashtags.split(<span class="string">&quot;,&quot;</span>).map(<span class="function">(<span class="params">word</span>)=&gt;</span> (word.startsWith(<span class="string">&quot;#&quot;</span>)? word:<span class="string">`#<span class="subst">$&#123;word&#125;</span>`</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="regex-연산자-operator-사용하기"><a href="#regex-연산자-operator-사용하기" class="headerlink" title="regex 연산자(operator) 사용하기"></a>regex 연산자(operator) 사용하기</h2><p>mongoose 의 연산자를 사용하여 원하는 검색결과를 얻을 수 있다.<br>우리가 사용한 연산자는 regex 이지만, 사이트에 더 많은 방법이 존재한다.</p><ul><li>RegExp: Search with Regular Expression</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> search = <span class="keyword">async</span>(req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// form 에 넘겨준 파라미터를 가지고 온다.</span></span><br><span class="line">    <span class="keyword">const</span> &#123;keyword&#125; = req.query;</span><br><span class="line">    <span class="keyword">let</span> videos= [];</span><br><span class="line">    <span class="keyword">if</span>(keyword)&#123;</span><br><span class="line">        videos = <span class="keyword">await</span> Video.find(&#123;</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">                <span class="attr">$regex</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`<span class="subst">$&#123;keyword&#125;</span>$`</span>, <span class="string">&quot;ig&quot;</span>),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.render(<span class="string">&quot;search&quot;</span>, &#123; <span class="attr">pageTitle</span>: <span class="string">&quot;Search&quot;</span>, videos &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="비밀번호-저장-Hashing"><a href="#비밀번호-저장-Hashing" class="headerlink" title="비밀번호 저장: Hashing"></a>비밀번호 저장: Hashing</h1><h2 id="bcrypt-hash-function"><a href="#bcrypt-hash-function" class="headerlink" title="bcrypt (hash function)"></a>bcrypt (hash function)</h2><ul><li>hash function: rainbow table 공격을 막아준다.</li><li>hash 함수 중 하나인 <code>bcrypt</code> 함수를 이용하여 비밀번호를 DB에 저장 할것이다.</li><li>hash는 <code>deterministic</code> 하기 때문에 동일한 input에 대해서 동일한 output을 갖는다.</li></ul><p>👉🏼 <a href="https://www.npmjs.com/package/bcrypt">npmjs/bcrypt 공식사이트</a><br>공식 사이트에 아래와 같은 내용이 나와있다.</p><blockquote><p>To hash a password:<br>Technique 1 (generate a salt and hash on separate function calls):</p></blockquote><ul><li>Technique 1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bcrypt.genSalt(saltRounds, <span class="function"><span class="keyword">function</span>(<span class="params">err, salt</span>) </span>&#123;</span><br><span class="line">    bcrypt.hash(myPlaintextPassword, salt, <span class="function"><span class="keyword">function</span>(<span class="params">err, hash</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Store hash in your password DB.</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Technique 2 (auto-gen a salt and hash):<br>(saltRounds: 몇번 hash 할것인가?)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bcrypt.hash(myPlaintextPassword, saltRounds, <span class="function"><span class="keyword">function</span>(<span class="params">err, hash</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Store hash in your password DB.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h2 id="Technique-2-auto-gen-a-salt-and-hash-사용"><a href="#Technique-2-auto-gen-a-salt-and-hash-사용" class="headerlink" title="Technique 2 (auto-gen a salt and hash) 사용"></a>Technique 2 (auto-gen a salt and hash) 사용</h2><ul><li>User.js(model)에서 db에 저장되기 이전, 비밀번호 값에 hashing을 적용한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userSchema.pre(<span class="string">&#x27;save&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 비밀번호 hashing</span></span><br><span class="line">    <span class="built_in">this</span>.password = <span class="keyword">await</span> bcrypt.hash(<span class="built_in">this</span>.password, <span class="number">5</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><ul><li>적용 전과 적용 후 db 조회시 비밀번호가 알수없는 hash값으로 저장된다는것을 확인할 수 있다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> db.users.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;615480ae204f405b9d35478a&quot;), &quot;email&quot; : &quot;suyans730@naver.com &quot;, &quot;username&quot; : &quot;sy&quot;, &quot;password&quot; : &quot;1234&quot;, &quot;name&quot; : &quot;Suyeon Kim&quot;, &quot;__v&quot; : 0 &#125;</span><br><span class="line">&gt; db.users.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;615480ae204f405b9d35478a&quot;), &quot;email&quot; : &quot;suyans730@naver.com &quot;, &quot;username&quot; : &quot;sy&quot;, &quot;password&quot; : &quot;1234&quot;, &quot;name&quot; : &quot;Suyeon Kim&quot;, &quot;__v&quot; : 0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6154853ff5a58157c6953ef3&quot;), &quot;email&quot; : &quot;aa@naver.com &quot;, &quot;username&quot; : &quot;ay&quot;, &quot;password&quot; : &quot;$2b$05$EaF71tKmlQBcByXqFFLtBO6wADBkdC/AmlPOGSCbtZO44N8z5GO/u&quot;, &quot;name&quot; : &quot;Amy&quot;, &quot;__v&quot; : 0 &#125;</span><br></pre></td></tr></table></figure><h2 id="로그인에-적용하기"><a href="#로그인에-적용하기" class="headerlink" title="로그인에 적용하기"></a>로그인에 적용하기</h2><ul><li>hashing은 one-way이다. 즉, input에서 output은 가능하지만, output으로 input값을 다시 구할 수는 없다.</li><li>그래서 bcrypt는 compare를 제공한다. 이 함수를 사용하여 기존 비밀번호와 같은지 비교할 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ok = <span class="keyword">await</span> bcrypt.compare(password, user.password);</span><br><span class="line">    <span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">            .status(<span class="number">400</span>).render(<span class="string">&quot;login&quot;</span>, &#123;</span><br><span class="line">                <span class="attr">pageTitle</span>: <span class="string">&quot;Login&quot;</span>,</span><br><span class="line">                <span class="attr">errorMessage</span>: <span class="string">&quot;Wrong password&quot;</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;mongoose 를 예시로, callback과 promise 함수를 알아본다.&lt;br&gt;&lt;code&gt;#hashing&lt;/code&gt; &lt;code&gt;#login&lt;/code&gt; &lt;code&gt;#bcrypt&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ NodeJS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-NodeJS/"/>
    
    
    <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>JS callback &amp; promise</title>
    <link href="http://yoursite.com/2021/09/25/nodejs_wetube_5_%EC%BD%9C%EB%B0%B1-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4/"/>
    <id>http://yoursite.com/2021/09/25/nodejs_wetube_5_%EC%BD%9C%EB%B0%B1-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4/</id>
    <published>2021-09-25T13:08:20.000Z</published>
    <updated>2021-11-04T01:14:49.633Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="callback-함수"><a href="#callback-함수" class="headerlink" title="callback 함수"></a>callback 함수</h1><blockquote><p>무언가 발생한 다음 호출되는 function.</p></blockquote><p>javascript에서 해당 함수 수행을 마칠때까지 기다림이 필요함을 말한다.<br>database같이 javascript파일 내에 없는 데이터이기 때문에 처리 시간을 예측할 수 없다는 뜻이다.</p><p>즉, 특정 코드를 가장 마지막에 실행한다.<br>장점은 에러들을 내부에서 바로 불러올 수 있다는 것.</p><ul><li>callback</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> home = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(“Start”);</span><br><span class="line">    Video.find(&#123;&#125;, <span class="function">(<span class="params">error, videos</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(“Finally finished”);</span><br><span class="line">        <span class="keyword">return</span> res.render(<span class="string">&quot;home&quot;</span>, &#123;<span class="attr">pageTitle</span>: <span class="string">&quot;Home&quot;</span>, <span class="attr">videos</span>: []&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(“Finished first”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드에서 <code>find()</code>는 mongoose가 제공하는 Query이다. 이것은 callback 함수이고, database 검색이 끝난 후에 rendering이 시작된다.<br>application을 실행해보면, callback함수 내부의 <code>Finished</code> 메시지가 가장 마지막으로 찍히는것이 확인된다.</p><ul><li>npm run start</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">———————————————————————————</span><br><span class="line">Start</span><br><span class="line">I finished first</span><br><span class="line">Finished</span><br><span class="line">GET / 304 146.403 ms - -</span><br><span class="line">———————————————————————————</span><br></pre></td></tr></table></figure><h1 id="promise-함수"><a href="#promise-함수" class="headerlink" title="promise 함수"></a>promise 함수</h1><blockquote><p>async/await<br>callback 함수의 최신 버전이라고 할 수 있다. (es8)</p></blockquote><p><code>await</code>는 javascript가 작업을 <code>기다려준다는 의미이다.</code><br>async와 await는 callback과 달리 <code>직관적</code>이라는 장점이 있다.<br>반면에 callback은 callback 함수 내부에서 결과값을 수행하기 때문에, callback 함수 내부의 callback 함수, callback 함수 내부의 callback 함수 .. 이렇게 코드가 깊어져, 가독성이 떨어지게 된다.</p><ul><li>promise</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> home = <span class="keyword">async</span>(req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> videos = <span class="keyword">await</span> Video.find(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> res.render(<span class="string">&quot;home&quot;</span>, &#123;<span class="attr">pageTitle</span>: <span class="string">&quot;Home&quot;</span>, <span class="attr">videos</span>: []&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;mongoose 를 예시로, callback과 promise 함수를 알아본다.&lt;br&gt;&lt;code&gt;#callback&lt;/code&gt; &lt;code&gt;#promise&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ NodeJS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-NodeJS/"/>
    
    
    <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS with Pug 🐶</title>
    <link href="http://yoursite.com/2021/09/20/nodejs_wetube_4_pug/"/>
    <id>http://yoursite.com/2021/09/20/nodejs_wetube_4_pug/</id>
    <published>2021-09-20T12:54:11.000Z</published>
    <updated>2021-11-04T01:14:49.632Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="PUG-란"><a href="#PUG-란" class="headerlink" title="PUG 란?"></a>PUG 란?</h1><p><strong>Templete Engine: PUG</strong></p><ul><li>기본적으로 현재 작업 디렉토리(cwd) 에서 <code>/views</code> 디렉토리를 찾는다.</li></ul><p><strong>현재 작업 디렉토리(cwd)?</strong></p><ul><li>노드를 시작하는 디렉토리. 현재의 경우에는 <code>/wetube</code></li><li><code>process.cwd()</code> : 현재 작업 디렉토리를 찾고, express가 pug의 views 디렉토리를 찾도록 해준다.</li></ul><ul><li>아래와 같이 src 하위의 views 디렉토리를 찾도록 세팅.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;pug&quot;</span>);</span><br><span class="line">app.set(<span class="string">&quot;views&quot;</span>, process.cwd() + <span class="string">&quot;/src/views&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Partials"><a href="#Partials" class="headerlink" title="Partials"></a>Partials</h2><p>HTML의 head나 header 또는 footer는 분리된 .pug파일로 함수화 할 수 있다.<br>partials 디렉토리 하위에 공통적으로 사용할 element를 정의하고, <code>include</code>하여 사용한다.</p><ul><li>footer.pug를 공통적으로 사용할 포맷으로 만들고.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">footer &amp;copy; #&#123;new Date().getFullYear()&#125; PugTemplete.</span><br></pre></td></tr></table></figure><ul><li>layout.pug 에 아래와 같이 include 하여 사용한다. footer.pug에 정의된 내용이 그대로 적용되는걸 볼 수 있다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang=&quot;ko&quot;)</span><br><span class="line">    head</span><br><span class="line">        title PugTemplete</span><br><span class="line">    body</span><br><span class="line">        header</span><br><span class="line">            h1 Welcome !</span><br><span class="line">    include partials/footer.pug</span><br></pre></td></tr></table></figure><h2 id="form-사용-GET-POST-title-수정하기"><a href="#form-사용-GET-POST-title-수정하기" class="headerlink" title="form 사용 GET/POST: title 수정하기"></a>form 사용 GET/POST: title 수정하기</h2><ul><li>edit.pug<ul><li><code>GET</code>: form의 default method</li><li><code>POST</code>: database를 바꾸거나 file을 바꿀때, 로그인할 때 사용한다.</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">extends base.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">    h4 Change Title of video</span><br><span class="line">    form(action=&quot;save-chages&quot;)</span><br><span class="line">        input(name=&quot;title&quot;, placeholder=&quot;Video Title&quot;, value=video.title)</span><br><span class="line">        input(value=&quot;Save&quot;, type=&quot;submit&quot;)</span><br></pre></td></tr></table></figure><p>위와 같은 코드에서 Save를 클릭하면, url은 <code>/videos/1/save-chages?title=First+Video</code> 이렇다. 즉 GET으로 데이터를 가져온다.</p><p>POST 방식을 사용하기 위해서, router에 post method를 추가한다.</p><ul><li>videoRouter.js : get 하위에 추가된 post</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">videoRouter.get(<span class="string">&quot;/:id(\\d+)/edit&quot;</span>, getEdit);</span><br><span class="line">videoRouter.post(<span class="string">&quot;/:id(\\d+)/edit&quot;</span>, postEdit);</span><br></pre></td></tr></table></figure><ul><li>위 코드의 get/post 는 <code>route</code>로 대체할 수 있다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">videoRouter.route(&quot;/:id(\\d+)/editz&quot;).get(getEdit).post(postEdit);</span><br></pre></td></tr></table></figure><br><ul><li>videoController.js<ul><li>postEdit: Save 수행시, 해당 비디오페이지로 이동 <code>redirect</code></li><li>동적 객체인 <code>videos</code> 를 정의해 두었다.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getEdit = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;id&#125; = req.params;</span><br><span class="line">    <span class="keyword">const</span> video = videos[id-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> res.render(<span class="string">&quot;edit&quot;</span>, &#123;<span class="attr">pageTitle</span>: <span class="string">`Editing: <span class="subst">$&#123;video.title&#125;</span>`</span>, video&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> postEdit = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;id&#125; = req.params;</span><br><span class="line">    <span class="built_in">console</span>.log(req.body);</span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">`/videos/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> videos = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;First Video&quot;</span>,</span><br><span class="line">        <span class="attr">rating</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">comment</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">createdAt</span>: <span class="string">&quot;2 minutes ago&quot;</span>,</span><br><span class="line">        <span class="attr">views</span>: <span class="number">14</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;Second Video&quot;</span>,</span><br><span class="line">        <span class="attr">rating</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">comment</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="attr">createdAt</span>: <span class="string">&quot;21 minutes ago&quot;</span>,</span><br><span class="line">        <span class="attr">views</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;Third Video&quot;</span>,</span><br><span class="line">        <span class="attr">rating</span>: <span class="number">52</span>,</span><br><span class="line">        <span class="attr">comment</span>: <span class="number">44</span>,</span><br><span class="line">        <span class="attr">createdAt</span>: <span class="string">&quot;52 minutes ago&quot;</span>,</span><br><span class="line">        <span class="attr">views</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>postEdit 함수에서 찍은 console log의 결과는 <code>undefined</code> 이다. form의 데이터를 받지 못하고 있는것.</p><h3 id="express-urlencoded"><a href="#express-urlencoded" class="headerlink" title="express.urlencoded()"></a>express.urlencoded()</h3><p>그래서, HTML form의 value들을 이해하여 javascript object 형식으로 데이터를 받기위해 express의 <code>urlencoded</code> 를 사용한다.</p><ul><li>server.js: router들의 상위에 middleware로서 등록.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;));</span><br><span class="line">app.use(<span class="string">&quot;/&quot;</span>, globalRouter);</span><br><span class="line">app.use(<span class="string">&quot;/users&quot;</span>, userRouter);</span><br><span class="line">app.use(<span class="string">&quot;/videos&quot;</span>, videoRouter);</span><br></pre></td></tr></table></figure><br><ul><li>title을 수정하면 아래와 같이 console.log에 남는다. 우리가 input의 name을 title이라고 지었기 때문에. 모든 input에는 name을 넣어주는것이 좋다.</li></ul><img width="999" alt="스크린샷 2021-09-22 오후 9 48 34" src="https://user-images.githubusercontent.com/28856435/134346430-c34e421e-de90-4761-8ea8-b55667b873d9.png"><br><ul><li>console</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; title: <span class="string">&#x27;Edit this video&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><br><p>즉 title객체를 이용하여, postEdit 함수에서 title을 원래의 값과 바꿔줄 수 있다는 말이다.</p><ul><li>videoController.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> postEdit = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;id&#125; = req.params;</span><br><span class="line">    <span class="keyword">const</span> &#123;title&#125; = req.body;</span><br><span class="line">    videos[id-<span class="number">1</span>].title = title;</span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">`/videos/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><hr><br><p>그 결과, 아래처럼 Secode Video -&gt; Edit this video 로 데이터가 수정되어 반영된것을 확인할 수 있다.</p><br><img width="1001" alt="스크린샷 2021-09-22 오후 9 50 10" src="https://user-images.githubusercontent.com/28856435/134346790-c088f49f-297a-49cb-bc7d-56a9b59ee164.png"><br><img width="979" alt="스크린샷 2021-09-22 오후 9 50 38" src="https://user-images.githubusercontent.com/28856435/134346979-942a399d-7f3e-4608-8615-ffadba2456e0.png">]]></content>
    
    
    <summary type="html">&lt;p&gt;PUG 템플릿 엔진을 이용해, html을 작성하고,&lt;br&gt;express 활용한 데이터 수정까지.&lt;br&gt;&lt;code&gt;#pug&lt;/code&gt; &lt;code&gt;#urlencoded&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ NodeJS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-NodeJS/"/>
    
    
    <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
    <category term="pug" scheme="http://yoursite.com/tags/pug/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS - Router</title>
    <link href="http://yoursite.com/2021/09/15/nodejs_wetube_3_router/"/>
    <id>http://yoursite.com/2021/09/15/nodejs_wetube_3_router/</id>
    <published>2021-09-15T13:23:47.000Z</published>
    <updated>2021-11-04T01:14:49.631Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="Routers"><a href="#Routers" class="headerlink" title="Routers ?"></a>Routers ?</h1><blockquote><p>url을 공통 모듈로 그룹화 하여 명시할 수 있다.</p></blockquote><h2 id="Router-생성-amp-사용"><a href="#Router-생성-amp-사용" class="headerlink" title="Router 생성 &amp; 사용"></a>Router 생성 &amp; 사용</h2><ul><li>각 Router는 그 하위의 get 요청으로 불리는 url을 포함하는 그룹 역할을 하는것을 볼 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Router 생성</span></span><br><span class="line"><span class="keyword">const</span> globalRouter = express.Router();</span><br><span class="line"><span class="keyword">const</span> userRouter = express.Router();</span><br><span class="line"><span class="keyword">const</span> videoRouter = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Router 사용</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// url : &quot;/&quot;</span></span><br><span class="line">app.use(<span class="string">&quot;/&quot;</span>, globalRouter);</span><br><span class="line"><span class="keyword">const</span> handleHome = <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.send(<span class="string">&quot;Home&quot;</span>);</span><br><span class="line">globalRouter.get(<span class="string">&quot;/&quot;</span>, handleHome);</span><br><span class="line"></span><br><span class="line"><span class="comment">// url : &quot;/users/edit&quot;</span></span><br><span class="line">app.use(<span class="string">&quot;/users&quot;</span>, userRouter);</span><br><span class="line"><span class="keyword">const</span> handleEditUser = <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.send(<span class="string">&quot;Edit User&quot;</span>);</span><br><span class="line">userRouter.get(<span class="string">&quot;/edit&quot;</span>, handleEditUser);</span><br><span class="line"></span><br><span class="line"><span class="comment">// url : &quot;/videos/watch&quot;</span></span><br><span class="line">app.use(<span class="string">&quot;/videos&quot;</span>, videoRouter);</span><br><span class="line"><span class="keyword">const</span> handleWatchVideo = <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.send(<span class="string">&quot;Watch Video&quot;</span>);</span><br><span class="line">videoRouter.get(<span class="string">&quot;/watch&quot;</span>, handleWatchVideo);</span><br></pre></td></tr></table></figure><h2 id="정리된-Router-모듈"><a href="#정리된-Router-모듈" class="headerlink" title="정리된 Router 모듈"></a>정리된 Router 모듈</h2><ol><li>위에서 생성했던 3개의 Router를 독립적인 모듈로 분리해준다.</li><li><code>export</code> 를 이용해, 다른 모듈에서 <code>import</code> 가능하다.</li></ol><ul><li>router 폴더 내에 각 Router 모듈 생성</li></ul><img width="253" alt="스크린샷 2021-09-16 오전 12 10 49" src="https://user-images.githubusercontent.com/28856435/133460281-299b2201-1e24-4c5d-abfe-79d81820ba04.png"><br><ul><li>아래와 같이 각 router를 <code>export</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> userRouter = express.Router();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> userRouter;</span><br></pre></td></tr></table></figure><ul><li>server.js 에서 각 router 를 <code>import</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> globalRouter <span class="keyword">from</span> <span class="string">&quot;./routers/globalRouter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> videoRouter <span class="keyword">from</span> <span class="string">&quot;./routers/videoRouter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> userRouter <span class="keyword">from</span> <span class="string">&quot;./routers/userRouter&quot;</span>;</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&quot;/&quot;</span>, globalRouter);</span><br><span class="line">app.use(<span class="string">&quot;/users&quot;</span>, userRouter);</span><br><span class="line">app.use(<span class="string">&quot;/videos&quot;</span>, videoRouter);</span><br></pre></td></tr></table></figure><h2 id="Controller와-Router-변수-사용"><a href="#Controller와-Router-변수-사용" class="headerlink" title="Controller와 Router 변수 사용"></a>Controller와 Router 변수 사용</h2><ul><li>handleHome, handleEditUser, handleWatchVideo 등의 handler 메서드는 controller 모듈로 분리한다.</li><li>url로부터 전달받은 파라미터는 router에서 controller의 <code>req</code> 객체로 전달되어 <code>res</code> 객체에서 확인 가능하다.</li></ul><br><ul><li>UserRouter.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;see&#125; <span class="keyword">from</span> <span class="string">&quot;../contorllers/userController&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:4001/users/5</span></span><br><span class="line"><span class="keyword">const</span> userRouter = express.Router();</span><br><span class="line">userRouter.get(<span class="string">&quot;/:id&quot;</span>, see)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> userRouter;</span><br></pre></td></tr></table></figure><ul><li>UserController.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> see = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">`Hello #<span class="subst">$&#123;req.params.id&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><ul><li><em>localhost:4001/users/12</em> 요청 결과이다.</li></ul><img width="600" alt="스크린샷 2021-09-20 오후 9 48 45" src="https://user-images.githubusercontent.com/28856435/134004924-6aba058e-ec18-47fd-bddf-68a0197a089c.png"><h3 id="request-순서"><a href="#request-순서" class="headerlink" title="request 순서"></a>request 순서</h3><ul><li>upload 를 2번째로 내리면, request는 가장 위에서부터 요청을 처리하기 때문에 express는 <code>upload</code>가 <code>id</code>라고 인식한다.</li><li>하지만 가장 상단으로 올려주면 정상적으로 작동한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">videoRouter.get(<span class="string">&quot;/upload&quot;</span>, upload);</span><br><span class="line">videoRouter.get(<span class="string">&quot;/:id&quot;</span>, see);</span><br><span class="line">videoRouter.get(<span class="string">&quot;/:id/edit&quot;</span>, edit);</span><br><span class="line">videoRouter.get(<span class="string">&quot;/:id/delete&quot;</span>, deleteVideo);</span><br></pre></td></tr></table></figure><h3 id="정규식으로-원하는-변수만"><a href="#정규식으로-원하는-변수만" class="headerlink" title="정규식으로 원하는 변수만"></a>정규식으로 원하는 변수만</h3><ul><li>정규식을 사용하여 id 에 숫자만 허용할 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">videoRouter.get(<span class="string">&quot;/:id(\\d+)&quot;</span>, see);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;express의  Router를 사용하여 모듈화 하기.&lt;br&gt;&lt;code&gt;#express&lt;/code&gt; &lt;code&gt;#reouter&lt;/code&gt; &lt;code&gt;#controller&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ NodeJS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-NodeJS/"/>
    
    
    <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
    <category term="express" scheme="http://yoursite.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS - middleware (feat.morgan)</title>
    <link href="http://yoursite.com/2021/09/10/nodejs_wetube_2/"/>
    <id>http://yoursite.com/2021/09/10/nodejs_wetube_2/</id>
    <published>2021-09-10T07:42:47.000Z</published>
    <updated>2021-11-04T01:14:49.630Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="middleware"><a href="#middleware" class="headerlink" title="middleware ?"></a>middleware ?</h1><blockquote><p>작업을 다음 함수에게 넘기는 함수.<br>const handleEvnt = (req, res, next) =&gt; { next(); };</p></blockquote><ul><li>모든 controller는 middleware가 될 수 있고, 모든 middleware는 middleware가 될 수 있다.</li><li>연결이 중단되면 middleware가 아니다.</li><li><code>next()</code> 함수를 사용하면 다음 get method 가 작동된다.</li><li>어떤 조건에 따라 <code>send() 혹은 next()</code> 를 호출 할 수 있다.</li><li><code>app.use()</code> 를 사용한다.</li></ul><ul><li>get() 요청 시, middleware 실행</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> middlewr = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;middle here&quot;</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleEvnt = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;handleEvnt here&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res.send(<span class="string">&quot;&lt;h1&gt;ByeBye&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, middlewr, handleEvnt);</span><br></pre></td></tr></table></figure><ul><li>실행결과</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">✅ Server listening on port http://localhost:4001</span><br><span class="line">middle here</span><br><span class="line">handleEvnt here</span><br></pre></td></tr></table></figure><h2 id="모든-route에-적용"><a href="#모든-route에-적용" class="headerlink" title="모든 route에 적용"></a>모든 route에 적용</h2><blockquote><p>middleware 를 가장 상위에 두면 어떤 url을 접속해도 선행된다.</p></blockquote><ul><li>request method 와 url을 찍는 logger 라는 middleware 를 생성</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger middleware</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// middleware</span></span><br><span class="line">app.use(logger)</span><br><span class="line"><span class="comment">// Home</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, handleEvnt);</span><br></pre></td></tr></table></figure><br><ul><li>실행결과</li></ul><img width="712" alt="스크린샷 2021-09-12 오후 7 17 09" src="https://user-images.githubusercontent.com/28856435/132984228-4a8fb556-e06c-45a9-adce-9f4ef3fa394e.png"><br><br><ul><li>root가 아닌 다른 페이지를 호출해도, middleware가 수행됨을 확인</li></ul><img width="698" alt="스크린샷 2021-09-12 오후 7 08 31" src="https://user-images.githubusercontent.com/28856435/132984190-b76d253f-ecf2-4d7a-9278-02bb40a3a67e.png"><h2 id="특정-url을-확인하는-middleware"><a href="#특정-url을-확인하는-middleware" class="headerlink" title="특정 url을 확인하는 middleware"></a>특정 url을 확인하는 middleware</h2><blockquote><p>어떤 조건에 따라 send() 혹은 next() 를 호출 할 수 있다.</p></blockquote><ul><li>url이 <code>/protected</code> 라면, 허용하지 않는다는 메시지를 <code>send</code> 한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger middleware</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// private middleware</span></span><br><span class="line"><span class="keyword">const</span> privateMiddlewr = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = req.url;</span><br><span class="line">    <span class="keyword">if</span>(url===<span class="string">&quot;/protected&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(<span class="string">&quot;&lt;h1&gt;Not Allowed&lt;/h1&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;allowed, you may continue.&quot;</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleEvnt = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;handleEvnt here&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res.send(<span class="string">&quot;&lt;h1&gt;Home&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleProtected = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.send(<span class="string">&quot;This site is private.&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use 에 넣은 middleware는 get 요청 이전에 수행된다.</span></span><br><span class="line">app.use(logger)</span><br><span class="line">app.use(privateMiddlewr);</span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, handleEvnt);</span><br><span class="line">app.get(<span class="string">&quot;/protected&quot;</span>, handleProtected);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img width="702" alt="스크린샷 2021-09-12 오후 7 18 27" src="https://user-images.githubusercontent.com/28856435/132984243-2d717221-025c-4f98-a043-65cb2029fb85.png"><br><h1 id="morgan"><a href="#morgan" class="headerlink" title="morgan"></a>morgan</h1><blockquote><p>node.js용 request logger middleware 이다.<br>설치하고 사용해보자. <code>npm i morgan</code></p></blockquote><ul><li>이전 코드에 logger로 만들었던 middleware 대신에 <code>margan</code> 을 사용한 logger를 추가해준다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> margan <span class="keyword">from</span> <span class="string">&quot;morgan&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = morgan(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">app.use(logger);</span><br></pre></td></tr></table></figure><br><ul><li>morgan 은 GET, path, status code 모든 정보를 가지고 있다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">✅ Server listening on port http://localhost:4001</span><br><span class="line">allowed, you may <span class="built_in">continue</span>.</span><br><span class="line">handleEvnt here</span><br><span class="line">GET / 200 4.390 ms - 13</span><br><span class="line">allowed, you may <span class="built_in">continue</span>.</span><br><span class="line">GET /favicon.ico 404 2.161 ms - 150</span><br><span class="line">GET /protected 304 0.395 ms - -</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;express의 다양한 application을 사용한 서버와 통신, middleware&lt;br&gt;&lt;code&gt;#express&lt;/code&gt; &lt;code&gt;#request&lt;/code&gt; &lt;code&gt;#middleware&lt;/code&gt; &lt;code&gt;#next()&lt;/code&gt; &lt;code&gt;#morgan&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ NodeJS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-NodeJS/"/>
    
    
    <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
    <category term="express" scheme="http://yoursite.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS란? 프로젝트 시작.</title>
    <link href="http://yoursite.com/2021/09/09/nodejs_wetube_1/"/>
    <id>http://yoursite.com/2021/09/09/nodejs_wetube_1/</id>
    <published>2021-09-09T05:42:47.000Z</published>
    <updated>2021-09-10T07:31:21.460Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="JavaScript-is-FREE"><a href="#JavaScript-is-FREE" class="headerlink" title="JavaScript is FREE"></a>JavaScript is FREE</h1><blockquote><p>📌 NodeJS?? 브라우저 밖에서 돌아가는 자바스크립트<br><code>History</code></p><ul><li>자바스크립트는 브라우저에서만 사용되었다.<ul><li>브라우저를 가진 모든 컴퓨터는 자바스크립트가 설치되어 있다.</li><li>창시자인 Ryan이 자바스크립트를 브라우저에 분리하여 NodeJS를 만든것이다.</li></ul></li><li>즉, JS를 다른 프로그래밍 언어처럼 사용할 수 있게 되었다.<ul><li>예를 들면, console.log() 를 브라우저에서만 확인할 수 있었지만, nodeJS 를 설치했다면 터미널에서도 console.log() 가능!!</li></ul></li></ul></blockquote><h1 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h1><blockquote><p>NodeJS Package Manager</p></blockquote><ul><li>nodeJS와 같이 설치된다.</li><li>누군가 이미 만들어 놓은 패키지를 가져다 쓰고, 개발을 쉽게 할 수 있다.<ul><li>그 중 하나가 express이다. 오래된만큼 안정적인 패키지이다.</li><li><code>npm i express</code></li></ul></li></ul><h1 id="NodeJS-프로젝트-생성"><a href="#NodeJS-프로젝트-생성" class="headerlink" title="NodeJS 프로젝트 생성"></a>NodeJS 프로젝트 생성</h1><p>기본적이 프로젝트를 진행하기 위해서 아래와 같은 순서로 환경을 구축한다.</p><ol><li>프로젝트 디렉토리 생성</li><li>git repository와 연동</li><li>express 설치</li><li>babel 설치, 관련 패키지 설치</li></ol><h2 id="프로젝트-디렉토리-생성"><a href="#프로젝트-디렉토리-생성" class="headerlink" title="프로젝트 디렉토리 생성"></a>프로젝트 디렉토리 생성</h2><ul><li>프로젝트를 시작할 빈 디렉토리에서 <code>npm init</code> 이 명령어 한 줄이면 쉽게 생성 가능하다.</li><li>아래와 같은 프로세스대로 질문이 뜨고 질문에 답하면 package.json 파일이 생성된다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  wetube git:(master) npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm <span class="built_in">help</span> init` <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (wetube) </span><br><span class="line">version: (1.0.0) </span><br><span class="line">description: The best way to watch videos.</span><br><span class="line">entry point: (index.js) </span><br><span class="line"><span class="built_in">test</span> <span class="built_in">command</span>: </span><br><span class="line">git repository: (https://github.com/ksso730/wetube-prj.git) </span><br><span class="line">keywords: </span><br><span class="line">author: Suyn</span><br><span class="line">license: (ISC) </span><br><span class="line">About to write to /Users/mac/Documents/wetube/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;wetube&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;The best way to watch videos.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;git+https://github.com/ksso730/wetube-prj.git&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;Suyn&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;bugs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/ksso730/wetube-prj/issues&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;https://github.com/ksso730/wetube-prj#readme&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Is this OK? (yes) yes</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;wetube&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The best way to watch videos.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;git+https://github.com/ksso730/wetube-prj.git&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">   <span class="attr">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;win&quot;</span>: <span class="string">&quot;node index.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;Suyn&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bugs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/ksso730/wetube-prj/issues&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span>: <span class="string">&quot;https://github.com/ksso730/wetube-prj#readme&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>main</code> 은 다른 사람들이 우리가 만들고 배포한 패키지를 설치하면 main을 사용할 수 있다.<ul><li>프로젝트에서 필요 없다면 지워준다.</li></ul></li><li><code>script</code> 에 사용할 명령어를 정의하고 아래와 같이 사용할 수 있다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  wetube git:(master) ✗ npm run win</span><br><span class="line"></span><br><span class="line">&gt; wetube@1.0.0 win /Users/mac/Documents/wetube</span><br><span class="line">&gt; node index.js</span><br><span class="line"></span><br><span class="line">hello node</span><br></pre></td></tr></table></figure><h2 id="Express-설치"><a href="#Express-설치" class="headerlink" title="Express 설치"></a>Express 설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  wetube git:(master) ✗ npm i express</span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">+ express@4.17.1</span><br><span class="line">added 50 packages from 37 contributors and audited 50 packages <span class="keyword">in</span> 2.245s</span><br></pre></td></tr></table></figure><ul><li><strong>package-lock</strong><ul><li>패키지를 안전하게 관리해주며, 수정여부를 해시값으로 체크해준다. </li></ul></li><li><strong>node_modules</strong><ul><li>npm으로 설치한 모든 패키지가 저장된다.</li></ul></li><li><strong>package.json</strong> 에 dependencies가 추가 된다.<ul><li>이렇게 dependencies에 추가된 패키지들은 node_modules폴더가 삭제되더라도 <code>npm install</code> 만 실행해주면 다시 생성된다.</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;^4.17.1&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Babel-설치-관련-패키지-설치"><a href="#Babel-설치-관련-패키지-설치" class="headerlink" title="Babel 설치, 관련 패키지 설치"></a>Babel 설치, 관련 패키지 설치</h2><blockquote><p>📌 Babel is JavaScript compiler</p></blockquote><ul><li>아직 nodeJS가 이해하지 못하는 코드가 있다. babel은 우리가 작성한 최신 자바스크립트를 컴파일 해준다. 최신 문법으로 작성하기 위해 <code>개발자용</code>으로 설치한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/core</span><br></pre></td></tr></table></figure><br><ul><li>package.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.15.5&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>dependencies</strong> : 프로젝트를 실행하기 위해 필요한 것.<br><strong>devDependencies</strong> : 개발자를 위해 필요한 것.</p></blockquote><h3 id="Babel연동-babel-config-json-생성"><a href="#Babel연동-babel-config-json-생성" class="headerlink" title="Babel연동 (babel.config.json 생성)"></a>Babel연동 (babel.config.json 생성)</h3><ul><li>preset-env 를 사용한다.</li><li>preset: babel을 위한 거대한 <strong>플러그인</strong><ul><li>“preset-env” is a smart preset that allows you to use the latest JavaScript without needing to~”</li></ul></li></ul><ul><li>babel.config.json에 아래와 같이 추가해준다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>:[<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>babel을 사용하기 위해 다음 패키지 설치<br><code>npm i @babel/preset-env --save-dev</code><br><code>npm i @babel/node --save-dev</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.15.5&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;@babel/node&quot;</span>: <span class="string">&quot;^7.15.4&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.15.4&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="Babel의-nodemon"><a href="#Babel의-nodemon" class="headerlink" title="Babel의 nodemon"></a>Babel의 nodemon</h3><blockquote><p>📌 파일 수정을 감시해주는 패키지로, 파일이 수정되면 nodemon이 자동으로 재실행해준다.<br>(관련 패키지는 @babel/node”)</p></blockquote><ul><li><code>npm run dev</code> 수행을 위한 명령</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;dev&quot;: &quot;nodemon --exec babel-node index.js&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>아래처럼 메시지를 바꿔서 저장할때마다 새로 수행된다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; nodemon --<span class="built_in">exec</span> babel-node index.js</span><br><span class="line"></span><br><span class="line">[nodemon] 2.0.12</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching path(s): *.*</span><br><span class="line">[nodemon] watching extensions: js,mjs,json</span><br><span class="line">[nodemon] starting `babel-node index.js`</span><br><span class="line">hi!</span><br><span class="line">[nodemon] clean <span class="built_in">exit</span> - waiting <span class="keyword">for</span> changes before restart</span><br><span class="line">[nodemon] restarting due to changes...</span><br><span class="line">[nodemon] starting `babel-node index.js`</span><br><span class="line">how are you?</span><br><span class="line">[nodemon] clean <span class="built_in">exit</span> - waiting <span class="keyword">for</span> changes before restart</span><br><span class="line">[nodemon] restarting due to changes...</span><br><span class="line">[nodemon] starting `babel-node index.js`</span><br><span class="line">I<span class="string">&#x27;m good!</span></span><br><span class="line"><span class="string">[nodemon] clean exit - waiting for changes before restart</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;빈 파일부터 시작하는 NodeJS 프로젝트 첫 단추 끼우기.&lt;br&gt;babel로 최신 JavaScript를 사용하자.&lt;br&gt;&lt;code&gt;#express&lt;/code&gt; &lt;code&gt;#nodemon&lt;/code&gt; &lt;code&gt;#babel&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ NodeJS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-NodeJS/"/>
    
    
    <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
    <category term="babel" scheme="http://yoursite.com/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>🌳 알고리즘 - 트리 구조</title>
    <link href="http://yoursite.com/2021/08/18/%ED%8A%B8%EB%A6%AC%EA%B5%AC%EC%A1%B01/"/>
    <id>http://yoursite.com/2021/08/18/%ED%8A%B8%EB%A6%AC%EA%B5%AC%EC%A1%B01/</id>
    <published>2021-08-18T07:23:23.000Z</published>
    <updated>2021-09-10T02:14:11.686Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="트리-구조"><a href="#트리-구조" class="headerlink" title="트리 구조"></a>트리 구조</h1><blockquote><ul><li>Node 와 Branch 를 이용해서 사이클을 이루지 않도록 구성된 데이터 구조</li><li>트리 중 <code>이진트리</code>(Binary Search Tree) 형태의 구조로, <code>탐색(검색) 알고리즘 구현</code>을 위해 많이 사용된다.</li></ul></blockquote><h2 id="용어"><a href="#용어" class="headerlink" title="용어"></a>용어</h2><ul><li><strong>Node</strong> : 트리에서 데이터를 저장하는 기본 요소 (데이터와 다른 연결된 Branch 정보 포함)</li><li><strong>Root Node</strong> : 트리의 맨 위에 있는 노드</li><li><strong>Level</strong> : 최상위 노드를 Level 0으로 하였을 때, 하위  Branch 로 연결된 노드의 깊이</li><li><strong>Parent Node</strong> : 어떤 노드의 다음 레벨에 연결된 노드</li><li><strong>Child Node</strong> : 어떤 노드의 상위 레벨에 연결된 노드</li><li><strong>Leaf Node (Terminal Node)</strong> : Child Node가 하나도 없는 노드</li><li><strong>Sibling (Brother Node)</strong> : 동일한 Parent Node를 가진 노드</li><li><strong>Depth</strong> : 트리에서 Node가 가질 수 있는 최대 Level</li></ul><h2 id="이진-트리-VS-이진-탐색-트리"><a href="#이진-트리-VS-이진-탐색-트리" class="headerlink" title="이진 트리 VS 이진 탐색 트리"></a>이진 트리 VS 이진 탐색 트리</h2><ul><li>이진 트리<ul><li>노드의 <code>최대 Branch가 2</code>인 트리</li></ul></li><li>이진 탐색 트리(BST): 이진 트리에서 추가적인 조건이 있음.<ul><li>왼쪽 노드는 작은 값, 오른쪽 노드는 큰 값을 저장한다.</li></ul></li></ul><h2 id="이진-탐색-트리의-주요-용도"><a href="#이진-탐색-트리의-주요-용도" class="headerlink" title="이진 탐색 트리의 주요 용도"></a>이진 탐색 트리의 주요 용도</h2><ul><li>주요 용도: 데이터 <code>검색</code>(탐색)</li><li><code>탐색 속도를 개선</code>할 수 있는 장점이 있다.</li></ul><hr><h1 id="이진-탐색-트리-구현"><a href="#이진-탐색-트리-구현" class="headerlink" title="이진 탐색 트리 구현"></a>이진 탐색 트리 구현</h1><h2 id="이진-탐색-트리를-위한-링크드리스트-구현"><a href="#이진-탐색-트리를-위한-링크드리스트-구현" class="headerlink" title="이진 탐색 트리를 위한 링크드리스트 구현"></a>이진 탐색 트리를 위한 링크드리스트 구현</h2><ul><li>노드에 필요한 데이터 : <code>value</code>, <code>left</code>, <code>right</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeMgt</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        self.head = head</span><br><span class="line"></span><br><span class="line"><span class="comment">## 데이터 입력  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.cur = self.head</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> val &lt; self.cur.val:</span><br><span class="line">                <span class="keyword">if</span> self.cur.left != <span class="literal">None</span>:</span><br><span class="line">                    <span class="comment"># 이미 left branch 가 있다면 계속 순회</span></span><br><span class="line">                    self.cur = self.cur.left</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># left branch 가 없다면 노드 생성</span></span><br><span class="line">                    self.cur.left = Node(val)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> self.cur.right != <span class="literal">None</span>:</span><br><span class="line">                    <span class="comment"># 이미 right branch 가 있다면 계속 순회</span></span><br><span class="line">                    self.cur = self.cur.right</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># right branch 가 없다면 노드 생성</span></span><br><span class="line">                    self.cur.right = Node(val)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 데이터 탐색    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.cur = self.head</span><br><span class="line">        <span class="keyword">while</span> self.cur:</span><br><span class="line">            <span class="keyword">if</span> self.cur.val == val:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;cur: %d = %d !!&#x27;</span> % (self.cur.val, val))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> val &lt; self.cur.val:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;cur: %d &lt; %d&#x27;</span> % (self.cur.val, val))</span><br><span class="line">                self.cur = self.cur.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;cur: %d &gt;= %d&#x27;</span> % (self.cur.val, val))</span><br><span class="line">                self.cur = self.cur.right</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="이진-탐색-트리에-데이터-넣기"><a href="#이진-탐색-트리에-데이터-넣기" class="headerlink" title="이진 탐색 트리에 데이터 넣기"></a>이진 탐색 트리에 데이터 넣기</h2><ul><li>Node <code>head</code> 생성<ul><li>초기값을 확인해 보면, 초기화 함수에 정의한 것을 확인할 수 있다.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">head = Node(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(head)</span><br><span class="line"><span class="built_in">print</span>(head.val)</span><br><span class="line"><span class="built_in">print</span>(head.left)</span><br><span class="line"><span class="built_in">print</span>(head.right)</span><br></pre></td></tr></table></figure><img width="913" alt="스크린샷 2021-08-18 오후 5 28 27" src="https://user-images.githubusercontent.com/28856435/129865156-60ef7638-1370-4141-9cce-f91e56e4bafa.png"><br><ul><li>이진 트리에 데이터 넣기</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bts = NodeMgt(head)</span><br><span class="line">bts.insert(<span class="number">2</span>)</span><br><span class="line">bts.insert(<span class="number">3</span>)</span><br><span class="line">bts.insert(<span class="number">4</span>)</span><br><span class="line">bts.insert(<span class="number">0</span>)</span><br><span class="line">bts.insert(<span class="number">113</span>)</span><br><span class="line">bts.insert(<span class="number">44</span>)</span><br></pre></td></tr></table></figure><br><ul><li>이진 트리에서 특정 데이터 탐색</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># True 있는 값 탐색</span></span><br><span class="line">bts.search(<span class="number">44</span>)</span><br><span class="line"><span class="comment"># False 없는 값 탐색</span></span><br><span class="line">bts.search(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><br><ul><li>트리를 순회하면서 현재값보다 작으면 왼쪽으로, 크거나 같으면 오른쪽으로 노드를 옮겨가며 특정 데이터를 찾는다.</li></ul><img width="920" alt="스크린샷 2021-08-18 오후 5 28 43" src="https://user-images.githubusercontent.com/28856435/129865254-7092ba9a-7652-4d73-acd7-bbb0ed2ab12a.png"><br><h2 id="이진-탐색-트리-삭제"><a href="#이진-탐색-트리-삭제" class="headerlink" title="이진 탐색 트리 삭제"></a>이진 탐색 트리 삭제</h2><ul><li>총 <code>3가지 경우</code>로 나눠서 삭제하는 함수를 구현할 수 있다.<ol><li>Leaf Node 삭제 : 삭제할 Node 의 Parent Node 가 삭제할 Node 를 가리키지 않도록 한다.</li><li>Child Node 가 하나일 떼 : 삭제할 Node 의 Parent Node 가 삭제할 Node 의 Child Node 를 가리키도록 한다.</li><li>Child Node 가 두 개 일 때<ul><li>삭제할 Node 의 오른쪽 자식 선택</li><li>오른쪽 자식의 가장 왼쪽에 있는 Node를 선택</li><li>해당 Node를 삭제할 Node의 Parent Node의 왼쪽 Branch가 가리키게 한다.</li><li>해당 Node의 왼쪽 Branch가 삭제할 Node의 왼쪽 Child Node를 가리키게 함</li></ul></li></ol></li></ul><h3 id="이진-탐색-트리-삭제-구현"><a href="#이진-탐색-트리-삭제-구현" class="headerlink" title="이진 탐색 트리 삭제 구현"></a>이진 탐색 트리 삭제 구현</h3><h4 id="삭제할-Node-탐색"><a href="#삭제할-Node-탐색" class="headerlink" title="삭제할 Node 탐색"></a>삭제할 Node 탐색</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#def delete(self, val)</span></span><br><span class="line">    </span><br><span class="line">    searhed = <span class="literal">False</span></span><br><span class="line">    self.cur = self.head</span><br><span class="line">    self.parent = self.head</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> self.cur:</span><br><span class="line">        <span class="comment"># 해당 노드를 찾음</span></span><br><span class="line">        <span class="keyword">if</span> self.cur.val == val:</span><br><span class="line">            searched = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 해당 노드가 현재노드보다 작음</span></span><br><span class="line">        <span class="keyword">elif</span> self.cur.val &gt; val:</span><br><span class="line">            self.parent = self.cur</span><br><span class="line">            self.cur = self.cur.left</span><br><span class="line">        <span class="comment"># 해당 노드가 현재노드보다 큼</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.parent = self.cur</span><br><span class="line">            self.cur = self.cur.right</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> searched == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;기본 알고리즘 트리 Tree 구조에 대해 공부한다.&lt;br&gt;&lt;code&gt;#tree&lt;/code&gt; &lt;code&gt;#binary_search_tree&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
    <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
    <category term="tree" scheme="http://yoursite.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>✌️✌️ 해시 테이블.2 - 충돌 해결 알고리즘</title>
    <link href="http://yoursite.com/2021/08/16/%ED%95%B4%EC%89%AC%ED%85%8C%EC%9D%B4%EB%B8%942/"/>
    <id>http://yoursite.com/2021/08/16/%ED%95%B4%EC%89%AC%ED%85%8C%EC%9D%B4%EB%B8%942/</id>
    <published>2021-08-16T01:53:23.000Z</published>
    <updated>2021-09-10T02:14:11.689Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="해시-테이블-2"><a href="#해시-테이블-2" class="headerlink" title="해시 테이블 2"></a>해시 테이블 2</h1><blockquote><p>Hash Table: 키(Key)에 데이터(Value)를 저장하는 데이터 구조</p></blockquote><p><em>기본적인 해시 테이블에 대한 용어정리, 장단점 프로그래밍 실습은 이전 해시 테이블.1 포스팅에서 확인할 수 있다.</em></p><hr><h2 id="충돌-해결-알고리즘-Chaining-기법"><a href="#충돌-해결-알고리즘-Chaining-기법" class="headerlink" title="충돌 해결 알고리즘: Chaining 기법"></a>충돌 해결 알고리즘: Chaining 기법</h2><ul><li>개방 해싱 또는 Open Hashing 기법 중 하나: 해쉬 테이블 저장공간 외의 공간을 활용</li><li>충돌이 일어나면, <code>링크드 리스트</code> 자료구조를 사용하여 추가로 저장</li><li>❗️ 그러나 하나의 해시 주소에서 연결 리스트의 사이즈가 커질 경우, 해시 테이블의 탐색 효율은 떨어질 수 밖에 없다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">hash_table = <span class="built_in">list</span>([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_func</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> key % <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">data, val</span>):</span></span><br><span class="line">    idx = get_key(data)</span><br><span class="line">    addr = hash_func(idx)</span><br><span class="line">    <span class="keyword">if</span> hash_table[addr] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hash_table[addr])):</span><br><span class="line">            <span class="keyword">if</span> hash_table[addr][i][<span class="number">0</span>] == idx:</span><br><span class="line">                hash_table[addr][i][<span class="number">1</span>] = val</span><br><span class="line">                <span class="comment"># hash_table[addr][i][0] =&gt; key</span></span><br><span class="line">                <span class="comment"># hash_table[addr][i][1] =&gt; value</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 링크드 리스트 대신에 python list.append 를 활용</span></span><br><span class="line">        hash_table[addr].append([idx, val])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 해당 공간이 비어 있다면, 새로 (key, value) 입력</span></span><br><span class="line">        hash_table[addr] = [[idx, val]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_val</span>(<span class="params">data</span>):</span></span><br><span class="line">    idx = get_key(data)</span><br><span class="line">    addr = hash_func(idx)</span><br><span class="line">    <span class="keyword">if</span> hash_table[addr] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hash_table[addr])):</span><br><span class="line">            <span class="keyword">if</span> hash_table[addr][i][<span class="number">0</span>] == idx:</span><br><span class="line">                <span class="keyword">return</span> hash_table[addr][i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><br><ul><li> <code>Dd</code> 와 <code>Data</code> 의 key 값이 같기 때문에 아래와 같이 hash_table[2] 위치에 두 쌍의 데이터가 저장되는 것을 확인할 수 있다.</li></ul><img width="820" alt="스크린샷 2021-08-16 오후 11 09 40" src="https://user-images.githubusercontent.com/28856435/129577117-25829302-ffb9-44d1-b9a8-1248657f330f.png" style="border: 1px solid #E3E3E3"><br><h2 id="충돌-해결-알고리즘-Linear-Probing-기법"><a href="#충돌-해결-알고리즘-Linear-Probing-기법" class="headerlink" title="충돌 해결 알고리즘: Linear Probing 기법"></a>충돌 해결 알고리즘: Linear Probing 기법</h2><ul><li>폐쇄 해슁 또는 Close Hashing 기법 중 하나: 해시 테이블 저장공간 안에서 충돌 문제를 해결</li><li>충돌이 일어나면, 해당 해시 주소의 다음 주소부터 공간을 확인하며 빈 공간이 나타날 경우 그 공간에 값을 넣는다.</li><li>❗️ 저장 공간의 활용도를 높일 수 있다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">hash_table = <span class="built_in">list</span>([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_func</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> key % <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">data, val</span>):</span></span><br><span class="line">    idx = get_key(data)</span><br><span class="line">    addr = hash_func(idx)</span><br><span class="line">    <span class="keyword">if</span> hash_table[addr] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(addr, <span class="built_in">len</span>(hash_table)):</span><br><span class="line">            <span class="comment"># 해당 해시 주소에 데이터가 없을 경우</span></span><br><span class="line">            <span class="keyword">if</span> hash_table[i] == <span class="number">0</span>:</span><br><span class="line">                hash_table[i] = [idx, val]</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 해당 해시 주소에 동일한 key 데이터가 있을 경우 업데이트</span></span><br><span class="line">            <span class="keyword">elif</span> hash_table[i][<span class="number">0</span>] == idx:</span><br><span class="line">                hash_table[i][<span class="number">1</span>] = val</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hash_table[addr] = [idx, val]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_val</span>(<span class="params">data</span>):</span></span><br><span class="line">    idx = get_key(data)</span><br><span class="line">    addr = hash_func(idx)</span><br><span class="line">    <span class="keyword">if</span> hash_table[addr] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(addr, hash_table):</span><br><span class="line">            <span class="keyword">if</span> hash_table[i] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">elif</span> hash_table[i][<span class="number">0</span>] == addr:</span><br><span class="line">                <span class="keyword">return</span> hash_table[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><br><ul><li>동일한 주소에 연결 리스트 형태로 저장되었던 Chaning 기법과는 다르게, 해쉬 함수가 동일한 주소를 주어 충돌이 일어날 경우,<br>가장 근접한 빈 공간인 hash_table[3] 위치에 해당 데이터를 넣어준다.</li></ul><img width="883" alt="스크린샷 2021-08-16 오후 11 38 02" src="https://user-images.githubusercontent.com/28856435/129581393-fac5c7a1-68d9-4b07-82d3-ddb8bd93edec.png" style="border: 1px solid #E3E3E3"><br><hr><h2 id="빈번한-충돌을-개선하는-방법"><a href="#빈번한-충돌을-개선하는-방법" class="headerlink" title="빈번한 충돌을 개선하는 방법?"></a>빈번한 충돌을 개선하는 방법?</h2><ul><li>해쉬 함수를 재정의하거나 해쉬 테이블의 저장공간을 2배 정도 확대한다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hash_table = <span class="built_in">list</span>((<span class="literal">None</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_func</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> key % <span class="number">16</span></span><br></pre></td></tr></table></figure><h2 id="해쉬-함수와-키-생성-함수-SHA"><a href="#해쉬-함수와-키-생성-함수-SHA" class="headerlink" title="해쉬 함수와 키 생성 함수: SHA"></a>해쉬 함수와 키 생성 함수: SHA</h2><ul><li>파이썬의 hash() 함수는 실행할 때마다 값이 달라질 수 있음</li><li>유명한 해쉬함수 중 하나 SHA(Secure Hash Algoritm, 안전한 해쉬 알고리즘)<ul><li>어떠한 데이터도 고정된 크기의 고정된 값을 리턴해준다.</li></ul></li></ul><ul><li><strong>SHA-1</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">hash_obj = hashlib.sha1()</span><br><span class="line">hash_obj.update(data.encode())</span><br><span class="line">hex_dig =  hash_obj.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(hex_dig)</span><br></pre></td></tr></table></figure><br><ul><li><strong>SHA-256</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">hash_obj = hashlib.sha256()</span><br><span class="line">hash_obj.update(data.encode())</span><br><span class="line">hex_dig =  hash_obj.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(hex_dig)</span><br></pre></td></tr></table></figure><br><ul><li>SHA-1, SHA-256 테스트</li></ul><img width="917" alt="스크린샷 2021-08-18 오후 3 36 11" src="https://user-images.githubusercontent.com/28856435/129849671-f9848828-5a0e-41f0-888c-65c036d808b3.png"><br><br><ul><li>Chaning 기법에 SHA-256 알고리즘 적용하기<ul><li><code>get_key()</code> 함수만 SHA 알고리즘으로 수정되었다.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">hash_table = <span class="built_in">list</span>([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">data</span>):</span></span><br><span class="line">    hash_obj = hashlib.sha256()</span><br><span class="line">    hash_obj.update(data.encode())</span><br><span class="line">    hex_dig = hash_obj.hexdigest()</span><br><span class="line">    <span class="comment"># 16진수 문자열을 주기 때문에 int 로 변환해 준다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(hex_dig, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_func</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> key % <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">data, val</span>):</span></span><br><span class="line">    idx = get_key(data)</span><br><span class="line">    addr = hash_func(idx)</span><br><span class="line">    <span class="keyword">if</span> hash_table[addr] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hash_table[addr])):</span><br><span class="line">            <span class="keyword">if</span> hash_table[addr][i][<span class="number">0</span>] == idx:</span><br><span class="line">                hash_table[addr][i][<span class="number">1</span>] = val</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        hash_table[addr].append([idx, val])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hash_table[addr] = [[idx, val]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_val</span>(<span class="params">data</span>):</span></span><br><span class="line">    idx = get_key(data)</span><br><span class="line">    addr = hash_func(idx)</span><br><span class="line">    <span class="keyword">if</span> hash_table[addr] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hash_table[addr])):</span><br><span class="line">            <span class="keyword">if</span> hash_table[addr][i][<span class="number">0</span>] == idx:</span><br><span class="line">                <span class="keyword">return</span> hash_table[addr][i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><hr><h2 id="시간-복잡도"><a href="#시간-복잡도" class="headerlink" title="시간 복잡도"></a>시간 복잡도</h2><ul><li>일반적인 경우 (충돌이 없음): O(1)</li><li>최악의 경우 (충돌 발생): O(n)<ul><li>Chaning 기법을 사용 하더라도 링크드리스트를 모두 확인해야 하기 때문에 비효율적일 수 있다.</li></ul></li></ul><blockquote><p>즉, 일반적으로 hash table의 시간복잡도는 <code>O(1)</code> 이다.</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;만약 비이상적인 해시 함수로 인해 충돌이 일어날 경우?&lt;br&gt;Secure Hash Algorithm (SHA)?&lt;br&gt;&lt;code&gt;#hash_collision&lt;/code&gt; &lt;code&gt;#chaining_algorithm&lt;/code&gt; &lt;code&gt;#linear_probing_algorithm&lt;/code&gt; &lt;code&gt;#SHA256&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
    <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
    <category term="hash_table" scheme="http://yoursite.com/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>✌️ 해시 테이블.1</title>
    <link href="http://yoursite.com/2021/08/12/%ED%95%B4%EC%89%AC%ED%85%8C%EC%9D%B4%EB%B8%941/"/>
    <id>http://yoursite.com/2021/08/12/%ED%95%B4%EC%89%AC%ED%85%8C%EC%9D%B4%EB%B8%941/</id>
    <published>2021-08-12T01:53:23.000Z</published>
    <updated>2021-09-10T02:14:11.688Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="해시-테이블"><a href="#해시-테이블" class="headerlink" title="해시 테이블"></a>해시 테이블</h1><blockquote><p>Hash Table: 키(Key)에 데이터(Value)를 저장하는 데이터 구조</p></blockquote><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>Key를 통해 매핑된 데이터를 가져올 수 있기 때문에 속도가 매우 빨라진다.</li><li>파이썬 <code>딕셔너리</code>(Dictionary) 타입이 해시 테이블의 예이다. (따라서 파이썬에서 별도로 해시를 구현할 필요는 없음)</li><li>보통 배열로 사이즈만큼 생성해 둔 후에 사용한다. (공간과 탐색시간을 맞바꿈)</li></ul><h2 id="용어"><a href="#용어" class="headerlink" title="용어"></a>용어</h2><ul><li><strong>해시(Hash)</strong>: 임의 값을 <code>고정 길이</code>로 변환하는 것</li><li><strong>해시 테이블(Hash Table)</strong> : 키 값의 연산에 의에 직접 접근이 가능한 데이터 구조</li><li><strong>해시 함수(Hash Function)</strong>: Key에 대해 산술 연산을 이용해 데이터의 위치를 찾을 수 있는 함수</li><li><strong>해시 값(Hash Value) or 해시 주소(Hash Address)</strong>: Key를 해싱 함수로 연산하여, 해시 값을 알아낸다. 이를 기반으로 해시 테이블에서 Key에 대한 데이터 위치를 연관성 있게 찾을 수 있다.</li><li><strong>슬롯(Slot)</strong>: 한 개의 데이터를 저장할 수 있는 해시 테이블 내의 공간</li></ul><blockquote><p>특정 <code>Key</code> 값으로 <code>해시함수</code>를 이용하여 <code>해시 테이블</code>에서 <code>해시 주소</code>를 가져온다.<br>저장할 데이터에 대해 Key를 추출할 수 있는 별도 함수도 존재할 수 있다.</p></blockquote><h2 id="장단점"><a href="#장단점" class="headerlink" title="장단점"></a>장단점</h2><ul><li>장점<ul><li>데이터 저장/읽기 속도가 빠르다.</li><li>해쉬는 키에 대한 데이터가 있는지 중복 확인이 쉽다.</li></ul></li><li>단점<ul><li> 일반적으로 저장공간이 더 많이 필요하다.</li><li>여러 키에 해당하는 주소가 동일할 경우 충돌 해결을 위해 별도 자료구조가 필요하다.<ul><li><em>공간을 늘려 탐색 시간과 맞바꿈</em></li></ul></li></ul></li></ul><h2 id="주요-용도"><a href="#주요-용도" class="headerlink" title="주요 용도"></a>주요 용도</h2><ul><li>검색이 많이 필요한 경우</li><li>저장, 삭제, 읽기가 빈번한 경우</li><li>캐쉬 구현시 (중복 확인이 쉬움)</li></ul><hr><h1 id="프로그래밍-연습"><a href="#프로그래밍-연습" class="headerlink" title="프로그래밍 연습"></a>프로그래밍 연습</h1><h2 id="해시-테이블-구현"><a href="#해시-테이블-구현" class="headerlink" title="해시 테이블 구현"></a>해시 테이블 구현</h2><h3 id="list-comprehension-사용하여-공간-생성"><a href="#list-comprehension-사용하여-공간-생성" class="headerlink" title="list comprehension 사용하여 공간 생성"></a>list comprehension 사용하여 공간 생성</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hash_table= <span class="built_in">list</span>([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line">hash_table</span><br></pre></td></tr></table></figure><img width="461" alt="1" src="https://user-images.githubusercontent.com/28856435/129169817-82d8c385-69b4-4b8b-a929-4dff6555c215.png" style="border: 1px solid #E3E3E3"><br><h3 id="가장-이상적인-해시-함수"><a href="#가장-이상적인-해시-함수" class="headerlink" title="가장 이상적인 해시 함수"></a>가장 이상적인 해시 함수</h3><blockquote><p>가장 <code>이상적인</code> 해시 함수는 해시 테이블에 데이터가 고르게 분포되어 저장된다.</p></blockquote><h3 id="초간단-해시-함수-Division-법"><a href="#초간단-해시-함수-Division-법" class="headerlink" title="초간단 해시 함수: Division 법"></a>초간단 해시 함수: Division 법</h3><ul><li>해시 함수를 만드는 방법은 여러가지가 있지만, 그 중 Division법을 이용하여 구현해본다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_func</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> key % <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>해시 테이블에 정의.<ul><li>데이터에 따라 필요시 key 생성 방법 정의가 필요</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data1= <span class="string">&#x27;Andy&#x27;</span></span><br><span class="line">data2= <span class="string">&#x27;Dave&#x27;</span></span><br><span class="line">data3= <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ord(data[i]): 문자의 ASCII 코드를 리턴한다.</span></span><br><span class="line"><span class="comment"># data1,2,3 각 문자의 첫문자를 ASCII 코드로 리턴한다.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(data1[<span class="number">0</span>]),<span class="built_in">ord</span>(data2[<span class="number">0</span>]),<span class="built_in">ord</span>(data3[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># hash_func 이 어떻게 동작? data1[0] 값에 대해서 해시 key값은 0이 return 된다.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(data1[<span class="number">0</span>]),<span class="built_in">ord</span>(data1[<span class="number">0</span>])%<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(data1[<span class="number">0</span>]),hash_func(<span class="built_in">ord</span>(data1[<span class="number">0</span>])))</span><br></pre></td></tr></table></figure><p>ㄴ결과</p><pre><code>    65 68 84    65 0    65 0</code></pre><h3 id="해시-함수를-이용해-해시-테이블에-값을-저장"><a href="#해시-함수를-이용해-해시-테이블에-값을-저장" class="headerlink" title="해시 함수를 이용해 해시 테이블에 값을 저장"></a>해시 함수를 이용해 해시 테이블에 값을 저장</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파이썬 dictionary 함수와 비슷</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">storage_data</span>(<span class="params">data, val</span>):</span></span><br><span class="line">    key = <span class="built_in">ord</span>(data[<span class="number">0</span>])</span><br><span class="line">    hash_addr = hash_func(key)</span><br><span class="line">    hasht[hash_addr] = val <span class="comment"># slot</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">data</span>):</span></span><br><span class="line">    key = <span class="built_in">ord</span>(data[<span class="number">0</span>])</span><br><span class="line">    hash_addr = hash_func(key)</span><br><span class="line">    <span class="keyword">return</span> hasht[hash_addr]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 해시테이블에 값을 넣어준다.</span></span><br><span class="line">storage_data(<span class="string">&#x27;Andy&#x27;</span>,<span class="string">&#x27;01055553433&#x27;</span>)</span><br><span class="line">storage_data(<span class="string">&#x27;Dave&#x27;</span>,<span class="string">&#x27;01011113433&#x27;</span>)</span><br><span class="line">storage_data(<span class="string">&#x27;Trump&#x27;</span>,<span class="string">&#x27;01022223433&#x27;</span>)</span><br></pre></td></tr></table></figure><br><ul><li><code>Andy</code> 를 Key 로 주고 값을 구하면 아래와 같이 해시 테이블에 매칭되는 결과를 얻을 수 있다.</li></ul><img width="445" alt="2" src="https://user-images.githubusercontent.com/28856435/129173913-23480086-06b9-4a66-acec-f4bedd0e6410.png" style="border: 1px solid #E3E3E3"><hr><h2 id="리스트-변수를-활용"><a href="#리스트-변수를-활용" class="headerlink" title="리스트 변수를 활용"></a>리스트 변수를 활용</h2><blockquote><ul><li>해시 함수: key % 8</li><li>해시 키 생성 hash(data)</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">hash_table = <span class="built_in">list</span>([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_func</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> key % <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">data, val</span>):</span></span><br><span class="line">    addr = hash_func(get_key(data))</span><br><span class="line">    hash_table[addr] = val</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_val</span>(<span class="params">data</span>):</span></span><br><span class="line">    addr = hash_func(get_key(data))</span><br><span class="line">    <span class="keyword">return</span> hash_table[addr]</span><br></pre></td></tr></table></figure><br><img width="770" alt="스크린샷 2021-08-16 오후 10 19 28" src="https://user-images.githubusercontent.com/28856435/129570206-4567f871-bd58-4353-81f2-bf38ab21d709.png" style="border: 1px solid #E3E3E3">]]></content>
    
    
    <summary type="html">&lt;p&gt;해시 테이블의 구조와 용어, 장단점을 알아보고 직접 구현해본다.&lt;br&gt;해시 함수 + 해시 주소 = 해시 테이블&lt;br&gt;&lt;code&gt;#hash_table&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
    <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
    <category term="hash_table" scheme="http://yoursite.com/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>알고리즘 시간 복잡도</title>
    <link href="http://yoursite.com/2021/08/12/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/"/>
    <id>http://yoursite.com/2021/08/12/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/</id>
    <published>2021-08-12T01:27:23.000Z</published>
    <updated>2021-08-12T01:52:17.568Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="알고리즘-복잡도"><a href="#알고리즘-복잡도" class="headerlink" title="알고리즘 복잡도"></a>알고리즘 복잡도</h1><h2 id="왜-필요할까"><a href="#왜-필요할까" class="headerlink" title="왜 필요할까?"></a>왜 필요할까?</h2><blockquote><p>다양한 알고리즘 중 어느 알고리즘이 더 효율적인지 분석하기 위해 복잡도를 정의하고 계산하는 것이 중요하다.</p></blockquote><h2 id="복잡도-계산-항목"><a href="#복잡도-계산-항목" class="headerlink" title="복잡도 계산 항목"></a>복잡도 계산 항목</h2><ol><li>시간 복잡도: 알고리즘 실행 속도</li><li>공간 복잡도: 알고리즘이 사용하는 메모리 사이즈<blockquote><p>시간 복잡도를 계산할 수 있어야 한다.</p></blockquote></li></ol><h2 id="많이-사용되는-빅오-실행시간"><a href="#많이-사용되는-빅오-실행시간" class="headerlink" title="많이 사용되는 빅오 실행시간"></a>많이 사용되는 빅오 실행시간</h2><p>아래 가장 기본적이고 흔한 실행시간이다. 몇 알고리즘은 빅오 표기법으로 표시할 수 없는 경우도 있다고 한다.</p><ul><li>O(log n) 로그시간 : 이진탐색</li><li>O(n) 선형시간 : 단순탐색</li><li>O(n * log n) : 퀵 정렬과 같이 빠른 알고리즘</li><li>O(n<sup>2</sup>) : 선택 정렬과 같이 느린 알고리즘</li><li>O(n!) : 정~말 느린 알고리즘 (외판원 문제)</li></ul><blockquote><p>빠름 | 　 O(log n) - O(n) - O(n * log n) - O(n<sup>2</sup>) - O(n!) 　 | 느림</p></blockquote><br><h2 id="알고리즘-기억해야할-사항"><a href="#알고리즘-기억해야할-사항" class="headerlink" title="알고리즘 기억해야할 사항"></a>알고리즘 기억해야할 사항</h2><ul><li>알고리즘의 속도는 <code>연산횟수</code>가 어떻게 증가하는지!? 로 측정. <del>시간이 아님.</del></li><li><code>연산횟수</code> 의 증감으로 데이터의 크기가 늘어날 때 알고리즘의 실행속도가 얼마나 즘감하는지 알 수 있다.</li><li>즉, O(log n)는 O(n) 보다 빠르며, <strong>찾으려는 데이터 수가 늘어나면 상대적으로 더 빨라진다.</strong></li></ul><hr><h1 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h1><h2 id="1부터-n까지의-합"><a href="#1부터-n까지의-합" class="headerlink" title="1부터 n까지의 합"></a>1부터 n까지의 합</h2><ul><li><strong>알고리즘 1</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">n</span>):</span></span><br><span class="line">    total=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        total = total+num</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><ul><li><strong>알고리즘 2</strong><ul><li>1부터 n까지 구하는 공식을 이용한다.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (n * (n+<span class="number">1</span>)/<span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>알고리즘 1과 2중에 더 효율적인 알고리즘은 알고리즘 2이다.</p><ul><li>알고리즘 1에서는 반복문으로 인해 입력 n에 따라 덧셈을 n번 해야한다. 시간 복잡도는 n, 빅 오 표기법은 O(n) 이 된다.</li><li>알고리즘 2에서는 반복문 없이 단순 공식을 계산하기 때문에, n의 값은 변화가 없다. 시간 복잡도는 1, 빅 오 표기법은 O(1) 이다.</li></ul></blockquote><h2 id="이진탐색-크기와-횟수"><a href="#이진탐색-크기와-횟수" class="headerlink" title="이진탐색 크기와 횟수"></a>이진탐색 크기와 횟수</h2><blockquote><p>크기가 두배가 된다고 횟수도 두배가 되는것은 아니다.</p></blockquote><ul><li>128 개의 이름이 정렬되어있는 리스트가 있습니다. 이진탐색으로 찾을 때 필요한 최대 추측 횟수는?<br>  : O(log n<sup>128</sup>) = 7</li><li>위 리스트의 크기가 두배가 된다면 최대 추측 횟수는?<br>  : O(log n<sup>256</sup>) = 8</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;알고리즘 복잡도, 빅오 표기법까지.&lt;br&gt;&lt;code&gt;#Big-O&lt;/code&gt; &lt;code&gt;#알고리즘&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
    <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
    <category term="bigO" scheme="http://yoursite.com/tags/bigO/"/>
    
  </entry>
  
  <entry>
    <title>↔️ Linked List 구현 - Double Linked</title>
    <link href="http://yoursite.com/2021/08/10/%EB%A7%81%ED%81%AC%EB%93%9C%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84-double%20linked/"/>
    <id>http://yoursite.com/2021/08/10/%EB%A7%81%ED%81%AC%EB%93%9C%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84-double%20linked/</id>
    <published>2021-08-10T00:27:23.000Z</published>
    <updated>2021-08-12T01:03:53.795Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="Doubley-linked-list"><a href="#Doubley-linked-list" class="headerlink" title="Doubley linked list"></a>Doubley linked list</h1><ul><li>이중 연결 리스트</li><li>양방향 연결로, 노드 탐색이 양방향으로 가능하다.</li></ul><blockquote><p>기본적으로 만들었던 링크드 리스트는 next 값만 존재했지만, Doubly linked list 에서는 prev를 추가하여 해당 Node의 이전 값도 연결해준다.</p></blockquote><h2 id="prev를-추가한-linked-list"><a href="#prev를-추가한-linked-list" class="headerlink" title="prev를 추가한 linked list"></a>prev를 추가한 linked list</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val, prev=<span class="literal">None</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.prev = prev</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeMgt</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.head = Node(val)</span><br><span class="line">        self.tail = self.head</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 노드 추가</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.head == <span class="literal">None</span>:</span><br><span class="line">            self.head = Node(val)</span><br><span class="line">            self.tail = self.head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = self.head</span><br><span class="line">            <span class="keyword">while</span> node.<span class="built_in">next</span>:</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># new 라는 노드가 추가 되면 prev, next의 노드와 모두 연결해주어야 한다.</span></span><br><span class="line">            new = Node(val)</span><br><span class="line">            node.<span class="built_in">next</span> = new</span><br><span class="line">            new.prev = node</span><br><span class="line">            self.tail = new</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 전체 리스트 출력</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">desc</span>(<span class="params">self</span>):</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="built_in">print</span>(node.val, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><br><ul><li>0 - 10 까지의 수를 저장한 링크드 리스트를 생성한다.</li></ul><img width="744" alt="스크린샷 2021-08-11 오후 6 00 05" src="https://user-images.githubusercontent.com/28856435/129001021-e7a258eb-7c7a-4fec-9455-64a2c5889e72.png"><br><h2 id="특정-값을-갖는-노드-찾기-from-head-tail"><a href="#특정-값을-갖는-노드-찾기-from-head-tail" class="headerlink" title="특정 값을 갖는 노드 찾기 from head? tail?"></a>특정 값을 갖는 노드 찾기 from head? tail?</h2><ul><li>prev, 노드의 이전값이 존재하기 때문에 tail, 리스트의 끝에서부터 탐색이 가능하다.</li><li>head, 노드의 처음과 tail, 끝에서 특정 값을 갖는 노드을 찾는 함수를 추가 구현한다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 리스트의 처음부터 탐색</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sch_from_head</span>(<span class="params">self, val</span>):</span></span><br><span class="line">     <span class="keyword">if</span> self.head == <span class="literal">None</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     node = self.head</span><br><span class="line">     <span class="keyword">while</span> node:</span><br><span class="line">         <span class="keyword">if</span> node.val == val:</span><br><span class="line">             <span class="keyword">return</span> node</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             node = node.<span class="built_in">next</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 리스트의 끝 부분부터 탐색</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">sch_from_tail</span>(<span class="params">self, val</span>):</span></span><br><span class="line">     <span class="keyword">if</span> self.tail == <span class="literal">None</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     node = self.tail</span><br><span class="line">     <span class="keyword">while</span> node.val!=val:</span><br><span class="line">         node = node.prev</span><br><span class="line">     <span class="keyword">if</span> node == <span class="literal">None</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure><br><ul><li>특정 값을 갖는 노드를 탐색한다. 찾는 수가 없다면 False를 리턴한다.</li></ul><img width="909" alt="스크린샷 2021-08-11 오후 6 10 33" src="https://user-images.githubusercontent.com/28856435/129002492-da7c1a19-2d33-4391-8cac-cc504812ffaf.png"><h2 id="원하는-위치에-값을-추가"><a href="#원하는-위치에-값을-추가" class="headerlink" title="원하는 위치에 값을 추가"></a>원하는 위치에 값을 추가</h2><ul><li>위에서 구현했던 특정 값을 갖는 노드 위치를 찾는다.</li><li>그 노드의 이전에 추가하려는 값을 넣는다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_before</span>(<span class="params">self, val, targetVal</span>):</span></span><br><span class="line">     <span class="keyword">if</span> self.head == <span class="literal">None</span>:</span><br><span class="line">         self.head = Node(val)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         node = self.tail</span><br><span class="line">         <span class="keyword">while</span> node.val != targetVal:</span><br><span class="line">             <span class="comment"># tail 부터 탐색한다면 다음 탐색할 값은 node.prev</span></span><br><span class="line">             node = node.prev</span><br><span class="line">         <span class="keyword">if</span> node == <span class="literal">None</span>:</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">         <span class="comment"># 위치를 찾고 나면 추가하려는 값으로 new node를 생성한다.</span></span><br><span class="line">         new = Node(val)</span><br><span class="line">         <span class="comment"># node 끼리 연결</span></span><br><span class="line">         node_prev = node.prev</span><br><span class="line">         node_prev.<span class="built_in">next</span> = new</span><br><span class="line">         new.<span class="built_in">next</span> = node</span><br><span class="line">         node.prev = new</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><br><ul><li>5라는 값의 위치 이전에 224 값을 넣어본다.</li></ul><img width="810" alt="스크린샷 2021-08-11 오후 6 19 38" src="https://user-images.githubusercontent.com/28856435/129003843-51628435-aa75-4af6-9669-aaf8fcd5898e.png"><br><h2 id="전체-코드"><a href="#전체-코드" class="headerlink" title="전체 코드"></a>전체 코드</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val, prev=<span class="literal">None</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.prev = prev</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeMgt</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.head = Node(val)</span><br><span class="line">        self.tail = self.head</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.head == <span class="literal">None</span>:</span><br><span class="line">            self.head = Node(val)</span><br><span class="line">            self.tail = self.head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = self.head</span><br><span class="line">            <span class="keyword">while</span> node.<span class="built_in">next</span>:</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">            new = Node(val)</span><br><span class="line">            node.<span class="built_in">next</span> = new</span><br><span class="line">            new.prev = node</span><br><span class="line">            self.tail = new</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">desc</span>(<span class="params">self</span>):</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="built_in">print</span>(node.val, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sch_from_head</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.val == val:</span><br><span class="line">                <span class="keyword">return</span> node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sch_from_tail</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.tail == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        node = self.tail</span><br><span class="line">        <span class="keyword">while</span> node.val!=val:</span><br><span class="line">            node = node.prev</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_before</span>(<span class="params">self, val, targetVal</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.head == <span class="literal">None</span>:</span><br><span class="line">            self.head = Node(val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = self.tail</span><br><span class="line">            <span class="keyword">while</span> node.val != targetVal:</span><br><span class="line">                node = node.prev</span><br><span class="line">            <span class="keyword">if</span> node == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            new = Node(val)</span><br><span class="line">            node_prev = node.prev</span><br><span class="line">            node_prev.<span class="built_in">next</span> = new</span><br><span class="line">            new.<span class="built_in">next</span> = node</span><br><span class="line">            node.prev = new</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linked List with Python&lt;br&gt;이중 연결 리스트를 구현하여, 특정 값을 추가해본다.&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
    <category term="linked_list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>🚀 Django API 서버 생성</title>
    <link href="http://yoursite.com/2021/07/23/Django-api%EC%84%9C%EB%B2%84-%EA%B5%AC%ED%98%84/"/>
    <id>http://yoursite.com/2021/07/23/Django-api%EC%84%9C%EB%B2%84-%EA%B5%AC%ED%98%84/</id>
    <published>2021-07-22T15:04:05.000Z</published>
    <updated>2021-08-12T01:03:53.794Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="가상환경"><a href="#가상환경" class="headerlink" title="가상환경"></a>가상환경</h2><p><em>mac 기준으로 작성되었습니다.</em></p><ul><li>설치</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ Django-prj pip3 install virtualenv</span><br></pre></td></tr></table></figure><ul><li>가상환경 생성</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ Django-prj virtualenv venv</span><br></pre></td></tr></table></figure><ul><li>가상환경 실행</li></ul><p>[mac 일 경우]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  Django-prj <span class="built_in">source</span> venv/bin/activate</span><br><span class="line">(venv) ➜  Django-prj </span><br></pre></td></tr></table></figure><p>[window 일 경우]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  Django-prj <span class="built_in">source</span> venv/Scripts/activate</span><br><span class="line">(venv) ➜  Django-prj </span><br></pre></td></tr></table></figure><h2 id="Django-설치"><a href="#Django-설치" class="headerlink" title="Django 설치"></a>Django 설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜ Django-prj  pip3 install django</span><br></pre></td></tr></table></figure><ul><li>Django 버전 확인</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  bin python -m django --version</span><br><span class="line">3.2.5</span><br></pre></td></tr></table></figure><h2 id="프로젝트-폴더-✔️"><a href="#프로젝트-폴더-✔️" class="headerlink" title="프로젝트 폴더 ✔️"></a>프로젝트 폴더 ✔️</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  Django-prj <span class="built_in">cd</span> venv/bin</span><br><span class="line">(venv) ➜  bin ls</span><br><span class="line">__pycache__      activate.fish    activate_this.py pip              pip3.8           python3.8        wheel-3.8</span><br><span class="line">activate         activate.ps1     django-admin     pip-3.8          python           sqlformat        wheel3</span><br><span class="line">activate.csh     activate.xsh     django-admin.py  pip3             python3          wheel            wheel3.8</span><br></pre></td></tr></table></figure><h2 id="Django-기본-프로젝트-생성"><a href="#Django-기본-프로젝트-생성" class="headerlink" title="Django 기본 프로젝트 생성"></a>Django 기본 프로젝트 생성</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  bin django-admin startproject jansvc</span><br><span class="line">(venv) ➜  jansvc ll</span><br><span class="line">total 32</span><br><span class="line">-rw-r--r--  1 mac  staff     0B  7 22 23:15 __init__.py</span><br><span class="line">drwxr-xr-x  4 mac  staff   128B  7 22 23:46 __pycache__</span><br><span class="line">-rw-r--r--  1 mac  staff   389B  7 22 23:15 asgi.py</span><br><span class="line">-rw-r--r--  1 mac  staff   3.2K  7 22 23:15 settings.py</span><br><span class="line">-rw-r--r--  1 mac  staff   748B  7 22 23:15 urls.py</span><br><span class="line">-rw-r--r--  1 mac  staff   389B  7 22 23:15 wsgi.py</span><br><span class="line">(venv) ➜  bin <span class="built_in">cd</span> jansvc</span><br></pre></td></tr></table></figure><blockquote><p><strong>manage.py</strong>: Django 프로젝트와 다양한 방법으로 상호작용 하는 커맨드라인의 유틸리티.<br><strong><strong>init</strong>.py</strong>: Python으로 하여금 이 디렉토리를 패키지처럼 다루라고 알려주는 용도의 단순한 빈 파일.<br><strong>settings.py</strong>: 현재 Django 프로젝트의 환경 및 구성을 저장합니다. Django settings에서 환경 설정 확인.<br><strong>urls.py</strong>: 현재 Django project 의 URL 선언을 저장합니다. Django 로 작성된 사이트의 “목차”.<br><strong>asgi.py</strong>: An entry-point for ASGI-compatible web servers to serve your project.<br><strong>wsgi.py</strong>: 현재 프로젝트를 서비스하기 위한 WSGI 호환 웹 서버의 진입점입니다. nginx나 apache로 웹 서버를 사용하게 될 때 그 웹서버와 통신하는 곳.</p></blockquote><h2 id="프로젝트-내-App-생성"><a href="#프로젝트-내-App-생성" class="headerlink" title="프로젝트 내 App 생성"></a>프로젝트 내 App 생성</h2><blockquote><p>Django 프로젝트는 다수의 App이 존재한다.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  jansvc python3 manage.py startapp blog</span><br><span class="line">(venv) ➜  jansvc ls</span><br><span class="line">blog      jansvc    manage.py</span><br><span class="line">(venv) ➜  jansvc ll blog</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r--  1 mac  staff     0B  7 22 23:46 __init__.py</span><br><span class="line"></span><br><span class="line">-rw-r--r--  1 mac  staff    63B  7 22 23:46 admin.py</span><br><span class="line">-rw-r--r--  1 mac  staff   140B  7 22 23:46 apps.py</span><br><span class="line">drwxr-xr-x  3 mac  staff    96B  7 22 23:46 migrations</span><br><span class="line">-rw-r--r--  1 mac  staff    57B  7 22 23:46 models.py</span><br><span class="line">-rw-r--r--  1 mac  staff    60B  7 22 23:46 tests.py</span><br><span class="line">-rw-r--r--  1 mac  staff    63B  7 22 23:46 views.py</span><br></pre></td></tr></table></figure><h2 id="서버-생성"><a href="#서버-생성" class="headerlink" title="서버 생성"></a>서버 생성</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  jansvc python3 manage.py migrate</span><br><span class="line"></span><br><span class="line">(venv) ➜  jansvc python3 manage.py createsuperuser</span><br><span class="line">사용자 이름 (leave blank to use <span class="string">&#x27;mac&#x27;</span>): sy</span><br><span class="line">이메일 주소: suyans730@naver.com</span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">Superuser created successfully.</span><br><span class="line"></span><br><span class="line">(venv) ➜  jansvc python3 manage.py runserver</span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">July 22, 2021 - 23:58:58</span><br><span class="line">Django version 3.2.5, using settings <span class="string">&#x27;jansvc.settings&#x27;</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br></pre></td></tr></table></figure><br><ul><li>서버가 정상적으로 뜬다.jpg 🤩</li></ul><img width="1976" alt="장고서버생성" src="https://user-images.githubusercontent.com/28856435/126664170-e4f7b116-2e4b-42ba-a11b-89a02ab36965.png"><br><h2 id="admin-페이지에-model-추가하기"><a href="#admin-페이지에-model-추가하기" class="headerlink" title="admin 페이지에 model 추가하기"></a>admin 페이지에 model 추가하기</h2><ul><li>model.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name= models.TextField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><ul><li>admin.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">admin.site.register(User)</span><br></pre></td></tr></table></figure><ul><li><code>makemigrations</code> 명령으로 적용<br>sqlite3에 Blog 클래스를 알려주는 아래 명령어를 사용한다.<br><code>makemigrations</code>: Blog class의 속성들을 DB야 알아들으렴<br><code>migrate</code>: 알아들었으면 적용하렴</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pip3 manage.py makemigrations</span><br></pre></td></tr></table></figure><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>여기까지 Django서버를 가상환경에 올리고 직접 글작성도 올려보았는데,<br>프론트를 react로 하여서 블로그를 만드려면 새로운 구조를 모색해 봐야겠다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python venv에 Django API 서버 프로젝트 생성하여 띄워본다.&lt;br&gt;&lt;code&gt;#python&lt;/code&gt; &lt;code&gt;#django&lt;/code&gt; &lt;code&gt;#virtualenv&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Django" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Django/"/>
    
    
  </entry>
  
  <entry>
    <title>🤔 Git - 잔디밭이 안심어질 때</title>
    <link href="http://yoursite.com/2021/07/21/%EC%9E%94%EB%94%94%EB%B0%AD%EC%9D%B4-%EC%95%88%EC%8B%AC%EC%96%B4%EC%A7%88%EB%95%8C/"/>
    <id>http://yoursite.com/2021/07/21/%EC%9E%94%EB%94%94%EB%B0%AD%EC%9D%B4-%EC%95%88%EC%8B%AC%EC%96%B4%EC%A7%88%EB%95%8C/</id>
    <published>2021-07-20T15:07:55.000Z</published>
    <updated>2021-09-10T02:14:11.685Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="열심히-push-했는데-잔디밭이-심어지지-않는다면"><a href="#열심히-push-했는데-잔디밭이-심어지지-않는다면" class="headerlink" title="열심히 push 했는데, 잔디밭이 심어지지 않는다면?"></a>열심히 push 했는데, 잔디밭이 심어지지 않는다면?</h1><blockquote><p>commit이 이루어지는 로컬 개발환경에 git의 <strong>user.name, user.email</strong> 이 등록되어 있는지 확인해 보아야 합니다.</p></blockquote><ul><li>아래 명령어로 config를 확인해보면, 저는 이미 등록을 해 두었기 때문에<br>config 리스트에서 <code>user.name</code>과 <code>user.email</code>이 설정되어 있습니다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; git config -list</span><br></pre></td></tr></table></figure><img width="738" alt="스크린샷 2021-07-21 오전 12 20 18" src="https://user-images.githubusercontent.com/28856435/126350540-1b5a14b0-80d8-4563-8bdc-e4ff31dfc28c.png"><br><ul><li>여러분도 아래 명령어를 통해 config를 등록해주면, 연동되어 잔디밭이 드디어 심어지게 됩니다 🥳</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; git --global user.name <span class="string">&#x27;your git user name&#x27;</span></span><br><span class="line">&gt; git --global user.email <span class="string">&#x27;your git email&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;push 했는데 왜 잔디밭이 안심어지죠 ?&lt;br&gt;&lt;code&gt;#git&lt;/code&gt; &lt;code&gt;#grass&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Git" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linked List 구현 - remove 함수</title>
    <link href="http://yoursite.com/2021/07/20/%EB%A7%81%ED%81%AC%EB%93%9C%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84-removeNode%ED%95%A8%EC%88%98/"/>
    <id>http://yoursite.com/2021/07/20/%EB%A7%81%ED%81%AC%EB%93%9C%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84-removeNode%ED%95%A8%EC%88%98/</id>
    <published>2021-07-20T14:27:23.000Z</published>
    <updated>2021-07-23T04:25:49.851Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="Manage-Linked-Likst"><a href="#Manage-Linked-Likst" class="headerlink" title="Manage Linked Likst"></a>Manage Linked Likst</h1><h2 id="Remove-Node"><a href="#Remove-Node" class="headerlink" title="Remove Node"></a>Remove Node</h2><p>지난 포스팅에 기본적으로 Linked List 객체를 만들고, 추가하여 출력까지 할 수 있는 <code>NodeMgt</code> 클래스를 간단히 구현했었다.<br>이번에는 이 클래스에서 특정 노드를 <code>remove</code> 할 수 있는 함수를 추가적으로 구현해 보았다.<br><br></p><ul><li>아래 remove 함수를 보면, 총 3가지 경우의 로직으로 분기된다.<ul><li><ol><li>head 값이 None 일때, 그냥 return</li></ol></li><li><ol start="2"><li>head 값이 지우려는 바로 그 값일 때, head의 포인터가 head의 다음값을 바라보게 한다. (그러면 원레 head를 가리키던 값은 리스트 연결성을 잃는다. -지워짐)</li></ol></li><li><ol start="3"><li>마지막 로직은, prev_node(이전노드)와 node(현재노드) 값을 while문을 타기전에 저장한다.<br>while 문은 node 값이 지우려는 그 값일 때 빠져나올 수 있다.<br>빠져나오게 되면, prev_node 의 next 값은 node (지우려는 값) 값이 아닌, node.next 를 바라보게 한다.<br>지우려는 값은 리스트에서 연결성이 끊겨서 지워진다.</li></ol></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.head==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.head.val==val:</span><br><span class="line">            self.head=self.head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        prev_node=self.head</span><br><span class="line">        node=self.head.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;val: %s prev: %s node: %s &#x27;</span> % (val, prev_node.val, node.val))</span><br><span class="line">        <span class="keyword">while</span> node.val!=val:</span><br><span class="line">            prev_node=prev_node.<span class="built_in">next</span></span><br><span class="line">            node=node.<span class="built_in">next</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;val: %s prev: %s node: %s &#x27;</span> % (val, prev_node.val, node.val))</span><br><span class="line">            </span><br><span class="line">        prev_node.<span class="built_in">next</span>=node.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><br><h2 id="Use-Function"><a href="#Use-Function" class="headerlink" title="Use Function"></a>Use Function</h2><ul><li>아래와 같이 linkedList 객체를 만들고 함수를 사용하여 특정 Node가 지워지는 것을 확인한다.</li></ul><img width="960" alt="스크린샷 2021-07-20 오후 11 47 12" src="https://user-images.githubusercontent.com/28856435/126345349-79de8dec-56a4-4b73-b578-f5fa86f002f6.png"><br><ul><li>Linked List 구현 전체 소스코드</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.val=val</span><br><span class="line">        self.<span class="built_in">next</span>=<span class="built_in">next</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeMgt</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.head=Node(val)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.head==<span class="literal">None</span>:</span><br><span class="line">            self.head=Node(val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node=self.head</span><br><span class="line">            <span class="keyword">while</span> node.<span class="built_in">next</span>:</span><br><span class="line">                node=node.<span class="built_in">next</span></span><br><span class="line">            node.<span class="built_in">next</span>=Node(val)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &gt;&gt;&gt;&gt; 특정 노드를 지워주는 함수 추가      </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.head==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.head.val==val:</span><br><span class="line">            self.head=self.head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        prev_node=self.head</span><br><span class="line">        node=self.head.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;val: %s prev: %s node: %s &#x27;</span> % (val, prev_node.val, node.val))</span><br><span class="line">        <span class="keyword">while</span> node.val!=val:</span><br><span class="line">            prev_node=prev_node.<span class="built_in">next</span></span><br><span class="line">            node=node.<span class="built_in">next</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;val: %s prev: %s node: %s &#x27;</span> % (val, prev_node.val, node.val))</span><br><span class="line">            </span><br><span class="line">        prev_node.<span class="built_in">next</span>=node.<span class="built_in">next</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printNode</span>(<span class="params">self</span>):</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="built_in">print</span>(node.val, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">                </span><br></pre></td></tr></table></figure><br><h1 id="Today…"><a href="#Today…" class="headerlink" title="Today…"></a>Today…</h1><p>_<br>어느새 2021년의 절반이 훌쩍 넘었다.<br>시간은 가고 있지만, 그 지나간 시간만큼 나는 얼마나 무엇을 이뤄냈는지 ..?<br>_<br>요즘 공부에 신경을 많이 쓰지 못하고 있다. 알고리즘을 어서 습득해야 하는데 말이다 !!<br>_<br>최근에 mac mini를 사서 개발하는 재미가 쏠쏠하다.<br>_<br>어떤 결실을 위해서는 꾸준함이 답인것 같다.<br>포기하지 말고 한결같이 노력해야 함이다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linked List with Python&lt;br&gt;특정 노드값을 지워주는 함수를 만들어본다.&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
    <category term="linked_list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Linked List 구현</title>
    <link href="http://yoursite.com/2021/07/19/%EB%A7%81%ED%81%AC%EB%93%9C%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84/"/>
    <id>http://yoursite.com/2021/07/19/%EB%A7%81%ED%81%AC%EB%93%9C%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84/</id>
    <published>2021-07-18T15:39:43.000Z</published>
    <updated>2021-07-23T04:25:49.852Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br><h1 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h1><ol><li>Linked List 구조</li></ol><ul><li>연결 리스트</li><li>배열은 순차적으로 연결된 공간에 데이터를 나열</li><li>링크드 리스트는 떨어진 곳에 존재하는 데이터를 화살표로 연결</li></ul><ol start="2"><li>기본 용어</li></ol><ul><li>노드</li><li>포인터</li></ul><hr><h2 id="Node-객체를-생성할-클래스"><a href="#Node-객체를-생성할-클래스" class="headerlink" title="Node 객체를 생성할 클래스"></a>Node 객체를 생성할 클래스</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><br><ul><li>아래와 같이도 쓸 수 있다.<ul><li>next 인자에 아무것도 넣지 않으면 <code>default 값으로 None</code>이 들어감</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br></pre></td></tr></table></figure><br>* Node 객체 하나(0)를 할당하고, add함수를 활용하여 1-9까지의 노드를 더한다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 입력</span></span><br><span class="line">node1= Node(<span class="number">0</span>)</span><br><span class="line">head = node1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;add &#x27;</span>,i)</span><br><span class="line">    add(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 출력</span></span><br><span class="line">node = head</span><br><span class="line"><span class="comment">#node 다음 객체가 있을 때까지</span></span><br><span class="line"><span class="keyword">while</span> node.<span class="built_in">next</span> : </span><br><span class="line">    <span class="built_in">print</span>(node.data)</span><br><span class="line">    node = node.<span class="built_in">next</span></span><br><span class="line"><span class="comment"># 가장 마지막 node의 next값은 없기 때문에 for문을 마치고 마지막에 한번더 출력</span></span><br><span class="line"><span class="built_in">print</span>(node.data) </span><br></pre></td></tr></table></figure><br><img width="1062" alt="4" src="https://user-images.githubusercontent.com/28856435/126073591-23031a06-9a7b-42d9-ad47-667624343fbd.png"><br><h2 id="파이썬-객체지향-Linked-List-구현"><a href="#파이썬-객체지향-Linked-List-구현" class="headerlink" title="파이썬 객체지향 Linked List 구현"></a>파이썬 객체지향 Linked List 구현</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.data=data</span><br><span class="line">        self.<span class="built_in">next</span>=<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeMgt</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.head = Node(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.head==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            self.head=Node(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node=self.head</span><br><span class="line">            <span class="keyword">while</span> node.<span class="built_in">next</span>:</span><br><span class="line">                node=node.<span class="built_in">next</span></span><br><span class="line">            node.<span class="built_in">next</span>=Node(data)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printDesc</span>(<span class="params">self</span>):</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="built_in">print</span>(node.data)</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><br><ul><li>구현한 Linked List 사용</li></ul><img width="950" alt="5" src="https://user-images.githubusercontent.com/28856435/126073891-c22c8817-0c1a-478e-9b86-53b9adf5394c.png"><br>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linked List with Python&lt;br&gt;링크드 리스트의 Node, Data&lt;br&gt;&lt;code&gt;#node&lt;/code&gt; &lt;code&gt;#data&lt;/code&gt; &lt;code&gt;#linked_list&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
    <category term="linked_list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Queue 그리고 Statck 과 Recursive 재귀함수의 연관성</title>
    <link href="http://yoursite.com/2021/07/18/%ED%81%90-%EC%8A%A4%ED%83%9D/"/>
    <id>http://yoursite.com/2021/07/18/%ED%81%90-%EC%8A%A4%ED%83%9D/</id>
    <published>2021-07-18T14:57:33.000Z</published>
    <updated>2021-07-23T04:25:49.854Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><h2 id="일반적인-큐-FIFO"><a href="#일반적인-큐-FIFO" class="headerlink" title="일반적인 큐 FIFO"></a>일반적인 큐 FIFO</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">data_q = queue.Queue()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data_q.put(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">data_q.put(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></br><img width="909" alt="jupyter" src="https://user-images.githubusercontent.com/28856435/126072441-e3304e53-d9fd-4ea3-b765-958f30a31101.png"></br><h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><blockquote><p>스택은 단순하고 빠른 성능을 위해 사용되므로, 보통 배열 구조를 활용해서 구현하는것이 일반적</p></blockquote><ul><li><p>Pros &amp; Cons</p><ul><li><p>데이터를 제한적으로 접근 <code>LIFO</code></p></li><li><p>구조가 단순, 구현 쉽다.</p></li><li><p>데이터 저장/읽기 속도가 빠름.</p></li><li><p>데이터 최대갯수를 미리 정해야함.</p><ul><li>파이썬의 경우 <code>재귀함수는 1000번까지만 호출</code> 가능</li></ul></li><li><p>저장공간의 낭비 발생</p><ul><li>미리 최대 갯수만큼 저장공간 확보 필요</li></ul></li></ul></li></ul><h2 id="Stack-프로세스-함수-동작-방식에서-많이-쓰인다"><a href="#Stack-프로세스-함수-동작-방식에서-많이-쓰인다" class="headerlink" title="Stack - 프로세스 함수 동작 방식에서 많이 쓰인다."></a>Stack - 프로세스 함수 동작 방식에서 많이 쓰인다.</h2><blockquote><p><code>재귀함수</code>의 동작방식과 비슷하다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 재귀함수의 동작 방식</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> data&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ended&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        recursive(data-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;returned&quot;</span>, data)</span><br></pre></td></tr></table></figure></br><ul><li>위 recursive 함수를 실행시켜보면, 4-0 까지 stack data에 쌓인 뒤, 0이 되면 “ended” 를 찍는다.<br>그리고 다시 stack data에서 맨 상단의 0부터 4까지 다시 꺼낸다. -&gt; “returned ~” 에 찍힌 data로 확인된다.</br></li></ul><img width="982" alt="recursive" src="https://user-images.githubusercontent.com/28856435/126072813-e13d0c9c-57f4-4e2d-bfb3-0fd9b86354ec.png"></br><h2 id="Stack-파이썬-리스트-기능을-이용"><a href="#Stack-파이썬-리스트-기능을-이용" class="headerlink" title="Stack - 파이썬 리스트 기능을 이용"></a>Stack - 파이썬 리스트 기능을 이용</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack_ = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">stack_.append(<span class="number">1</span>)</span><br><span class="line">stack_.append(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></br><img width="703" alt="1" src="https://user-images.githubusercontent.com/28856435/126073148-bffc889c-31ec-4fce-b46a-163579230b69.png"></br><h3 id="pop-push-함수-없이-직접-stack-구현"><a href="#pop-push-함수-없이-직접-stack-구현" class="headerlink" title="pop(), push() 함수 없이 직접 stack 구현"></a>pop(), push() 함수 없이 직접 stack 구현</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">data</span>):</span></span><br><span class="line">    st.append(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span>():</span></span><br><span class="line">    data = st[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">del</span> st[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure></br><img width="611" alt="2" src="https://user-images.githubusercontent.com/28856435/126073159-616658b8-7fc9-46f4-8f20-6849afa9c9da.png"></br>]]></content>
    
    
    <summary type="html">&lt;p&gt;Queue, Stack, Recursive Funtion&lt;br&gt;큐, 스택, 재귀함수를 python으로 구현해본다.&lt;br&gt;&lt;code&gt;#queue&lt;/code&gt; &lt;code&gt;#stack&lt;/code&gt; &lt;code&gt;#linked_list&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
    <category term="queue" scheme="http://yoursite.com/tags/queue/"/>
    
    <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>Node JS 기본, 시작해보기</title>
    <link href="http://yoursite.com/2021/07/04/nodejs-start/"/>
    <id>http://yoursite.com/2021/07/04/nodejs-start/</id>
    <published>2021-07-04T08:51:11.000Z</published>
    <updated>2021-07-19T00:39:14.202Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="💡-NodeJS-시작하기"><a href="#💡-NodeJS-시작하기" class="headerlink" title="💡 NodeJS 시작하기"></a>💡 NodeJS 시작하기</h1><h2 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h2><ul><li>다음 설치환경이 선행되어 있음<ul><li>nvm 버전관리 모듈 설치</li><li>npm 12.14.1 버전 사용</li></ul></li></ul><ul><li>프로젝트 폴더에서 npm 초기화</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm init y</span><br></pre></td></tr></table></figure><ul><li>아래 npm 모듈을 설치해본다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install parcel-bundler -D</span><br><span class="line">&gt; npm install lodash</span><br></pre></td></tr></table></figure><blockquote><p>📌  Parcel?</p><ul><li><code>꾸러미</code> 라는 뜻을 가졌다. 짐을 싸듯이 객체를 싸는 클래스이다.</li><li>쉽고 빠른 웹/앱 bundler.<br>  (bundler: 여라 파일들을 하나의 파일로 묶어주어 네트워크의 응답속도를 빠르게 도와주고 파일 간의 병목현상을 줄여, 유지보수의 효율성 증가)</li><li>Parcel 은 파일 변화를 자동으로 감지하여 다시 빌드하고, 빠른 모듈 교체를 지원하는 내장 개발용 서버를 보유하고 있어, 신속한 개발을 가능하게 한다.</li></ul></blockquote><blockquote><p>📌  lodash?</p><ul><li>유틸리티 라이브러리로 array, collection, date, number, object등이 있으며, 데이터를 쉽게 다룰 수 있도록 도와준다.</li><li>특히 자바스크립트 배열 내부의 객체들을 핸들링할 때 유용하다.</li><li>자주 사용하는 기능 : <code>filter</code>, <code>map</code>, <code>uniqBy</code> etc…</li></ul></blockquote><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json ?"></a>package.json ?</h2><ul><li>package.json : 패키지 모듈 직접 관리</li><li>package-lock.json : 인스톨한 패키지들을 내부에서 자동으로 관리</li></ul><h2 id="옵션-D-–save-dev"><a href="#옵션-D-–save-dev" class="headerlink" title="옵션 -D, –save-dev"></a>옵션 -D, –save-dev</h2><ul><li>옵션 -D, –save-dev : <code>devDependencies</code> 에 설치됨<ul><li>개발할 때만 필요. 웹브라우저에서는 직접적으로 동작하지 않는다.</li></ul></li></ul><h2 id="브라우저에서-index-html-띄우기"><a href="#브라우저에서-index-html-띄우기" class="headerlink" title="브라우저에서 index.html 띄우기"></a>브라우저에서 index.html 띄우기</h2><ul><li>dev: index.html 을 기준으로 <code>개발용</code>으로만 활용</li><li>build: index.html 을 기준으로 <code>웹브라우저</code>에서 동작시키는 용도</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;parcel index.html&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;parcel build index.html&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><ul><li>터미널에서 명령어 사용, localhost:1234 접속</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm run dev</span><br></pre></td></tr></table></figure><h2 id="lodash-모듈-사용"><a href="#lodash-모듈-사용" class="headerlink" title="lodash 모듈 사용"></a>lodash 모듈 사용</h2><ul><li>아래 코드를 입력하고</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hellow&#x27;</span>);</span><br><span class="line"><span class="comment">// lodash 모듈을 사용</span></span><br><span class="line"><span class="built_in">console</span>.log(_.camelCase(<span class="string">&#x27;hello suyeon&#x27;</span>));</span><br></pre></td></tr></table></figure><ul><li> <code>npm run dev</code> 실행후 브라우저에서 접속하면 console에서 아래와 같이 적용된다.<br><img src="https://user-images.githubusercontent.com/28856435/124388083-14a34800-dd1c-11eb-8d2a-2e04b337845e.PNG" alt="node1"></li></ul></br><hr><h1 id="💡-유의적-버전-Semantic-Versioning-버전규칙"><a href="#💡-유의적-버전-Semantic-Versioning-버전규칙" class="headerlink" title="💡 유의적 버전 (Semantic Versioning) ;버전규칙"></a>💡 유의적 버전 (Semantic Versioning) ;버전규칙</h1><ul><li><p>^Major.Minor.Patch</p><ul><li>^ : Major 버전 안에서 가장 최신 버전으로 업데이트 가능<ul><li>해당 기호를 지우면 <code>npm update</code> 사용하여 업데이트 불가하다</li></ul></li><li>Major : 기존 버전과 호환되지 않는 새로운 버전</li><li>Minor : 기존 버전과 호환되는 새로운 기능이 추가된 버전</li><li>Patch : 기존 버전과 호환되는 버그 및 오타 등이 수정된 버전</li></ul></li><li><p>버전 정보 확인</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm info lodash</span><br></pre></td></tr></table></figure><h2 id="버전을-낮춰서-설치하기"><a href="#버전을-낮춰서-설치하기" class="headerlink" title="버전을 낮춰서 설치하기"></a>버전을 낮춰서 설치하기</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash@4.17.20</span><br></pre></td></tr></table></figure><hr><h1 id="💡-프로젝트-버전-관리-NPM"><a href="#💡-프로젝트-버전-관리-NPM" class="headerlink" title="💡 프로젝트 버전 관리 NPM"></a>💡 프로젝트 버전 관리 NPM</h1><h2 id="패키지-재설치-package-json"><a href="#패키지-재설치-package-json" class="headerlink" title="패키지 재설치 (package.json)"></a>패키지 재설치 (package.json)</h2><ul><li>node_mudule 폴더를 지우더라도 <code>npm -i</code> 를 통해서 다시 설치 가능 (.cache, dist도 마찬가지)</li></ul><h2 id="gitignore-생성하여-버전관리-제외"><a href="#gitignore-생성하여-버전관리-제외" class="headerlink" title=".gitignore 생성하여 버전관리 제외"></a>.gitignore 생성하여 버전관리 제외</h2><ul><li>버전관리가 불필요한 파일들을 .gitignore 에 추가하여 제외할 수 있다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.cache/</span><br><span class="line">dist</span><br><span class="line">node_modules/</span><br></pre></td></tr></table></figure><ul><li><code>git status</code> 명령어로 확인, <code>.gitignore</code> 에 추가한 파일은 올라가지 않는다.</li></ul><p><img src="https://user-images.githubusercontent.com/28856435/124389250-4834a100-dd21-11eb-8a41-c59cb9e7c3d2.PNG" alt="nod2"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;parcel bundler를 이용하여 웹에 index.html을 띄워본다.&lt;br&gt;버전관리, package.json 등의 의미&lt;br&gt;&lt;code&gt;#nvm&lt;/code&gt; &lt;code&gt;#npm&lt;/code&gt; &lt;code&gt;#parcel&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ NodeJS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-NodeJS/"/>
    
    
    <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>python postgresql 연동</title>
    <link href="http://yoursite.com/2021/06/23/python-postgresql-%EC%97%B0%EB%8F%99/"/>
    <id>http://yoursite.com/2021/06/23/python-postgresql-%EC%97%B0%EB%8F%99/</id>
    <published>2021-06-23T04:36:02.000Z</published>
    <updated>2021-06-30T08:17:37.007Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="psycopg2-를-이용하여-Python-Database-연동"><a href="#psycopg2-를-이용하여-Python-Database-연동" class="headerlink" title="psycopg2 를 이용하여 Python Database 연동"></a>psycopg2 를 이용하여 Python Database 연동</h1><ol><li>Database 정보 config.ini 설정</li></ol><ul><li>config.ini<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[DB]</span><br><span class="line">host=172.23.174.55</span><br><span class="line">database=mydatabase</span><br><span class="line">user=mydb</span><br><span class="line">password=1234</span><br><span class="line">port=5432</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>DB Load &amp; Connect</li></ol><ul><li>main.py<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load DB =&gt; config.&#123;.ini파일&#125;(section=&#123;해당 DB 설정변수&#125;)</span></span><br><span class="line">db=config.config(section=<span class="string">&#x27;DB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">conn = <span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = psycopg2.connect(**db)</span><br><span class="line">    curs = conn.cursor()</span><br><span class="line">    curs.execute(query[<span class="string">&#x27;select&#x27;</span>],(user_id, phone_num))</span><br></pre></td></tr></table></figure></li></ul><h1 id="Python-Database-API"><a href="#Python-Database-API" class="headerlink" title="Python Database API"></a>Python Database API</h1><ul><li>fatchone</li><li>fatchall</li><li>fatchmany(row개수)</li></ul><h1 id="파일-데이터-처리"><a href="#파일-데이터-처리" class="headerlink" title="파일 데이터 처리"></a>파일 데이터 처리</h1><p>읽기(r), 쓰기(w 혹은 x), 추가(a), 수정(+) 모드</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python postgresql 연동&lt;/p&gt;</summary>
    
    
    
    <category term="☁️ DataBase" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-DataBase/"/>
    
    
  </entry>
  
</feed>
