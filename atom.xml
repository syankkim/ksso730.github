<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>동글씨</title>
  
  <subtitle>동글씨의 LOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-05-11T01:52:08.027Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Suyan Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>프로세스 구조와 컨텍스트 스위칭</title>
    <link href="http://yoursite.com/2021/05/10/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B5%AC%EC%A1%B0/"/>
    <id>http://yoursite.com/2021/05/10/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B5%AC%EC%A1%B0/</id>
    <published>2021-05-10T08:21:24.000Z</published>
    <updated>2021-05-11T01:52:08.027Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><p><em>💬 해당 강의는 fastcampus 에서 ‘컴공 전공자 따라잡기 온라인 완주반’ 강의를 들으며 스스로의 학습을 위해 작성한 포스팅입니다. 문제가 된다면 연락 부탁드립니다.</em></p><br><h1 id="프로세스란"><a href="#프로세스란" class="headerlink" title="프로세스란 ?"></a>프로세스란 ?</h1><blockquote><p>프로세스란 운영체제 입장에서 하나의 작업 단위이며, 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램을 말한다.</p></blockquote><h1 id="프로세스와-프로그램"><a href="#프로세스와-프로그램" class="headerlink" title="프로세스와 프로그램"></a>프로세스와 프로그램</h1><blockquote><p>프로그램: 일반적으로 하드 디스크 등의 보조기억장치에 저장된 실행 코드<br>프로세스: 프로그램을 구동하여 프로그램 자체와 프로그램의 상태가 메모리 상에서 실행되는 작업 단위를 지칭.<br>즉, 실행 중인 프로그램을 뜻한다. 예를 들어, 하나의 프로그램을 여러 번 구동하면 여러 개의 프로세스가 메모리 상에서 실행되는 것이다.</p></blockquote><h2 id="프로세스-구조"><a href="#프로세스-구조" class="headerlink" title="프로세스 구조"></a>프로세스 구조</h2><ul><li>STACK : 프로그램이 자동으로 사용하는 메모리 영역이다. 함수 내의 지역변수, 인자값, 반환값의 주소가 임시로 저장된다. 데이터가 쌓이거나 반환하기 위해 할당하는 스택의 위치를 <code>SP(Stack Pointer)</code> 라는 레지스터에 주소값을 저장한다. 하나의 데이터가 stack 에 쌓이면 다음 주소값이 SP 에서 갱신된다.</li><li>HEAP : 프로그래머의 필요에 의해 동적으로 메모리를 할당하고자 할 때 사용되는 영역이다. C 에서의 <code>malloc()</code> 함수 사용, Java 에서의 참조타입 혹은 생성자를 선언할 경우, 메모리 공간이나 크기를 할당할 수 있다.<br>메모리 주소 값에 의해서만 참조되고 사용되는 영역이다</li><li>DATA<ul><li>BSS영역, Data영역을 구분하는 이유?<br>초기화 된 데이터는 초기값을 저장해야 하므로 Data 영역에 저장되어 <code>ROM</code> 에 저장된다. 하지만 초기화 되지 않은 데이터 까지 <code>ROM</code> 에 저장되면 큰 size의 공간이 필요하므로 구분하여, 초기화 되지 않은 데이터는 <code>RAM</code> 에 저장한다.</li><li>BSS : 초기화 되지 않은, 선언만 된 글로벌/전역 변수</li><li>DATA : 초기화된 글로벌/전역 변수</li></ul></li><li>CODE(TEXT) : 프로그램 코드 (컴파일된 기계어, Read Only)</li></ul><h2 id="프로그램-코드-예시-feat-Heap"><a href="#프로그램-코드-예시-feat-Heap" class="headerlink" title="프로그램 코드 예시 (feat.Heap)"></a>프로그램 코드 예시 (feat.Heap)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> global_data1;</span><br><span class="line"><span class="keyword">int</span> global_data2=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>* data; <span class="comment">// int 타입의 포인터</span></span><br><span class="line"></span><br><span class="line">  data = (<span class="keyword">int</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)  * <span class="number">4</span>); <span class="comment">// malloc 은 메모리를 할당해주는 동적함수.</span></span><br><span class="line"></span><br><span class="line"> *data = <span class="number">1</span>;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *data);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 프로그램의 구조<table><thead><tr><th>영역</th><th>데이터</th></tr></thead><tbody><tr><td>stack</td><td>int* data</td></tr><tr><td>heap  data = (int*) malloc(sizeof(int)  * 4)</td><td></td></tr><tr><td>data</td><td></td></tr><tr><td>BSS</td><td>int global_data1;</td></tr><tr><td>DATA</td><td>int global_data2=1;</td></tr><tr><td>text(code)</td><td>위의 컴파일 코드</td></tr></tbody></table></li></ul><h2 id="스택-오버플로우-amp-amp-힙-오버플로우"><a href="#스택-오버플로우-amp-amp-힙-오버플로우" class="headerlink" title="스택 오버플로우 &amp;&amp; 힙 오버플로우"></a>스택 오버플로우 &amp;&amp; 힙 오버플로우</h2><ul><li>stack과 heap영역은 사실 같은 공간을 공유한다. heap이 메모리의 낮은 주소부터 할당되면 stack은 높은 주소부터 할당되는 식이다. 그래서 각 영역이 상대 공간을 침범하는 일이 발생할 수 있는데 이를 각각 <code>stack overflow</code>, <code>heap overflow</code> 라고 한다.</li><li>하나의 함수에서 너무 큰 지역변수를 선언하거나, 종료조건이 없는 재귀함수가 무한히 호출 될 경우, 버퍼를 초과하게 되어 <code>스택 오버플로우</code>가 발생한다. 이 때, return 값을 덮어쓰게 된다면 해킹의 위험에 노출된다.</li></ul><h2 id="컨텍스트-스위칭-PCB"><a href="#컨텍스트-스위칭-PCB" class="headerlink" title="컨텍스트 스위칭, PCB"></a>컨텍스트 스위칭, PCB</h2><ul><li>컨텍스트 스위칭이란 ? <ul><li>Context Switching = 문맥교환</li><li>CPU 가 어떤 하나의 프로세스를 실행하고 있는 중, 인터럽트 요청 혹은 스케줄러에 의해 다른 우선순위의 프로세스로 교체되어 실행되는 것을 말한다.<br>기존 프로세스의 상태, 레지스터값(Context) 을 저장하고, 다음 실행될 프로세스의 레지스터값으로 교체하면 CPU 는 해당값을 읽어 수행한다.</li></ul></li></ul><h3 id="PCB-Process-Control-Context-Block"><a href="#PCB-Process-Control-Context-Block" class="headerlink" title="PCB (Process Control/Context Block)"></a>PCB (Process Control/Context Block)</h3><blockquote><p>프로세스가 생성시 만들어지며, 프로세스마다 존재한다.<br>운영체제가 프로세스를 제어하기 위해 실행중인 상태를 캡쳐/구조화 하여 저장되는 구조체이다.<br>주기억장치에 정보가 유지된다.</p></blockquote><ul><li>PCB 정보<ul><li>Process ID</li><li>Register 값 : PC(Program Counter), SP(Stackk Pointer) 등</li><li>Scheduling Info (Process State)</li><li>Memory Info (메모리사이즈 limit)</li></ul></li></ul><h3 id="컨텍스트-스위칭-과정"><a href="#컨텍스트-스위칭-과정" class="headerlink" title="컨텍스트 스위칭 과정"></a>컨텍스트 스위칭 과정</h3> <img width="326" alt="context_switching" src="https://user-images.githubusercontent.com/28856435/117633911-6f577200-b1b9-11eb-852e-56afe22a999f.png"><ol><li>실행중지할 프로세스를 해당 프로세스의 PCB 에 업데이트 후 메인메모리에 저장한다.</li><li>메인 메모리에서 다음 실행할 프로세스의 PCB 정보를 CPU 레지스터에 넣고 실행한다.<ul><li><code>dispatch</code> : Ready 상태의 프로세스를 Running 상태로 바꾸는 것.</li></ul></li></ol><h3 id="컴파일러-등장에-따른-컨텍스트-스위칭-속도"><a href="#컴파일러-등장에-따른-컨텍스트-스위칭-속도" class="headerlink" title="컴파일러 등장에 따른 컨텍스트 스위칭 속도"></a>컴파일러 등장에 따른 컨텍스트 스위칭 속도</h3><ul><li>초기 : 어셈블리어로 작성되어 서로다른 CPU 아키텍처가 등장할 때마다 매번 똑같은 프로그램 작성<ul><li>어셈블리어로는 프로그램 작성속도가 떨어짐.</li></ul></li><li>컴파일러 등장 : CPU 아키텍처에 따라서 컴파일러 프로그램만 만들면 되게 되었다.<ul><li>어셈블리 언어로 작성된 코드보다 속도가 떨어질 수도 있음.</li><li>리눅스의 경우, 각 CPU마다 다른 컨텍스트 스위칭 코드가 존재한다.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;프로세스 구조에 대해 자세히, 컨텍스트 스위칭은 어떻게 일어날까?&lt;br&gt;&lt;code&gt;#context_switching&lt;/code&gt; &lt;code&gt;#PC&lt;/code&gt; &lt;code&gt;#SP&lt;/code&gt; &lt;code&gt;#PCB&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
  </entry>
  
  <entry>
    <title>⏸ 인터럽트</title>
    <link href="http://yoursite.com/2021/05/07/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8/"/>
    <id>http://yoursite.com/2021/05/07/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8/</id>
    <published>2021-05-06T16:21:24.000Z</published>
    <updated>2021-05-11T01:52:08.022Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="인터럽트란"><a href="#인터럽트란" class="headerlink" title="인터럽트란?"></a>인터럽트란?</h2><ul><li>CPU 에서 프로그램 실행중에 입출력 이벤트나 프로그래밍 오류 등, 예기지 못한 상황이 발생했을 경우 CPU 에게 실행중인 작업을 중단시키고 그 상황을 먼저 처리하도록 하는 기술이다.</li></ul><h2 id="내부-외부-인터럽트"><a href="#내부-외부-인터럽트" class="headerlink" title="내부/외부 인터럽트"></a>내부/외부 인터럽트</h2><ul><li>내부 인터럽트 : 프로그램 내부에서 발생. (=소프트웨어 인터럽트)<ul><li>프로그램 내부에서 잘못된 데이터 사용이나, 명령어 실행오류</li><li>권한을 위배한 엑세스 (사용자 모드에서 운영체제의 명령이나 공간에 접근)</li><li>Divide by zero</li><li>Overflow/Underflow</li></ul></li><li>외부 인터럽트 : 프로그램 외부에서 발생. (=하드웨어 인터럽트)<ul><li>기기문제나 전원이상</li><li>입출력 인터럽트</li><li>타이머 인터럽트</li></ul></li></ul><h3 id="타이머-인터럽트"><a href="#타이머-인터럽트" class="headerlink" title="타이머 인터럽트"></a>타이머 인터럽트</h3><ul><li>선점형 스케줄러에 필요</li><li>하드웨어로부터 일정시간마다 타이머 인터럽트를 CPU 에게 알려주면, <code>context switching</code> 을 수행한다.<ul><li>context switching : 수행중인 프로세스를 중단하고 다른 프로세스를 수행하는 것.</li></ul></li><li>타이머 인터럽트를 발생시키는 칩이 컴퓨터에 별도로 존재한다.</li></ul><h3 id="입출력-인터럽트"><a href="#입출력-인터럽트" class="headerlink" title="입출력 인터럽트"></a>입출력 인터럽트</h3><ul><li>프린터, 키보드, 마우스, 저장매체(SSD) 등</li></ul><h2 id="인터럽트-예시-divide-by-zero"><a href="#인터럽트-예시-divide-by-zero" class="headerlink" title="인터럽트 예시 (divide by zero)"></a>인터럽트 예시 (divide by zero)</h2><ul><li>zero.c<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">include &lt;studio.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"hello"</span>);</span><br><span class="line">  <span class="keyword">int</span> data;</span><br><span class="line">  <span class="keyword">int</span> divider =<span class="number">0</span>;</span><br><span class="line">  data = <span class="number">1</span> /divider; <span class="comment">// 0 으로 나눌 수 없음.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>cmd<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./zero</span><br><span class="line">hello</span><br><span class="line">Floating pont exception (core dumped)</span><br></pre></td></tr></table></figure></li><li><code>Floating pont exception (core dumped)</code> : 운영체제가 발생시킨 인터럽트</li></ul><h2 id="인터럽트-처리"><a href="#인터럽트-처리" class="headerlink" title="인터럽트 처리"></a>인터럽트 처리</h2><ol><li>CPU 가 프로그램을 실행하고 있을때, 소프트웨어 혹은 하드웨어 인터럽트가 발생한다.</li><li>운영체제는 실행중이던 프로세스를 중단하고 인터럽트 처리 함수를 먼저 실행한다.</li><li>인터럽트 처리가 끝나면 운영체제에게 알린다.</li><li>중단되었던 프로세스가 재실행된다.</li></ol><h2 id="IDT-Interrupt-Descriptor-Table"><a href="#IDT-Interrupt-Descriptor-Table" class="headerlink" title="IDT (Interrupt Descriptor Table)"></a>IDT (Interrupt Descriptor Table)</h2><ul><li>IDT 는 인터럽트 번호마다 각 시스템콜함수 주소가 있는 테이블이다.</li><li>리눅스는 인터럽트 처리를 위해 IDT 를 사용한다.</li></ul><br><p><img src="https://user-images.githubusercontent.com/28856435/117398693-d2d36c80-af39-11eb-921a-73415d97aacd.jpg" alt="idt"></p><h2 id="시스템콜-인터럽트"><a href="#시스템콜-인터럽트" class="headerlink" title="시스템콜 인터럽트"></a>시스템콜 인터럽트</h2><ul><li>시스템콜 실행을 위해서는 강제로 코드에 인터럽트 명령을 넣어, CPU 가 수행할 수 있도록 해야한다.</li><li>시스템콜 인터럽트는 아래와 같이 어셈블리어 3줄로 표현된다.</li></ul><p>[Assembly Code]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov eax, <span class="number">1</span></span><br><span class="line">mov ebx, <span class="number">0</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">0x80</span></span><br></pre></td></tr></table></figure><ul><li>eax (Exended Accumaltor Register) : Arithmetic Logic Operation 수행 및 함수의 반환값이 저장.<ul><li>systemcall number 저장됨.</li></ul></li><li>ebx (Extended Base Register) : 메모리 주소를 저장하기 위함.<ul><li>systemcall argument 주소가 저장됨.</li></ul></li><li>int 0X80 : 시스템콜의 Interurrpt Number, <int> 는 OP code.</li></ul><h2 id="시스템콜-인터럽트-처리"><a href="#시스템콜-인터럽트-처리" class="headerlink" title="시스템콜 인터럽트 처리"></a>시스템콜 인터럽트 처리</h2><ol><li>시스템콜 인터럽트 호출 (int 0X80)</li><li><code>User Mode =&gt; Kernel Mode 전환</code></li><li>IDT 참조, 0X80 에 매핑된 system_call() 주소로 이동.<table><thead><tr><th>interrupt</th><th>excution Code</th></tr></thead><tbody><tr><td>0X0</td><td>device_error()</td></tr><tr><td>…</td><td>…</td></tr><tr><td>0X80</td><td>system_cala()</td></tr></tbody></table></li></ol><br><ol start="4"><li>systemCall 테이블 참조<table><thead><tr><th>%eax</th><th>name</th><th>source</th><th>%ebx</th></tr></thead><tbody><tr><td>1</td><td>sys_exit</td><td>kernel/exit.c</td><td>int</td></tr><tr><td>2</td><td>sys_fork</td><td>arch/i386/kernel/process.c</td><td>struct_pt_regs</td></tr><tr><td>3</td><td>sys_read</td><td>fs/read_write.c</td><td>unsigned int</td></tr><tr><td>4</td><td>sys_write</td><td>fs/read_write.c</td><td>unsigned int</td></tr><tr><td>5</td><td>sys_open</td><td>fs/open.c</td><td>const char*</td></tr><tr><td>6</td><td>sys_close</td><td>fs/close.c</td><td>unsigned int</td></tr></tbody></table></li></ol><br><ol start="5"><li><code>Kernel Mode =&gt; User Mode 전환</code></li><li>프로세스 재진행</li></ol><blockquote><p><strong>IDT vs IVT ?</strong></p><ol><li>프로세서에서 인터럽트가 걸렸을 때, 그 인터럽트를 처리할 수 있는 서비스 루틴들의 주소-인터럽트 핸들러 주소가 저장되어 있는 <code>IVT (interrupt vector)</code> 인터럽트 벡터 테이블을 보고 결정한다.</li><li>IVT는 <code>real mode</code>에서, IDT는 <code>protected mode</code>에서 사용된다.<ul><li>real mode 부팅 직후 작동되는 모드로 <code>물리 메모리</code>를 그대로 사용합니다.</li><li>protected mode는 <code>가상 메모리</code>를 지원하는 모드입니다.</li></ul></li><li>최근 OS는 모두 protected mode를 기반으로 실행되어 IDT를 사용합니다.</li><li>IDT <code>interrupt descriptor table</code> 는 IVT <code>interrupt vector table</code> 을 구현하기 위해 X86 아키텍처에서 사용되는 데이터 구조체이다.</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;인터럽트는 무엇이고 어떻게 처리될까?&lt;br&gt;&lt;code&gt;#interrupt&lt;/code&gt; &lt;code&gt;#IDT&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
  </entry>
  
  <entry>
    <title>🙋‍♀️ 선점형 vs 비선점형</title>
    <link href="http://yoursite.com/2021/05/06/%EC%84%A0%EC%A0%90%ED%98%95vs%EB%B9%84%EC%84%A0%EC%A0%90%ED%98%95/"/>
    <id>http://yoursite.com/2021/05/06/%EC%84%A0%EC%A0%90%ED%98%95vs%EB%B9%84%EC%84%A0%EC%A0%90%ED%98%95/</id>
    <published>2021-05-06T14:41:43.000Z</published>
    <updated>2021-05-11T01:52:08.019Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><p><em>💬 해당 강의는 fastcampus 에서 ‘컴공 전공자 따라잡기 온라인 완주반’ 강의를 들으며 스스로의 학습을 위해 작성한 포스팅입니다. 문제가 된다면 연락 부탁드립니다.</em></p><br><h2 id="선점형-스케줄링-vs-비선점형-스케줄링"><a href="#선점형-스케줄링-vs-비선점형-스케줄링" class="headerlink" title="선점형 스케줄링 vs 비선점형 스케줄링"></a>선점형 스케줄링 vs 비선점형 스케줄링</h2><blockquote><p>기존에는 비선점형 스케줄러가 기본이었다. 선점형 스케줄러를 지원하는 운영체제, 그러지 못한 운영체제가 있었다.<br>현재, 시분할 시스템에서 선점형 스케줄러는 당연히 선행되는 개념이다.</p></blockquote><ul><li><dl><dt><strong>선점형 (Preemptive Scheduling)</strong></dt><dd>하나의 프로세스가 다른 프로세스 대신에 프로세서(CPU)를 차지할 수 있음</dd></dl><ul><li>blocking 상태나 종료된 상태가 아니더라도 프로세스 <code>running 중</code>에 스케줄러가 이를 중단시키고, 다른 프로세스로 교체 가능.</li><li>각 프로세스 응답시간 단축효과가 있지만 우선순위가 높은 프로세스들이 반복적으로 들어오는 경우 오버헤드를 초래할 수 있다.</li><li>대표적 스케줄링 기법 <ul><li>Round Robin Schedling</li></ul></li></ul></li><li><dl><dt><strong>비선점형 (Non-Preemptive Scheduling)</strong></dt><dd>하나의 프로세스가 끝나지 않으면 다른 프로세스는 프로세서(CPU)를 차지할 수 없음</dd></dl><ul><li>프로세스가 자발적으로 <code>blocking 상태</code>로 들어가거나 실행이 <code>종료된 상태일때만</code> 다른 프로세스로 교체 가능.</li><li>대표적 스케줄링 기법 <ul><li>FIFO(FCFS), SJF, Priority-based</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;선점형, 비선점형 무슨 차이일까?&lt;br&gt;&lt;code&gt;#preemptive&lt;/code&gt; &lt;code&gt;#non_preemptive&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
      <category term="scheduler" scheme="http://yoursite.com/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>✅ 프로세스 상태 기반 스케줄링</title>
    <link href="http://yoursite.com/2021/05/05/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%83%81%ED%83%9C%EC%99%80_%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81/"/>
    <id>http://yoursite.com/2021/05/05/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%83%81%ED%83%9C%EC%99%80_%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81/</id>
    <published>2021-05-05T11:40:25.000Z</published>
    <updated>2021-05-07T00:55:53.454Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><p><em>💬 해당 강의는 fastcampus 에서 ‘컴공 전공자 따라잡기 온라인 완주반’ 강의를 들으며 스스로의 학습을 위해 작성한 포스팅입니다. 문제가 된다면 연락 부탁드립니다.</em></p><br><h2 id="멀티-프로그래밍과-Wait"><a href="#멀티-프로그래밍과-Wait" class="headerlink" title="멀티 프로그래밍과 Wait"></a>멀티 프로그래밍과 Wait</h2><ul><li>멀티 프로그래밍 : CPU 활용도를 극대화하는 스케줄링 알고리즘</li><li>Wait : 예를 들면 I/O 장치나 저장매체로부터 파일 읽기를 기다리는 시간.</li></ul><h2 id="프로세스-상태기반-알고리즘"><a href="#프로세스-상태기반-알고리즘" class="headerlink" title="프로세스 상태기반 알고리즘"></a>프로세스 상태기반 알고리즘</h2><ul><li>여러 프로그램을 스케줄링 할 때 어떤 프로세스를 CPU 에 던져줄지 정하기위해 프로세스 상태를 확인한다.</li><li>프로세스 상태 큐<ul><li>Raady State Queue</li><li>Raady State Queue</li><li>Raady State Queue</li></ul></li><li>프로세스 주요 상태 (실제로는 더 세세하게 쪼개놓았다고 한다.)<ul><li><strong>ready state</strong> : CPU 에서 실행 가능상태 (실행 대기)</li><li><strong>running state</strong> : 현재 CPU 에서 실행 상태</li><li><strong>block state</strong> = <code>wait</code> : 특정 이벤트 발생 대기 상태 (eg. 저장매체에서 파일읽기가 종료되기를 기다리는 시간)</li><li><strong>idle state</strong> : CPU 가 활용되지 않는 상태 (모든 프로세스 wait)</li></ul></li></ul><h3 id="프로세스-상태-관계"><a href="#프로세스-상태-관계" class="headerlink" title="프로세스 상태 관계"></a>프로세스 상태 관계</h3><ul><li>raady, running, block states</li></ul><table><thead><tr><th>상태</th><th>설명</th></tr></thead><tbody><tr><td>Running -&gt; Block</td><td>Process blocks for input (특정 이벤트 대기)</td></tr><tr><td>Block -&gt; Ready</td><td>Process becomes available</td></tr><tr><td>Ready -&gt; Running</td><td>Scheduler picks another process</td></tr><tr><td>Running -&gt; Ready</td><td>Scheduler picks this process</td></tr></tbody></table><br><h3 id="프로세스-상태기반-알고리즘-예시"><a href="#프로세스-상태기반-알고리즘-예시" class="headerlink" title="프로세스 상태기반 알고리즘 예시"></a>프로세스 상태기반 알고리즘 예시</h3><blockquote><p>아래 그림이 조금 혼란스러울 수 있지만, 한 칸을 1초 라고 가정하여 상태기반 알고리즘이이 어떻게 수행되는지 순차적으로 그려보았다.<br>각 프로그램이 수행할 프로세스는 Queue 로 설명된다.<br><code>FIFO</code> 기법에 따라 순차적으로 <code>pop()</code> 되어 CPU 로 넘어간다. 그 프로세스는 <code>running</code> 상태.<br>해당 프로세스가 <code>wait</code> 라면 <code>block</code> 상태. 작업을 마친 프로세스는 종료되고, 남아있다면 다시 <code>ready</code> 로 넘어간다.<br>수행해야할 프로세스가 남아있지만, 해당 시간에 수행될 프로세스가 없다면, (모두 <code>block</code> 상태) 그 때 CPU 는 <code>Idle</code> 상태이다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/28856435/117147563-541ee800-adf0-11eb-95f2-40182e617062.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;프로세스 주요 상태와 선점vs비선점 스케줄링에 대하여 공부해보자.&lt;br&gt;&lt;code&gt;algorithm_by&lt;/code&gt; &lt;code&gt;process_state&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>✅ 스케줄링 알고리즘</title>
    <link href="http://yoursite.com/2021/05/04/%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    <id>http://yoursite.com/2021/05/04/%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</id>
    <published>2021-05-04T14:40:25.000Z</published>
    <updated>2021-05-11T01:52:08.020Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><p><em>💬 해당 강의는 fastcampus 에서 ‘컴공 전공자 따라잡기 온라인 완주반’ 강의를 들으며 스스로의 학습을 위해 작성한 포스팅입니다. 문제가 된다면 연락 부탁드립니다.</em></p><br><h1 id="스케줄링-알고리즘"><a href="#스케줄링-알고리즘" class="headerlink" title="스케줄링 알고리즘"></a>스케줄링 알고리즘</h1><blockquote><p>어느 순서대로 프로세스를 실행할까?</p></blockquote><ul><li>목표<ul><li>시분할 시스템: 프로세스 응답시간을 최소화.</li><li>멀티 프로그래밍: CPU 활용도를 높여서 프로세스를 빨리 실행</li></ul></li></ul><br><h2 id="프로세스-Process"><a href="#프로세스-Process" class="headerlink" title="프로세스? (Process)"></a>프로세스? (Process)</h2><ul><li><code>메모리</code>에 올려져서 실행중인 프로그램을 의미한다. : <code>폰노이만</code> 구조</li><li>작업, task, job 이라는 용어롸 혼용</li><li>응용 프로그램 != 프로세스</li><li>하나의 응용 프로그램은 여러개의 프로세스로가 상호작용하며 실행 할 수 있다.</li><li>간단한 C/C++ 프로그램을 만든다면 ?<ul><li>하나의 프로세스를 갖는 여러 프로그램을 만들어, 서로 통신하며 프로그램을 작성 하는 방법도 있다. (IPC 기법)</li></ul></li></ul><h2 id="스케줄러와-프로세스"><a href="#스케줄러와-프로세스" class="headerlink" title="스케줄러와 프로세스"></a>스케줄러와 프로세스</h2><blockquote><p><code>스케줄러</code>는 <code>프로세스 실행</code>을 관리한다.</p></blockquote><hr><h2 id="FIFO-스케줄러"><a href="#FIFO-스케줄러" class="headerlink" title="FIFO 스케줄러"></a>FIFO 스케줄러</h2><blockquote><p>프로세스가 저장매체를 읽거나 프린팅하는 작업 없이 CPU(프로세서)를 온전히 사용.</p></blockquote><ul><li>가장 간단한 스케줄러 (배치처리 시스템)</li><li>=FCFS (First Come First Served)</li></ul><h2 id="우선순위-기반-SJF-스케줄러"><a href="#우선순위-기반-SJF-스케줄러" class="headerlink" title="우선순위 기반 (SJF) 스케줄러"></a>우선순위 기반 (SJF) 스케줄러</h2><ul><li>SJF (Shortest Job First)<ul><li>수행시간이 가장 짧은 작업부터 처리</li></ul></li></ul><h2 id="Priority-Based-스케줄러"><a href="#Priority-Based-스케줄러" class="headerlink" title="Priority-Based 스케줄러"></a>Priority-Based 스케줄러</h2><ul><li>정적 우선순위 : 프로세스마다 우선순위를 미리 지정</li><li>동적 우선순위 : 스케줄러가 상황에 따라 우선순위를 동적으로 변경</li><li><code>Procss</code> [3(10), 2(20), 2(20), 2(20), 1(1)]<br>(괄호안 숫자는 미리 정한 우선순위)</li><li><code>CPU</code> 처리 순서<ul><li>2 <strong>(20)</strong> -&gt; 2 <strong>(20)</strong> -&gt; 2 <strong>(20)</strong> -&gt; 3 <strong>(10)</strong> -&gt; 1 <strong>(1)</strong></li></ul></li></ul><h2 id="Round-Robin-스케줄러"><a href="#Round-Robin-스케줄러" class="headerlink" title="Round Robin 스케줄러"></a>Round Robin 스케줄러</h2><ul><li>RR이라고 이야기 하기도 한다.</li><li>시분할 시스템을 위해 설계된 스케줄링 중 하나이며</li><li>프로세스들의 우선순위를 신경쓰지 않습니다.</li><li>다만 시분할 시스템처럼 최초 요청부터 순서대로 프로세서들에게 일정한 시간단위로 공평하게 CPU를 할당.</li><li>순서대로 공평하게 CPU를 할당해주기 때문에 그 시간에 프로세스가 완료되지 않을 경우 다시 뒤로 배치가 되서 차례를 기다린다.</li><li><code>Process</code> [3, 3, 2, 2, 2, 1]<table><thead><tr><th>RR Ready Queue</th><th>CPU</th></tr></thead><tbody><tr><td>[3, 2, 1]</td><td>[1]</td></tr><tr><td>[3, 2]</td><td>[1, 2]</td></tr><tr><td>[2, 3]</td><td>[1, 2, 3]</td></tr><tr><td>[3, 2]</td><td>[1, 2, 3, 2]</td></tr><tr><td>[2, 3]</td><td>[1, 2, 3, 2, 3]</td></tr><tr><td>[2]</td><td>[1, 2, 3, 2, 3, 2]</td></tr></tbody></table></li></ul><hr><br><h1 id="RTOS-VS-GPOS"><a href="#RTOS-VS-GPOS" class="headerlink" title="[+] RTOS VS GPOS"></a>[+] RTOS VS GPOS</h1><ul><li><code>General Purpose OS</code> (GPOS):<ul><li>프로세스 실행시간에 민감하지 않고, 일반적으로 사용되는 OS : Windows, Linux</li></ul></li><li><code>RealTime OS</code> (RTOS): 응용 프로그램 실시간 성능 보장을 목표로 하는 OS<ul><li>정확하게 프로그램 시작, 완료시간을 보장</li><li>Hardware RTOS, Software RTOS</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;스케줄링 알고리즘의 기본 종류와 사용.&lt;br&gt;&lt;code&gt;scheduling_algorithm&lt;/code&gt; &lt;code&gt;FIFO&lt;/code&gt; &lt;code&gt;SJF&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>🔅 운영체제의 역할 (2)</title>
    <link href="http://yoursite.com/2021/05/04/%EC%BB%B4%EA%B3%B5-%EB%94%B0%EB%9D%BC%EC%9E%A1%EA%B8%B0-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B5%AC%EC%A1%B0/"/>
    <id>http://yoursite.com/2021/05/04/%EC%BB%B4%EA%B3%B5-%EB%94%B0%EB%9D%BC%EC%9E%A1%EA%B8%B0-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B5%AC%EC%A1%B0/</id>
    <published>2021-05-04T14:37:51.000Z</published>
    <updated>2021-05-11T01:52:08.024Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><p><em>💬 해당 강의는 fastcampus 에서 ‘컴공 전공자 따라잡기 온라인 완주반’ 강의를 들으며 스스로의 학습을 위해 작성한 포스팅입니다. 문제가 된다면 연락 부탁드립니다.</em></p><br><h1 id="응용프로그램이란"><a href="#응용프로그램이란" class="headerlink" title="응용프로그램이란?"></a><strong>응용프로그램이란?</strong></h1><ul><li>프로그램 = 소프트웨어</li><li>소프트웨어 = 운영체제(시스템 소프트웨어), 응용프로그램 (엑셀, 파워포인트 등)</li><li>응용 프로그램 = Application = App</li></ul><h2 id="운영체제와-응용-프로그램간의-관계"><a href="#운영체제와-응용-프로그램간의-관계" class="headerlink" title="운영체제와 응용 프로그램간의 관계"></a>운영체제와 응용 프로그램간의 관계</h2><ul><li>운영체제는 하드웨어 시스템 자원(System Reource)를 관리</li><li>응용체제는 시스템 소프트웨어이다.</li><li>사용자와 컴퓨터 간의 커뮤니케이션 지원</li><li>운영체제는 응용 프로그램을 관리<ul><li>응용 프로그램을 실행시킨다.</li><li>응용 프로그램간의 <code>권한</code>을 관리</li><li>응용 프로그램을 사용하는 <code>사용자</code> 관리</li></ul></li><li>특정 응용프로그램이 하드웨어 자원을 독점하여 사용하는 것을 막는다.</li><li>응용 프로그램은 누구나 만들 수 있다. 즉, 운영체제는 비정상적으로 작동하는 프로그램을 제어한다.<ul><li>응용프로그램에 무한 반복문을 넣을경우.</li><li>응용 프로그램을 잘못 작성되어 프로그램 다운될 경우.</li><li>모든 파일이 삭제되는 코드가 사용될 경우. (권한/사용자 관리)</li></ul></li></ul><blockquote><p>운영체제의 목표 ?<br>사용자가 실행하는 응용프로그램이 적절하게 동작하도록 지원.<br>응용프로그램이 요청하는 시스템 리소스를 효율적으로 분배하고 지원하는 소프트웨어.</p></blockquote><hr><h2 id="운영체제는-어디에"><a href="#운영체제는-어디에" class="headerlink" title="운영체제는 어디에 ?"></a>운영체제는 어디에 ?</h2><ul><li>운영체제는 저장매체(SSD/HDD) 에 저장 된다.</li></ul><h2 id="컴퓨터를-키면"><a href="#컴퓨터를-키면" class="headerlink" title="컴퓨터를 키면?"></a>컴퓨터를 키면?</h2><ul><li>폰노이만 구조 : 모든 프로그램은 Memory 에 올라가게 된다. 하나씩 CPU 에 전달되면서 실행된다.</li></ul><br><h2 id="운영체제의-핵심-구조"><a href="#운영체제의-핵심-구조" class="headerlink" title="운영체제의 핵심 구조"></a>운영체제의 핵심 구조</h2><img  width="30%" src="https://user-images.githubusercontent.com/28856435/116893302-c619f480-ac6b-11eb-8849-f66627c325c5.jpg"><hr><br><h1 id="CPU-Protection-Rings"><a href="#CPU-Protection-Rings" class="headerlink" title="CPU Protection Rings"></a><strong>CPU Protection Rings</strong></h1><img width="400px" src="https://user-images.githubusercontent.com/28856435/117016719-f1651800-ad2d-11eb-88cc-571744d15042.png"/><br><ul><li>CPU의 두 가지 권한모드</li><li>사용자 모드 (user mode) : 응용 프로그램이 사용</li><li>커널 모드 (kernel mode) : OS가 사용, 특권 명령어와 작업 수행을 위한 자원에 접근가능.</li><li>Ring 0 (Kernal) ~ Ring 3 (user)</li></ul><h2 id="응용-프로그램과-운영체제"><a href="#응용-프로그램과-운영체제" class="headerlink" title="응용 프로그램과 운영체제"></a>응용 프로그램과 운영체제</h2><ul><li>우리가 만드는 프로그램은</li><li><code>사용자 영역</code> 에서 동작하기도하고 <code>커널 영역</code>(System Call 하위)에서 동작하기도 한다.<br>즉, 운영체제의 특권을 가지고 명령 및 작업을 수행한다.</li></ul><h2 id="시스템콜과-커널모드"><a href="#시스템콜과-커널모드" class="headerlink" title="시스템콜과 커널모드"></a>시스템콜과 커널모드</h2><ul><li>커널 모드에서만 실행가능한 기능들이 있다.</li><li>커널모드로 가려면 반드시 시스템콜을 거쳐야함.</li><li>시스템콜은 운영체제를 제공한다.</li></ul><h2 id="사용자-모드와-커널모드"><a href="#사용자-모드와-커널모드" class="headerlink" title="사용자 모드와 커널모드"></a>사용자 모드와 커널모드</h2><ul><li>응용프로그램이 전체 컴퓨터 시스템을 해지지 못함.</li><li>eg. 사용자모드(사용자) - 커널모드(은행)<ul><li>사용자가 은행에 계좌 생성을 요청하면, 은행의 특별한 권한으로 해당 사용자의 계좌를 만들어줌.</li></ul></li></ul><h2 id="응용-프로그래머-VS-시스템-프로그래머"><a href="#응용-프로그래머-VS-시스템-프로그래머" class="headerlink" title="응용 프로그래머 VS 시스템 프로그래머"></a>응용 프로그래머 VS 시스템 프로그래머</h2><ul><li>응용 프로그래머 : API (응용 프로그램) 사용자 프로그램</li><li>시스템 프로그래머 : 운영체제 및 시스템 프로그램, 하드웨어</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><ul><li>운영체제의 역할? <code>응용 프로그램 관리</code>, <code>시스템 자원 효율적 분배</code>.</li><li>응용 프로그램이란? 소프트웨어 (운영체제, 응용 프로그램)</li><li>운영체제는 <code>시스템콜</code> 제공</li><li>프로그래밍 언어별로 OS 기능을 활용하기 위해 시스템콜을 기반으로 API 제공</li><li>응용 프로그램이 필요로하는 자원을 제공하는 소프트웨어</li></ul><blockquote><p>응용 프로그램이 실행되어 운영체제 기능이 필요하면 시스템콜을 호출 하여 커널모드로 변경되어 OS 내부에서 해당 명령이 수행되고, 다시 사용자모드, 응용프로그램으로 돌아간다.</p></blockquote><h2 id="용어의미"><a href="#용어의미" class="headerlink" title="용어의미"></a>용어의미</h2><ul><li>kernel (OS kernel : OS 본연의 기능)<ul><li>(견과류) 알맹이</li><li>핵심</li></ul></li><li>shell<ul><li>(달걀, 견과류 등의) 껍데기</li><li>고동 껍데기</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;컴공 따라잡기 with fastCampus&lt;br&gt;운영체제의 역할부터 사용자가 어떻게 요청할 수 있는것인지 간단한 구조까지.&lt;br&gt;+커널모드와 사용자모드&lt;br&gt;&lt;code&gt;kernal&lt;/code&gt; &lt;code&gt;CPU_protect_rings&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>〰️ 운영체제의 스케줄링 기법</title>
    <link href="http://yoursite.com/2021/05/04/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81/"/>
    <id>http://yoursite.com/2021/05/04/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81/</id>
    <published>2021-05-04T13:23:32.000Z</published>
    <updated>2021-05-06T03:11:05.029Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><p><em>💬 해당 강의는 fastcampus 에서 ‘컴공 전공자 따라잡기 온라인 완주반’ 강의를 들으며 스스로의 학습을 위해 작성한 포스팅입니다. 문제가 된다면 연락 부탁드립니다.</em></p><br><h1 id="프로세스-스케줄링"><a href="#프로세스-스케줄링" class="headerlink" title="프로세스 스케줄링"></a>프로세스 스케줄링</h1><ul><li>배치 처리시스템</li><li>시분할 시스템</li><li>멀티 태스킹</li></ul><br><h2 id="배치처리-시스템"><a href="#배치처리-시스템" class="headerlink" title="배치처리 시스템"></a>배치처리 시스템</h2><ul><li>여러 응용 프로그램들이 순차적으로 자동 실행되도록 하는 시스템</li><li>문제점</li><li>시간이 긴 응용프로그램이 수행중일 경우 다음 프로그램 수행까지 많은 시간을 대기해야함. (응답시간 증가)</li><li>동시에 여러 작업을 할 수 없음. (동시성X)</li><li>다중 사용자를 지원해주지 않음. (다중성X)</li></ul><br><h2 id="시분할-시스템"><a href="#시분할-시스템" class="headerlink" title="시분할 시스템"></a>시분할 시스템</h2><ul><li>다중 사용자 지원을 위해 컴퓨터 응답시간을 최소화</li></ul><br><h2 id="멀티-태스킹"><a href="#멀티-태스킹" class="headerlink" title="멀티 태스킹"></a>멀티 태스킹</h2><ul><li>단일 CPU 에서 여러 응용 프로그램이 동시에 실행되는 것 <code>처럼</code> 보이도록 함.</li></ul><h2 id="실제-멀티-태스킹은-어떻게"><a href="#실제-멀티-태스킹은-어떻게" class="headerlink" title="실제 멀티 태스킹은 어떻게?"></a>실제 멀티 태스킹은 어떻게?</h2><ul><li>1000 ms = 1s</li><li>10~20 ms 단위로 실행 응용 프로그램이 바뀐다.</li><li>사용자는 동시에 실행되는 것 처럼 느낀다.</li></ul><br><h2 id="멀티-태스킹과-멀티-프로세싱"><a href="#멀티-태스킹과-멀티-프로세싱" class="headerlink" title="멀티 태스킹과 멀티 프로세싱"></a>멀티 태스킹과 멀티 프로세싱</h2><ul><li>멀티 태스킹 : <code>단일</code> CPU</li><li>멀티 프로세싱 : 하나의 응용프로그램을 <code>여러</code> CPU에서 병렬로 처리함으로써 <code>실행속도</code>를 극대화 한다.</li></ul><br><h2 id="멀티-프로그래밍"><a href="#멀티-프로그래밍" class="headerlink" title="멀티 프로그래밍"></a>멀티 프로그래밍</h2><ul><li>최대한 CPU 를 많이 활용하도록 하는 시스템</li><li>시간 대비 <code>CPU 활용도</code> 높임.</li><li>응용 프로그램을 짧은 시간 안에 실행완료 시킬 수 있음.</li></ul><blockquote><p>응용 프로그램은 CPU 만 온전히 쓰는것이 아니다.</p><ul><li>응용 프로그램 실행 중 파일을 읽는다.</li><li>응용 프로그램이 실행되다가 프린팅을 한다.</li></ul></blockquote><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><blockquote><p>실제로는 시분할 시스템, 멀티 프로그래밍, 멀티 태스킹이 유사한 의미로 통용된다.</p></blockquote><ul><li>배치 처리 시스템</li><li>시분할 시스템 (다중사용자 지원, 응답시간 최소화)</li><li>멀티 태스킹 (동시 실행되는것 처럼 보임)</li><li>멀티 프로세싱 (여러 CPU 가 하나의 프로그램을 병렬로 처리)</li><li>멀티 프로그래밍 : 시간대비 CPU 활용도를 최대한으로 높임.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;세 가지 프로세스 스케줄링 기법을 배운다.&lt;br&gt;&lt;code&gt;batch&lt;/code&gt; &lt;code&gt;multi_tasking&lt;/code&gt; &lt;code&gt;time_sharing&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
      <category term="scheduling" scheme="http://yoursite.com/tags/scheduling/"/>
    
  </entry>
  
  <entry>
    <title>🔅 운영체제의 역할 (1)</title>
    <link href="http://yoursite.com/2021/05/03/%EC%BB%B4%EA%B3%B5-%EB%94%B0%EB%9D%BC%EC%9E%A1%EA%B8%B0-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%97%AD%ED%95%A0/"/>
    <id>http://yoursite.com/2021/05/03/%EC%BB%B4%EA%B3%B5-%EB%94%B0%EB%9D%BC%EC%9E%A1%EA%B8%B0-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%97%AD%ED%95%A0/</id>
    <published>2021-05-03T14:14:00.000Z</published>
    <updated>2021-05-11T01:52:08.026Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><p><em>💬 해당 강의는 fastcampus 에서 ‘컴공 전공자 따라잡기 온라인 완주반’ 강의를 들으며 스스로의 학습을 위해 작성한 포스팅입니다. 문제가 된다면 연락 부탁드립니다.</em></p><br><h2 id="운영체제-역할"><a href="#운영체제-역할" class="headerlink" title="운영체제 역할"></a>운영체제 역할</h2><h3 id="1-시스템-자원-관리자-System-Resource"><a href="#1-시스템-자원-관리자-System-Resource" class="headerlink" title="1) 시스템 자원 관리자 (System Resource)"></a>1) 시스템 자원 관리자 (System Resource)</h3><ul><li>Operating System , OS.<ul><li>CPU(중앙처리장치), Memory(DRAM,RAM)</li><li>I/O Devices(입출력장치)</li><li>Monitor, Mouse, Keyboard, Network</li><li>저장매체 : SSD, HDD (하드디스크)</li></ul></li></ul><blockquote><p>컴퓨터 하드웨어는 스스로 할 수 있는것이 없다.</p></blockquote><ol><li>CPU : 스스로 용량을 얼마나 사용할지 결정못함.</li><li>Memory : 각 프로그램이 어느 주소에 저장되어야 하는지, 확보할 메모리공간을 자체적으로 결정 못함.</li><li>저장매체(HDD, SSD) : how, where? 저장할지 모름,</li><li>키보드/마우스 : 스스로 표시불가.</li></ol><blockquote><p>즉, OS 없이는 컴퓨터는 동작하지 않는다.<br>How did we ever run Computer without OS?</p></blockquote><h3 id="2-사용자와-컴퓨터간의-커뮤니케이션-지원"><a href="#2-사용자와-컴퓨터간의-커뮤니케이션-지원" class="headerlink" title="2) 사용자와 컴퓨터간의 커뮤니케이션 지원"></a>2) 사용자와 컴퓨터간의 커뮤니케이션 지원</h3><h3 id="3-컴퓨터-하드웨어와-응용프로그램의-제어"><a href="#3-컴퓨터-하드웨어와-응용프로그램의-제어" class="headerlink" title="3) 컴퓨터 하드웨어와 응용프로그램의 제어"></a>3) 컴퓨터 하드웨어와 응용프로그램의 제어</h3><br><h2 id="대표적인-운영체제"><a href="#대표적인-운영체제" class="headerlink" title="대표적인 운영체제"></a>대표적인 운영체제</h2><ul><li>Windows OS, Mac OS, UNIX</li><li>UNIX OS<ul><li>UNIX 계열 OS</li><li>UNIX 와 사용법이나, OS와 구조가 유사 (가장 대표적으로 LINUX)</li><li>LINUX OS</li></ul></li></ul><hr><h2 id="도서관으로-비유"><a href="#도서관으로-비유" class="headerlink" title="도서관으로 비유"></a>도서관으로 비유</h2><p>운영체제 -도서관<br>응용프로그램 - 시민<br>컴퓨터 하드웨어 - 책<br>운영체제의 역할</p><ul><li>시민은 도서관에 원하는 책(자원) 요청</li><li>도서관은 적절한 책(자원)을 찾아서 제공</li><li>기한이 다 되면, 도서관이 책(자원)을 회수.</li></ul><hr><br><h2 id="응용-프로그램-운영체제-컴퓨터-하드웨어의-관계"><a href="#응용-프로그램-운영체제-컴퓨터-하드웨어의-관계" class="headerlink" title="응용 프로그램, 운영체제, 컴퓨터 하드웨어의 관계"></a>응용 프로그램, 운영체제, 컴퓨터 하드웨어의 관계</h2><ul><li>운영체제는 응용프로그램이 요청하는 메모리를 허가 및 분배.</li><li>운영체제는 응용프로그램이 요청하는 CPU 시간을 제공</li><li>운영체제는 응용 프로그래밈이 요청하는 IO Devices 사용을 허가</li></ul><blockquote><p>User&lt;-&gt;Application&lt;-&gt;OS&lt;-&gt;Hardware</p></blockquote><h2 id="운영체제는-사용자-인터페이스-제공"><a href="#운영체제는-사용자-인터페이스-제공" class="headerlink" title="운영체제는 사용자 인터페이스 제공"></a>운영체제는 사용자 인터페이스 제공</h2><ul><li>쉘 (Shell)<ul><li>사용자가 운영체제 기능, 서비스 조작 가능하게 인터페이스 제공. 쉘도 하나의 응용프로그램.</li><li>터미널환경(CUI)과 GUI 환경 제공</li></ul></li></ul><h2 id="운영체제는-응용-프로그램을-위해서도-인터페이스를-제공한다"><a href="#운영체제는-응용-프로그램을-위해서도-인터페이스를-제공한다" class="headerlink" title="운영체제는 응용 프로그램을 위해서도 인터페이스를 제공한다"></a>운영체제는 응용 프로그램을 위해서도 인터페이스를 제공한다</h2><ul><li>API (Application Programming Interface)<ul><li>함수로 제공</li><li>eg. open()</li></ul></li><li>보통은 라이브러리 형태로 제공<ul><li>C library</li></ul></li></ul><h3 id="시스템-콜-System-Call"><a href="#시스템-콜-System-Call" class="headerlink" title="시스템 콜 (System Call)"></a>시스템 콜 (System Call)</h3><ul><li>운영체제 기능을 호출하는 함수</li><li>운영체제가 운영체제의 각 기능을 사용할 수 있도록 시스템 콜이라는 명령, 함수 제공</li><li>상위 API 내부에는 시스템콜을 호출하는 형태로 만들어지는 경우가 대부분.<br>eg. POSIX API(유닉스/리눅스), 윈도우API</li></ul><blockquote><p>운영체제는 사용자든, 응용프로그램이든 외부에서 요청하면 시스템콜을 제공한다. 운영체제 입장에서의 기능을 정의해놓은 것이 시스템콜(System Call)이기 때문에 프로그래머 입장에서 좀더 쉽게 사용할 수 있도록 Library or API 를 제공한다. 이것을 기반으로 해서 Application 이나 shell 을 만드는것이고 이를 사용자가 사용할 수 있는 것이다.<br>응용 프로그램은 라이브러리를 사용하고, 라이브러리는 시스템 자원이 필요할 경우, 내부적으로 시스템 콜을 호출할 수 있다.</p></blockquote><hr><br><h2 id="운영체제를-만든다면"><a href="#운영체제를-만든다면" class="headerlink" title="운영체제를 만든다면?"></a>운영체제를 만든다면?</h2><ol><li>운영체제를 개발한다. (kernal)</li><li>시스템 콜을 개발</li><li>C API (Library) 개발</li><li>Shell 프로그램 개발</li></ol><h2 id="운영체제-amp-시스템콜-amp-API"><a href="#운영체제-amp-시스템콜-amp-API" class="headerlink" title="운영체제 &amp; 시스템콜 &amp; API"></a>운영체제 &amp; 시스템콜 &amp; API</h2><ul><li>API : 각 언어별 운영체제 기능 호출 인터페이스 함수. (각 언어별 인터페이스)</li><li>SystemCall : 운영체제 기능을 호출하는 함수</li></ul><br><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><ul><li>운영체제는 컴퓨터 하드웨어와 응용프로그램을 관리한다.</li><li>사용자 인터페이스 제공을 위해 쉘 프로그램을 제공한다.</li><li>응용프로그램은 운영체제 기능을 요청하기 위해 운영체제의 시스템콜을 사용한다.<ul><li>보통 시스템콜을 직접 사용하기보다는 해당 시스템콜을 사용해서 만든 각 언어별 라이브러리(API)를 사용한다.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;컴공 따라잡기 with fastCampus&lt;br&gt;운영체제의 역할부터 사용자가 어떻게 요청할 수 있는것인지 간단한 구조까지.&lt;br&gt;&lt;code&gt;OS&lt;/code&gt; &lt;code&gt;system_resource&lt;/code&gt; &lt;code&gt;system_call&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Servlet 정의와 생명주기, Servlet 컨테이너</title>
    <link href="http://yoursite.com/2021/04/30/Servlet/"/>
    <id>http://yoursite.com/2021/04/30/Servlet/</id>
    <published>2021-04-30T01:26:43.000Z</published>
    <updated>2021-05-11T01:52:08.015Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><p>요즘 당연하게 생각하고 사용해왔던 개념, 기능들을 찾아보며 정리중이다.<br>Java, RESTful API 개발을 하고 있지만, 내부적으로 어떻게 돌아가는지 개념적인 부분을 다시 한번 짚고자 한다.</p><h3 id="Servlet-이란"><a href="#Servlet-이란" class="headerlink" title="Servlet 이란?"></a>Servlet 이란?</h3><blockquote><p>서버사이드에서 클라이언트 요청을 처리하고 그 결과를 응답해주는 규칙.</p></blockquote><h4 id="Servlet-특징"><a href="#Servlet-특징" class="headerlink" title="Servlet 특징"></a>Servlet 특징</h4><ul><li>동적 웹페이지를 작성하기 위해 나왔다.</li><li>서버쪽에서 실행되면서 클라이언트의 요청에 따라 동적으로 일을 처리하는 <code>자바 클래스</code> 이다.</li><li>Servlet</li></ul><h3 id="Servlet-컨테이너"><a href="#Servlet-컨테이너" class="headerlink" title="Servlet 컨테이너"></a>Servlet 컨테이너</h3><blockquote><p>Servlet 클래스로 작성된 프로그램을 실행하고, 관리해준다.</p></blockquote><h4 id="Servlet-컨테이너-역할"><a href="#Servlet-컨테이너-역할" class="headerlink" title="Servlet 컨테이너 역할"></a>Servlet 컨테이너 역할</h4><ul><li>웹서버와의 통신을 지원해준다. 서블릿 컨테이너는 소켓을 만들고  listen, accept 등의 기능을 api 로 제공하여 개발자가 비지니스 로직에만 집중할 수 있도록 해준다.</li><li>서블릿의 생명주기를 관리한다. 실행부터 종료까지. </li></ul><h3 id="Servlet-작동흐름"><a href="#Servlet-작동흐름" class="headerlink" title="Servlet 작동흐름"></a>Servlet 작동흐름</h3><blockquote><ol><li>클라이언트가 HTTP Request 를 Servlet Container 로 전송.</li><li>Servlet Container 는 HttpServletRequest, HttpServletResponse 두 객체 생성</li><li></li></ol></blockquote><h3 id="Servlet-생명주기"><a href="#Servlet-생명주기" class="headerlink" title="Servlet 생명주기"></a>Servlet 생명주기</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Servlet 개념 잡기 !&lt;br&gt;💬 &lt;em&gt;작성중&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Java" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>Java Service &amp; ServiceImpl 국룰? 왜 이렇게 쓰지?</title>
    <link href="http://yoursite.com/2021/04/29/Service-ServiceImpl/"/>
    <id>http://yoursite.com/2021/04/29/Service-ServiceImpl/</id>
    <published>2021-04-29T13:28:01.000Z</published>
    <updated>2021-05-04T01:50:35.601Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br><p>익히 경험한 Spring Boot Project 형식. MVC 구조이며 Service 와 DAO 를 인터페이스로 만들고 구현체는 따로 있다.<br>다른 기능이 생기면 Service 와 Dao 의 인터페이스를 생성하고 1:1로 구현체를 또 만들어낸다.<br>기존 샘플 코드들이 이렇게 되어있기에 그저 생각없이 만들어 썼는데, 이제서야 그 이유가 궁금해졌다.</p><br><h3 id="인터페이스-Interface"><a href="#인터페이스-Interface" class="headerlink" title="인터페이스 Interface"></a>인터페이스 Interface</h3><p>Service 로직은 Controller 에서 호출된다. 즉, Service 시점에서 보면 외부에서 어떤 <code>기능</code> 을 사용한다는 것이다.<br>사실, 코드도 하나의 <code>잘 만들어진 상품</code> 처럼 구현되어야 한다고 생각한다. 누구나 쉽게 이해할 수 있는건 물론이고, 구조와 기능이 잘 정리되어 있어야 한다. 그래서 Service 를 Interface 로 만들어, 해당 서비스에서 수행하는 기능들을 먼저 정의해둔 것이다. 또한, 이후에 같은 인터페이스를 갖는 구현체가 추가될지도 모르기 때문에 유지보수 측면에서 그 확장성을 열어두는 것 같다. 예를 들어 <code>Walking</code> 이라는 Interface 가 있다면, 각각 <code>Jhon</code>, <code>Dog</code> 라는 객체로 다르게 구현되어질 수 있다는 사실이다.</p><br><h3 id="단일책임의-원칙-SRP"><a href="#단일책임의-원칙-SRP" class="headerlink" title="단일책임의 원칙 SRP."></a>단일책임의 원칙 SRP.</h3><p>모을것은 모으고, 떼어버릴것은 떼어내자는, <code>SRP-단일책임의 원칙</code>(Single Responsibility Principle). 하나의 클래스는 하나의 책임만 가져야한다는 원칙이다.<br>즉, 클래스 간의 응집력은 커지고 결합도는 낮아져야 한다는 말이다.</p><blockquote><p>단일 책임 원칙을 지킨 경우에 클래스에 대한 외부 영향도를 최소화 할 수 있으며, 결국 유지보수나 확장 면에서 보다 효율적일 수 있다.</p></blockquote><br><h3 id="그러니까"><a href="#그러니까" class="headerlink" title="그러니까,"></a>그러니까,</h3><p>이미 우리가 잘 알고 있는 객체지향의 원리에서 비롯된 관습인듯하다. 원활한 유지보수가 가능한 ‘상품’ 을 만들어야 하기 때문에, 우리는 mvc 구조나 OOP 를 이용해 그 ‘상품’을 잘 설계되고 구조화된 코드로 제공한다. 이러한 것들을 준수하기 위해 Service 와 ServiceImpl 이 어느새 당연한 관습처럼 자리잡게 되어있는지 모른다.</p><br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://doorbw.tistory.com/236" target="_blank" rel="noopener">https://doorbw.tistory.com/236</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Service 를 인터페이스로 만드는 이유?&lt;br&gt;마치 국룰처럼 1:1로 만드는 이유가 무엇인지 생각해봤다.&lt;br&gt;&lt;code&gt;java&lt;/code&gt; &lt;code&gt;interface&lt;/code&gt; &lt;code&gt;SRP&lt;/code&gt; &lt;code&gt;OOP&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ TIL" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-TIL/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="mvc" scheme="http://yoursite.com/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>마크다운 유용한 문법</title>
    <link href="http://yoursite.com/2021/04/28/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%AC%B8%EB%B2%95/"/>
    <id>http://yoursite.com/2021/04/28/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%AC%B8%EB%B2%95/</id>
    <published>2021-04-27T16:28:21.000Z</published>
    <updated>2021-04-28T06:21:58.254Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br><h2 id="🧐-마크다운-공백-만들기"><a href="#🧐-마크다운-공백-만들기" class="headerlink" title="🧐 마크다운 공백 만들기"></a>🧐 마크다운 공백 만들기</h2><br><h4 id="HTML-특수코드-nbsp"><a href="#HTML-특수코드-nbsp" class="headerlink" title="HTML 특수코드 &nbsp;"></a>HTML 특수코드 &nbsp;</h4><p>nbsp 의 약자는 <code>Non-breaking-space</code> 로, 입력한 만큼 공백이 생성.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">띄어쓰기 여러번 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 시도</span><br></pre></td></tr></table></figure><ul><li>띄어쓰기 여러번 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 시도</li></ul><br><h4 id="전각"><a href="#전각" class="headerlink" title="전각"></a>전각</h4><p>아래 대괄호 안의 전각(2바이트)을 복사해서 사용하면 한번에 큰 공백을 만들 수 있다.<br>[　]</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">공백　공백</span><br></pre></td></tr></table></figure><ul><li>공백 　　공백</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;마크다운(Markdown) 유용한 문법 Continuous Updating&lt;br&gt;&lt;code&gt;#마크다운&lt;/code&gt; &lt;code&gt;#공백&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ TIL" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>알고리즘 &amp; 빅오 표기법</title>
    <link href="http://yoursite.com/2021/04/28/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%86%8C%EA%B0%9C-%EB%B9%85%EC%98%A4/"/>
    <id>http://yoursite.com/2021/04/28/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%86%8C%EA%B0%9C-%EB%B9%85%EC%98%A4/</id>
    <published>2021-04-27T15:54:31.000Z</published>
    <updated>2021-04-30T04:58:08.793Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br><h3 id="많이-사용되는-빅오-실행시간"><a href="#많이-사용되는-빅오-실행시간" class="headerlink" title="많이 사용되는 빅오 실행시간"></a>많이 사용되는 빅오 실행시간</h3><p>아래 가장 기본적이고 흔한 실행시간이다. 몇 알고리즘은 빅오 표기법으로 표시할 수 없는 경우도 있다고 한다.</p><ul><li>O(log n) 로그시간 : 이진탐색</li><li>O(n) 선형시간 : 단순탐색</li><li>O(n * log n) : 퀵 정렬과 같이 빠른 알고리즘</li><li>O(n<sup>2</sup>) : 선택 정렬과 같이 느린 알고리즘</li><li>O(n!) : 정~말 느린 알고리즘 (외판원 문제)</li></ul><blockquote><p>빠름 | 　 O(log n) - O(n) - O(n * log n) - O(n<sup>2</sup>) - O(n!) 　 | 느림</p></blockquote><br><h3 id="알고리즘-기억해야할-사항"><a href="#알고리즘-기억해야할-사항" class="headerlink" title="알고리즘 기억해야할 사항"></a>알고리즘 기억해야할 사항</h3><ul><li>알고리즘의 속도는 <code>연산횟수</code>가 어떻게 증가하는지!? 로 측정. <del>시간이 아님.</del></li><li><code>연산횟수</code> 의 증감으로 데이터의 크기가 늘어날 때 알고리즘의 실행속도가 얼마나 즘감하는지 알 수 있다.</li><li>즉, O(log n)는 O(n) 보다 빠르며, 찾으려는 데이터 수가 늘어나면 상대적으로 더 빨라진다.</li></ul><h3 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h3><blockquote><p>128 개의 이름이 정렬되어있는 리스트가 있습니다. 이진탐색으로 찾을 때 필요한 최대 추측 횟수는?<br> 　: O(log n<sup>128</sup>) = 7<br>위 리스트의 크기가 두배가 된다면 최대 추측 횟수는?<br> 　: O(log n<sup>256</sup>) = 8<br> 　+크기가 두배가 된다고 횟수도 두배가 되는것이 아니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;정확히 다시 짚고가는 알고리즘, 빅오 표기법까지.&lt;br&gt;&lt;code&gt;Big-O&lt;/code&gt; &lt;code&gt;알고리즘&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
      <category term="bigO" scheme="http://yoursite.com/tags/bigO/"/>
    
  </entry>
  
  <entry>
    <title>💻 Linux 빈 파일생성을 위한 cat, cp 성능비교 및 strace</title>
    <link href="http://yoursite.com/2020/10/29/Linux-%EB%B9%88%ED%8C%8C%EC%9D%BC%EC%83%9D%EC%84%B1/"/>
    <id>http://yoursite.com/2020/10/29/Linux-%EB%B9%88%ED%8C%8C%EC%9D%BC%EC%83%9D%EC%84%B1/</id>
    <published>2020-10-29T02:03:52.000Z</published>
    <updated>2020-10-29T03:21:17.154Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="cp-dev-null-filename-VS-cat-dev-null-gt-gt-filename"><a href="#cp-dev-null-filename-VS-cat-dev-null-gt-gt-filename" class="headerlink" title="cp /dev/null {filename} VS cat /dev/null&gt;&gt;{filename}"></a>cp /dev/null {filename} VS cat /dev/null&gt;&gt;{filename}</h2><p>두 명령어의 성능을 비교하기 위해 <code>strace</code> 명령을 사용했다.</p><blockquote><p>strace : 특정 프로그램의 시스템 콜과 시그널을 추적하는 명령<br>명령어 추적 결과, ✔️cat 의 성능이 더 좋다는 사실.</p></blockquote><br/><h3 id="strace-결과-cat-dev-null-gt-gt-filename"><a href="#strace-결과-cat-dev-null-gt-gt-filename" class="headerlink" title="strace 결과 : cat /dev/null &gt;&gt; {filename}"></a>strace 결과 : cat /dev/null &gt;&gt; {filename}</h3><div style="border: 1px solid #CACACA; border-radius: 0.5em; padding: 0.1em"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; strace -c cat dev&#x2F;null&gt;&gt; access_test.log   </span><br><span class="line">cat: dev&#x2F;null: No such file or directory</span><br><span class="line">% time     seconds  usecs&#x2F;call     calls    errors syscall</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">  0.00    0.000000           0         3           read</span><br><span class="line">  0.00    0.000000           0         4           write</span><br><span class="line">  0.00    0.000000           0        11         7 open</span><br><span class="line">  0.00    0.000000           0         6           close</span><br><span class="line">  0.00    0.000000           0         5           fstat</span><br><span class="line">  0.00    0.000000           0        10           mmap</span><br><span class="line">  0.00    0.000000           0         3           mprotect</span><br><span class="line">  0.00    0.000000           0         2           munmap</span><br><span class="line">  0.00    0.000000           0         3           brk</span><br><span class="line">  0.00    0.000000           0         1         1 access</span><br><span class="line">  0.00    0.000000           0         1           execve</span><br><span class="line">  0.00    0.000000           0         1           arch_prctl</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.000000                    50         8 total</span><br></pre></td></tr></table></figure></div><br/><div style="border: 1px solid #CACACA; border-radius: 0.5em; padding: 0.1em"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; strace -e open cat dev&#x2F;null&gt;&gt; access_test.log   </span><br><span class="line">open(&quot;&#x2F;etc&#x2F;ld.so.cache&quot;, O_RDONLY)      &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;lib64&#x2F;libc.so.6&quot;, O_RDONLY)      &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;lib&#x2F;locale&#x2F;locale-archive&quot;, O_RDONLY) &#x3D; 3</span><br><span class="line">open(&quot;dev&#x2F;null&quot;, O_RDONLY)              &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">cat: dev&#x2F;nullopen(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;locale.alias&quot;, O_RDONLY|O_CLOEXEC) &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en_US.UTF-8&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en_US.utf8&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en_US&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en.UTF-8&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en.utf8&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">: No such file or directory</span><br><span class="line">+++ exited with 1 +++</span><br></pre></td></tr></table></figure></div><br/><h3 id="strace-결과-cp-dev-null-filename"><a href="#strace-결과-cp-dev-null-filename" class="headerlink" title="strace 결과 : cp /dev/null {filename}"></a>strace 결과 : cp /dev/null {filename}</h3><div style="border: 1px solid #CACACA; border-radius: 0.5em; padding: 0.1em"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt; strace -c cp dev&#x2F;null access_test.log   </span><br><span class="line">cp: cannot stat &#96;dev&#x2F;null&#39;: No such file or directory</span><br><span class="line">% time     seconds  usecs&#x2F;call     calls    errors syscall</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">  0.00    0.000000           0        11           read</span><br><span class="line">  0.00    0.000000           0         4           write</span><br><span class="line">  0.00    0.000000           0        23        11 open</span><br><span class="line">  0.00    0.000000           0        15           close</span><br><span class="line">  0.00    0.000000           0         2         1 stat</span><br><span class="line">  0.00    0.000000           0        12           fstat</span><br><span class="line">  0.00    0.000000           0        27           mmap</span><br><span class="line">  0.00    0.000000           0        15           mprotect</span><br><span class="line">  0.00    0.000000           0         3           munmap</span><br><span class="line">  0.00    0.000000           0         3           brk</span><br><span class="line">  0.00    0.000000           0         2           rt_sigaction</span><br><span class="line">  0.00    0.000000           0         1           rt_sigprocmask</span><br><span class="line">  0.00    0.000000           0         1         1 access</span><br><span class="line">  0.00    0.000000           0         1           execve</span><br><span class="line">  0.00    0.000000           0         1           getrlimit</span><br><span class="line">  0.00    0.000000           0         1           geteuid</span><br><span class="line">  0.00    0.000000           0         1           statfs</span><br><span class="line">  0.00    0.000000           0         1           arch_prctl</span><br><span class="line">  0.00    0.000000           0         2         1 futex</span><br><span class="line">  0.00    0.000000           0         1           set_tid_address</span><br><span class="line">  0.00    0.000000           0         1           set_robust_list</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.000000                   128        14 total</span><br></pre></td></tr></table></figure></div><br/><div style="border: 1px solid #CACACA; border-radius: 0.5em; padding: 0.1em"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; strace -e open cp dev&#x2F;null access_test.log  </span><br><span class="line">open(&quot;&#x2F;etc&#x2F;ld.so.cache&quot;, O_RDONLY)      &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;lib64&#x2F;libselinux.so.1&quot;, O_RDONLY) &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;lib64&#x2F;librt.so.1&quot;, O_RDONLY)     &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;lib64&#x2F;libacl.so.1&quot;, O_RDONLY)    &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;lib64&#x2F;libattr.so.1&quot;, O_RDONLY)   &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;lib64&#x2F;libc.so.6&quot;, O_RDONLY)      &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;lib64&#x2F;libdl.so.2&quot;, O_RDONLY)     &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;lib64&#x2F;libpthread.so.0&quot;, O_RDONLY) &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;proc&#x2F;filesystems&quot;, O_RDONLY)     &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;lib&#x2F;locale&#x2F;locale-archive&quot;, O_RDONLY) &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;locale.alias&quot;, O_RDONLY|O_CLOEXEC) &#x3D; 3</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en_US.UTF-8&#x2F;LC_MESSAGES&#x2F;coreutils.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en_US.utf8&#x2F;LC_MESSAGES&#x2F;coreutils.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en_US&#x2F;LC_MESSAGES&#x2F;coreutils.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en.UTF-8&#x2F;LC_MESSAGES&#x2F;coreutils.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en.utf8&#x2F;LC_MESSAGES&#x2F;coreutils.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en&#x2F;LC_MESSAGES&#x2F;coreutils.mo&quot;, O_RDONLY) &#x3D; 3</span><br><span class="line">cp: cannot stat &#96;dev&#x2F;null&#39;open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en_US.UTF-8&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en_US.utf8&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en_US&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en.UTF-8&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en.utf8&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;usr&#x2F;share&#x2F;locale&#x2F;en&#x2F;LC_MESSAGES&#x2F;libc.mo&quot;, O_RDONLY) &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">: No such file or directory</span><br><span class="line">+++ exited with 1 +++</span><br></pre></td></tr></table></figure></div><br/><h2 id="결과-비교"><a href="#결과-비교" class="headerlink" title="결과 비교"></a>결과 비교</h2><p>💡 위 결과를 눈대중으로만 봐도 <code>cat</code> 은 적은 양의 라이브러리를 참조하며, open 하는 파일의 횟수도 상대적으로 적다.<br>그에 반해 <code>cp</code> 는 <code>cat</code>보다 많은 양의 라이브러리를 참조하는것을 알 수 있으며, open file 도 많고, system call 또한 상대적으로 빈번하게 일어난다.</p><hr><br/><h2 id="Bash-에서-파일-생성법"><a href="#Bash-에서-파일-생성법" class="headerlink" title="Bash 에서 파일 생성법"></a>Bash 에서 파일 생성법</h2><p>그래서 <code>cat</code> 을 파일생성에 사용하기로 했다.<br>사용법은 위에서 strace 시험에서 쓰인 명령어 처럼 하면된다.</p><blockquote><p>cat dev/null&gt;&gt; {filename}</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📁 vi 에서 파일 생성법 배우기.&lt;br&gt;Bash 실행파일을 만들다가 로그를 찍기위해 찾아보게 되었습니다.&lt;br&gt;&lt;code&gt;linux&lt;/code&gt; &lt;code&gt;strace&lt;/code&gt; &lt;code&gt;cat&lt;/code&gt; &lt;code&gt;cp&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Linux" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="vi" scheme="http://yoursite.com/tags/vi/"/>
    
      <category term="bash" scheme="http://yoursite.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>⚙️ 운영체제(2) 컴퓨터 구조</title>
    <link href="http://yoursite.com/2020/10/19/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-2-%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/"/>
    <id>http://yoursite.com/2020/10/19/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-2-%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/</id>
    <published>2020-10-19T02:31:21.000Z</published>
    <updated>2020-10-19T03:27:01.715Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><p><strong><em>앞서서.. 운영체제 역할은 뭐라고 했었나?</em></strong><br>하드웨어를 관리하는 일.</p><p><strong><em>어떻게?</em></strong><br>운영체제가 하드웨어를 알지 못해도 쉽게 사용할 수 있도록,<br>하드웨어의 효율적인 일처리, 최대의 성능을 발휘할 수 있도록 한다.</p><p><strong><em>그래서,</em></strong><br>운영체제-하드웨어 함께 다니는 이 둘 때문에 <code>컴퓨터 구조</code>는 당연히, 알아야 한다고.</p><hr><br/><center><strong>우리가 알아야 할 것들</strong></center><img width="300" src="https://user-images.githubusercontent.com/28856435/96395180-e538c380-11fe-11eb-8743-0c13568964f4.png"><center><strong>프로그램 실행 기본 플로우</strong></center><center>Fetch > Decode > Execution</center><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><blockquote><p>중앙처리 장치로 모든 연산, 명령 담당. 컴퓨터의 뇌.<br><code>CPU 를 어떻게 관리하는가?</code></p></blockquote><br/><h2 id="ALU-Arithtic-Logic-Unit"><a href="#ALU-Arithtic-Logic-Unit" class="headerlink" title="ALU (Arithtic Logic Unit)"></a>ALU (Arithtic Logic Unit)</h2><blockquote><p>연산 담당하는 주체. 산술, 논리 연산</p></blockquote><br/><h2 id="Control-Unit"><a href="#Control-Unit" class="headerlink" title="Control Unit"></a>Control Unit</h2><blockquote><p>CPU 가 처리해야 할 명령어들을 해석. 그 결과에 따라 적절한 신호를 CPU의 다른 블록에 전송.</p></blockquote><br/><h2 id="메인메모리"><a href="#메인메모리" class="headerlink" title="메인메모리"></a>메인메모리</h2><blockquote><p><strong>램(RAM)</strong> : 컴파일 완료된 소스가 올라가서 실행되는 영역.<br>프로그램 실행을 위해 존재하는 메모리.<br><code>메모리를 어떻게 관리하는가?</code></p></blockquote><br/><h2 id="장치제어기-I-O-Controller-Device-Contorller"><a href="#장치제어기-I-O-Controller-Device-Contorller" class="headerlink" title="장치제어기 (I/O Controller = Device Contorller)"></a>장치제어기 (I/O Controller = Device Contorller)</h2><blockquote><p>입력/출력/저장 기능을 하는 주변장치를 인식하여 제어해준다.<br>(모니터, 프린터, 마우스, 키보드, USB 따위들)</p></blockquote><p>주변장치들은 플러그와 소켓을 통해 연결되는데, 소켓과 Device Controller와 연결되어 있다.</p><p>어떤 장치를 연결하면 드라이버를 다운 받아야 한다. 이 드라이버는 운영체제가 장치와 호환가능하도록 해주는 하나의 코드이며, 이 코드를 디바이스 컨트롤러가 인식하는 것.</p><ul><li>Instruction Register(IR) : CPU의 명령을 저장.</li><li>Data Register(IR) : 값을 읽어옴.<br><code>I/O 장치를 어떻게 관리하는가?</code></li></ul><br/><h2 id="입출력버스"><a href="#입출력버스" class="headerlink" title="입출력버스"></a>입출력버스</h2><blockquote><p><strong>컴퓨터를 구성하는 요소들 간의 데이터 통로</strong></p></blockquote><ul><li>어드레스 버스 : 주소 이동</li><li>데이터 버스 : 데이터 이동</li><li>컨트롤 버스 : 컨트롤 신호 이동. CPU와 메모리 간의 통신.</li><li>하드디스크, 메인메모리, CPU 등 모두 버스와 연결.</li><li>버스 인터페이스 : 버스 프로토콜, 통신방식을 알고 있는것.</li></ul><hr><br/><p><em>※ 이 글은 아래 블로그 글을 바탕으로 혼자 공부하며 간단히 필기해본 내용입니다.<br>좋은 자료를 공유해주신 블로그님께 감사드립니다.</em><br>🔗<a href="https://jhnyang.tistory.com/16" target="_blank" rel="noopener">블로그 주소</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;운영체제도 조금씩 알아보자.&lt;br&gt;&lt;code&gt;컴퓨터 구조&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
  </entry>
  
  <entry>
    <title>⚙️ 운영체제(1) 기능,목적,구조</title>
    <link href="http://yoursite.com/2020/10/19/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-1-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EC%A0%81-%EA%B5%AC%EC%A1%B0/"/>
    <id>http://yoursite.com/2020/10/19/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-1-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EC%A0%81-%EA%B5%AC%EC%A1%B0/</id>
    <published>2020-10-19T02:04:45.000Z</published>
    <updated>2020-10-19T03:27:48.926Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="운영체제가-뭔가요"><a href="#운영체제가-뭔가요" class="headerlink" title="운영체제가 뭔가요?"></a>운영체제가 뭔가요?</h2><p><em>운영체제 아는데.. 알지만, 설명을 할 수 없다면 아는것이 아니라는것!</em></p><blockquote><p>:: 운영체제란 각종 하드웨어적인 자원, 소프트웨어적인 자원을 효율적으로 사용할 수 있도록 제어해주는 관리 시스템 (Operating System) 입니다.<br>:: 사용자에게 편리함을 제공하고 시스템의 생산성을 높여줍니다.<br>:: 모든 하드웨어, 소프트웨어를 관리하는 “실행 관리자” 라고 정의됩니다.<br><code>편리함</code> <code>관리시스템</code> <code>생산성증대</code></p></blockquote><br/><h2 id="운영체제-기능"><a href="#운영체제-기능" class="headerlink" title="운영체제 기능"></a>운영체제 기능</h2><blockquote><p>컴퓨터를 편하고 효율적으로 사용할 수 있도록 도움을 줍니다.<br><code>CPU관리</code> <code>메모리관리</code> <code>IO장치</code></p></blockquote><br/><h2 id="운영체제-목적"><a href="#운영체제-목적" class="headerlink" title="운영체제 목적"></a>운영체제 목적</h2><blockquote><ol><li>처리능력의 향상 : 일정시간내 처리량</li><li>응답시간 최소화</li><li>사용 가능도의 향상 : 얼마나빠르게</li><li>신뢰도의 향상 : 정확성<br><code>처리능력</code> <code>응답시간</code> <code>사용가능도</code> <code>신뢰도</code></li></ol></blockquote><br/><h2 id="운영체제-구조"><a href="#운영체제-구조" class="headerlink" title="운영체제 구조"></a>운영체제 구조</h2><blockquote><ol><li>제어 프로그램</li></ol><ul><li>감시 프로그램 (supervisor) : 시스템 전체의 동작 상태 감독, 지원.</li><li>작업 관리 프로그램 : 자동적 작업 이행을 위한 준비와 처리</li><li>데이터 관리 프로그램 : 데이터 전송, 입출력 데이터 연결, 파일조작 및 처리</li></ul><ol start="2"><li>처리 프로그램</li></ol><ul><li>언어 번역 프로그램</li><li>서비스 프로그램</li><li>문제 처리 프로그램<br><code>제어</code> <code>처리</code></li></ul></blockquote><hr><br/><p><em>※ 이 글은 아래 블로그 글을 바탕으로 혼자 공부하며 간단히 필기해본 내용입니다.<br>좋은 자료를 공유해주신 블로그님께 감사드립니다.</em><br>🔗<a href="https://jhnyang.tistory.com/16" target="_blank" rel="noopener">블로그 주소</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;운영체제도 조금씩 알아보자.&lt;br&gt;&lt;code&gt;OS 기능&lt;/code&gt; &lt;code&gt;OS 목적&lt;/code&gt; &lt;code&gt;OS 구조&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ OS" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-OS/"/>
    
    
  </entry>
  
  <entry>
    <title>파이썬의 __init__ 과 self</title>
    <link href="http://yoursite.com/2020/10/08/%ED%8C%8C%EC%9D%B4%EC%8D%AC-init-%EA%B3%BC-self/"/>
    <id>http://yoursite.com/2020/10/08/%ED%8C%8C%EC%9D%B4%EC%8D%AC-init-%EA%B3%BC-self/</id>
    <published>2020-10-08T02:38:09.000Z</published>
    <updated>2020-10-08T03:49:16.789Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="생성자-init"><a href="#생성자-init" class="headerlink" title="생성자 init"></a>생성자 <strong>init</strong></h2><p> <strong>__init__</strong> : 파이썬의 생성자를 나타낸다.<br>클래스 Person() 를 호출하면 객체가 생성되고 <code>__init__</code> 메소드에 첫 번째 매개변수로 전달된다.<br>추가 매개변수 또한 가능하다.</p><p><strong>self</strong> : 객체 자체의 인스턴스를 의미한다.<br>파이썬은 다른 객체지향 언어와는 달리 (대부분 메소드에 숨겨진 매개변수로 전달) <code>self</code> 와 같이 명시적으로 선언해야 한다.</p><hr><br><h2 id="클래스-Person-예시"><a href="#클래스-Person-예시" class="headerlink" title="클래스 Person 예시"></a>클래스 Person 예시</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.n_name= name</span><br><span class="line">        self.n_age= age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.n_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAge</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        self.n_age += num</span><br><span class="line">        print(self.n_age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'Jenny'</span>, <span class="number">12</span>)</span><br><span class="line">p.getName()</span><br><span class="line">p.addAge(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>결과</strong></p><blockquote><p>Jenny<br>17</p></blockquote><p><strong># Line2</strong> : self 가 포함되어 있지만 실제로 <code>name</code> 과 <code>age</code> 두가지 매개변수만 전달한다.<br><strong># Line9</strong> : self 의 <code>n_age</code> 값에 <code>addAge</code> 에 매개변수로 전달되는 숫자를 더해 출력한다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;자주쓰는 __init__ 그리고 self 무엇을 의미하는 것일까?&lt;br&gt;&lt;code&gt;생성자&lt;/code&gt; &lt;code&gt;인스턴스&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Python" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Python/"/>
    
    
  </entry>
  
  <entry>
    <title>CODING TEST {동전} with Python</title>
    <link href="http://yoursite.com/2020/06/16/CODING-TEST-with-Python-0616/"/>
    <id>http://yoursite.com/2020/06/16/CODING-TEST-with-Python-0616/</id>
    <published>2020-06-16T02:03:14.000Z</published>
    <updated>2021-04-28T06:21:58.246Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="문제"><a href="#문제" class="headerlink" title="[문제]"></a>[문제]</h2><blockquote><p>Q. 준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.<br>동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.</p></blockquote><h2 id="입력"><a href="#입력" class="headerlink" title="[입력]"></a>[입력]</h2><blockquote><p>첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000)<br>둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. (1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수)</p></blockquote><h2 id="예제-입력"><a href="#예제-입력" class="headerlink" title="[예제 입력]"></a>[예제 입력]</h2><blockquote><p>10 4200<br>1<br>5<br>10<br>50<br>100<br>500<br>1000<br>5000<br>10000<br>50000</p></blockquote><h2 id="예제-출력"><a href="#예제-출력" class="headerlink" title="[예제 출력]"></a>[예제 출력]</h2><blockquote><p>6</p></blockquote><h2 id="문제-답변"><a href="#문제-답변" class="headerlink" title="[문제 답변]"></a>[문제 답변]</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coin</span><span class="params">(priceArr)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> price</span><br><span class="line"></span><br><span class="line">    priceArr.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> priceArr:</span><br><span class="line">        <span class="keyword">if</span> (price // i) &gt; <span class="number">0</span>:</span><br><span class="line">            total+= price // i</span><br><span class="line">            price -= (price // i)*i</span><br><span class="line">            <span class="keyword">if</span> price==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==  <span class="string">'__main__'</span>:</span><br><span class="line">    arrLen, price= map(int, input().split())</span><br><span class="line">    priceArr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(arrLen):</span><br><span class="line">        priceArr.append(int(input()))</span><br><span class="line"></span><br><span class="line">    print(coin(priceArr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 코딩테스트 with Python&lt;br&gt;Q. 동전&lt;br&gt;&lt;code&gt;백준&lt;/code&gt; &lt;code&gt;알고리즘&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
      <category term="codingtest" scheme="http://yoursite.com/tags/codingtest/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CODING TEST  {SockMerchant} with Python</title>
    <link href="http://yoursite.com/2020/06/15/CODING-TEST-with-Python-0615/"/>
    <id>http://yoursite.com/2020/06/15/CODING-TEST-with-Python-0615/</id>
    <published>2020-06-15T01:03:11.000Z</published>
    <updated>2021-04-28T06:21:58.243Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="문제-SockMerchant"><a href="#문제-SockMerchant" class="headerlink" title="[문제] SockMerchant"></a>[문제] SockMerchant</h2><blockquote><p>Q. Complete the sockMerchant function below.<br>For example, there are  socks with colors . There is one pair of color  and one of color .<br>There are three odd socks left, one of each color. The number of pairs is.</p></blockquote><h2 id="문제-답변"><a href="#문제-답변" class="headerlink" title="[문제 답변]"></a>[문제 답변]</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sockMerchant</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sockMerchant</span><span class="params">(n, ar)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(ar) !=n:</span><br><span class="line">        print(<span class="string">'리스트 길이를 확인해주세요'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    ar_count = dict()</span><br><span class="line">    cnt =<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> sock <span class="keyword">in</span> ar:</span><br><span class="line">        <span class="keyword">if</span> sock <span class="keyword">not</span> <span class="keyword">in</span> ar_count.keys():</span><br><span class="line">            ar_count[sock] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(ar_count[sock]&lt;<span class="number">2</span>):</span><br><span class="line">                ar_count[sock] += <span class="number">1</span></span><br><span class="line">                cnt +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># del(ar_count[sock]) #같은 key 가 있을때 마지막 값으로 덮어씌워지므로 할필요 없음</span></span><br><span class="line">                ar_count[sock] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            print(<span class="string">'ar_dic : &#123;0&#125; / cnt : &#123;1&#125;'</span>.format(ar_count, cnt))</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  __name__에는 '__main__' 이 들어감. 시작점(entry point) 이다.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input(<span class="string">'리스트 길이 입력: '</span>))</span><br><span class="line">    ar = list(map(int, input(<span class="string">'리스트 원소 입력: '</span>).rstrip().split()))</span><br><span class="line">    print(sockMerchant(n, ar))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 코딩테스트 with Python&lt;br&gt;Q. SockMerchant&lt;br&gt;&lt;code&gt;HackerRank&lt;/code&gt; &lt;code&gt;알고리즘&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Algorithm" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Algorithm/"/>
    
    
      <category term="codingtest" scheme="http://yoursite.com/tags/codingtest/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Nginx &amp; Tomcat 비교</title>
    <link href="http://yoursite.com/2020/06/03/nginx-tomcat-%EB%B9%84%EA%B5%90/"/>
    <id>http://yoursite.com/2020/06/03/nginx-tomcat-%EB%B9%84%EA%B5%90/</id>
    <published>2020-06-03T13:12:06.000Z</published>
    <updated>2020-10-08T02:56:10.741Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="Nginx-란"><a href="#Nginx-란" class="headerlink" title="Nginx 란,"></a>Nginx 란,</h2><blockquote><p>apache 의 C10K 문제점 해결을 위해 만들어진 <code>Event-Driven</code> 구조의 웹서버SW 라고 합니다.  OSI7 Layer 중 application Level 아래의 Level 에서 Nginx 같은 웹서버가 HTTP 통신을 담당합니다.</p></blockquote><p><strong><code>C10K</code> 일만개의 클라이언트 문제</strong><br>한 시스템에 동시 접속자수가 1만명이 넘어갈 때 효율적방안</p><hr><h2 id="Nginx-amp-Apache"><a href="#Nginx-amp-Apache" class="headerlink" title="Nginx &amp; Apache"></a>Nginx &amp; Apache</h2><p><code>Nginx</code> 는 <code>Tomcat</code> 과 비교되어 그 장점을 설명할 수 있습니다.</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p><code>MPM 방식</code>으로 HTTP 요청을 처리합니다.</p><blockquote><p>MPM : Multi-Process Module 은 크게 두 가지 방식이 있습니다.<br><code>PreFork 방식</code> <code>Worker 방식</code></p></blockquote><ul><li><p><strong>PreFork MPM (다중 프로세스)</strong><br>o Client 요청에 대해 apache 자식 프로세스를 생성하여 처리합니다.<br>o 요청이 많을 경우 Process 를 생성하여 처리합니다. 이 방식은 Apache 설치시 default 로 설정되어 있습니다.<br>o 하나의 자식프로세스당 <code>하나의 스레드</code> 를 갖습니다. (최대 1024개)<br>o 스레드간 메모리 공유를 하지 않습니다. 이 방식은 독립적이기에 안정적인 반면, 메모리 소모가 크다는 단점이 있습니다.</p></li><li><p><strong>Worker MPM (멀티 프로세스-스레드)</strong><br>o Prefork 보다 메모리 사용량이 적고 동시접속자가 많은 사이트에 적합합니다. 각 프로세스의 스레드를 생성해 처리하는 구조입니다.<br>o 스레드 간의 메모리 공유가 가능합니다.<br>o 프로세스 당 최대 64개의 스레드처리가 가능하며, 각 스레드는 하나의 연결만을 부여받습니다.</p></li></ul><h3 id="Apache-의-한계"><a href="#Apache-의-한계" class="headerlink" title="Apache 의 한계"></a>Apache 의 한계</h3><blockquote><p><strong>클라이언트 접속마다 Process 혹은 Thread 를 생성하는 구조입니다.</strong> 1만 클라이언트로부터 동시접속 요청이 들어온다면 CPU 와 메모리 사용이 증가하고 추가적인 Process/Tread 생성비용이 드는 등 대용량 요청에서 한계를 보입니다.<br>또한, Apache 서버의 프로세스가 <code>blocking</code> 될 때 요청을 처리하지 못하고 처리가 완료될 때까지 대기상태에 있습니다. 이는 <code>Keep Alive(접속대기)</code> 로 해결이 가능하지만, 효율이 떨어집니다.</p></blockquote><hr><h3 id="다시-Nginx-를-살펴봅시다"><a href="#다시-Nginx-를-살펴봅시다" class="headerlink" title="다시 Nginx 를 살펴봅시다."></a>다시 Nginx 를 살펴봅시다.</h3><blockquote><p>Nginx 는 위에서 언급했듯이 Event-Driven 방식으로 동작합니다. 즉, 프로그램 흐름이 이벤트에 의해 결정이 됩니다.<br>한 개 또는 고정된 프로세스만 생성하고, 그 내부에서 비동기로 효율적인 방식으로 task 를 처리합니다. Apache 와 달리 동시접속자 수가 많아져도 추가적인 생성비용이 들지 않습니다.</p></blockquote><p>o 비동기 이벤트 기반으로 요청하여 적은양의 스레드가 사용되기 때문에 CPU소모가 적습니다.<br>o Apache 와 달리 CPU 와 관계없이 I/O 들을 전부 Event Listener로 미루기 때문에 흐름이 끊이지 않습니다.<br>o <code>context switching</code> 비용이 적습니다.</p><p><strong><code>[Context Switching]</code></strong><br><code>Context: 스레드가 작업을 진행하는동안 작업정보 (레지스터, 커널스택, 사용자스택 등)를 보관</code><br><code>O/S 는 A작업을 진행할 때 A스레드의 Context를 읽어오며, B스레드로 전환 할 때 A스레드의 Context를 저장하고 B스레드의 Context를 읽어오는 일련의 반복작업을 합니다.</code><br><code>즉, 스레드 갯수가 많아질 수록 context switching 작업은 더 빈번하게 일어나고 이 때문에 성능이 저하될 수 있습니다.</code></p><h3 id="Apache-amp-Nginx-장점"><a href="#Apache-amp-Nginx-장점" class="headerlink" title="Apache &amp; Nginx 장점"></a>Apache &amp; Nginx 장점</h3><p>O Apache 는 Nginx 에 비해 모듈이 다양합니다.<br>O Apache 의 안정성, 확장성, 호환성을 장점으로 들자면, Nginx 는 성능이 우세하다는 장점이 있습니다.</p><h2 id="어느것이-더-나은가"><a href="#어느것이-더-나은가" class="headerlink" title="어느것이 더 나은가"></a>어느것이 더 나은가</h2><blockquote><p>Apache 나 Nginx 모두 각 웹서버마다의 장단점을 가지고 있으므로 사용에 있어서 정답은 없습니다. 상황과 비용에 따라, 혹은 안정성이나 효율성에 따라 적합한 웹서버를 사용한면 되지 않을까 합니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- ![0_UneV-I-bBldmqkgK](https://user-images.githubusercontent.com/28856435/83641005-e074c980-a5e7-11ea-92d3-c89fd6ba9662.png)
Nginx &amp; Apache 를 비교하며 각 장단점을 알아봅니다. --&gt;
&lt;p&gt;&lt;code&gt;apache&lt;/code&gt; &lt;code&gt;nginx&lt;/code&gt; &lt;code&gt;C10K&lt;/code&gt; &lt;code&gt;MPM&lt;/code&gt; &lt;code&gt;PreFork&lt;/code&gt; &lt;code&gt;Worker&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Web" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Web/"/>
    
    
      <category term="apache" scheme="http://yoursite.com/tags/apache/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="C10K" scheme="http://yoursite.com/tags/C10K/"/>
    
      <category term="MPM" scheme="http://yoursite.com/tags/MPM/"/>
    
      <category term="PreFork" scheme="http://yoursite.com/tags/PreFork/"/>
    
      <category term="Worker" scheme="http://yoursite.com/tags/Worker/"/>
    
  </entry>
  
  <entry>
    <title>react router 사용하기</title>
    <link href="http://yoursite.com/2020/06/01/react-router-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>http://yoursite.com/2020/06/01/react-router-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</id>
    <published>2020-06-01T06:10:25.000Z</published>
    <updated>2020-06-01T06:30:42.521Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h2><blockquote><p><code>React Router</code> 란, <em>SPA(Single Page Application: 모든코드를 하나의 파일에서 관리)</em> 의 라우팅 문제를 보완할 수 있도록 코드의 모듈화를 가능하게 해주는 라이브러리 이다.<br>서로 다른 주소를 가진 view 를 만들어 관리한다. 즉, component 마다 다른 url 을 호출하여 화면을 그려줄 수 있다.<br>function 방식인 <code>Hooks</code> 를 적용.</p></blockquote><hr><p>예제에 대한 클래스 트리이다.<br>&nbsp;&nbsp;&nbsp;public<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴindex.html<br>&nbsp;&nbsp;&nbsp;src<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ components<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ Header.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ Recipe.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ RecipeDetail.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ RecipeFind.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ RecipeNews.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ Chef.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ ChefDetail.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ App.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ index.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ server.js<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ㄴ package.json</p><br/><h3 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h3><ul><li>App.js 에서 Router 를 이용하여 각 함수들을 묶어준다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;BrowserRouter <span class="keyword">as</span> Router, Route, Switch&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./components/Header"</span>;</span><br><span class="line"><span class="keyword">import</span> Recipe <span class="keyword">from</span> <span class="string">"./components/Recipe"</span>;</span><br><span class="line"><span class="keyword">import</span> RecipeDetail <span class="keyword">from</span> <span class="string">"./components/RecipeDetail"</span>;</span><br><span class="line"><span class="keyword">import</span> RecipeFind <span class="keyword">from</span> <span class="string">"./components/RecipeFind"</span>;</span><br><span class="line"><span class="keyword">import</span> RecipeNews <span class="keyword">from</span> <span class="string">"./components/RecipeNews"</span>;</span><br><span class="line"><span class="keyword">import</span> Chef <span class="keyword">from</span> <span class="string">"./components/Chef"</span>;</span><br><span class="line"><span class="keyword">import</span> ChefDetail <span class="keyword">from</span> <span class="string">"./components/ChefDetail"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  index.js</span></span><br><span class="line"><span class="comment">  ReactDom.render(&lt;App/&gt;, document.getElementById('root'))</span></span><br><span class="line"><span class="comment">  &lt;App/&gt; =&gt; html 을 읽어서 =&gt; &lt;div id="root"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">        &lt;Header/&gt;</span><br><span class="line">        &lt;div className=&#123;<span class="string">"container-fluid"</span>&#125;&gt;</span><br><span class="line">          &lt;div className=&#123;<span class="string">"jumbotron"</span>&#125;&gt;</span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">              &lt;Route exact path=&#123;<span class="string">"/"</span>&#125; component=&#123;Recipe&#125;/&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">"/recipe_detail"</span>&#125; component=&#123;RecipeDetail&#125;/&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">"/chef"</span>&#125; component=&#123;Chef&#125;/&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">"/chef_detail"</span>&#125; component=&#123;ChefDetail&#125;/&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">"/news"</span>&#125; component=&#123;RecipeNews&#125;/&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">"/find"</span>&#125; component=&#123;RecipeFind&#125;/&gt;</span><br><span class="line">            &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;/</span>Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Header-js"><a href="#Header-js" class="headerlink" title="Header.js"></a>Header.js</h3><ul><li>navigation 을 그려주는 함수</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NavLink&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;NavLink exact to=&#123;""&#125;&gt;</span></span><br><span class="line"><span class="comment">// NavLink 에서 exact 는 default 값이다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//render()</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;nav className=<span class="string">"navbar navbar-inverse"</span>&gt;</span><br><span class="line">            &lt;div className=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">                &lt;div className=<span class="string">"navbar-header"</span>&gt;</span><br><span class="line">                    &lt;NavLink className=<span class="string">"navbar-brand"</span> to=&#123;<span class="string">"/"</span>&#125;&gt;SIST Recipe&lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &lt;ul className=<span class="string">"nav navbar-nav"</span>&gt;</span><br><span class="line">                    &lt;li className=<span class="string">"active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">exact</span> <span class="attr">to</span>=<span class="string">&#123;</span>"/"&#125;&gt;</span>레시피<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;</span>"/<span class="attr">chef</span>"&#125;&gt;</span>쉐프<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;</span>"/<span class="attr">news</span>"&#125;&gt;</span>레시피뉴스<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;</span>"/<span class="attr">find</span>"&#125;&gt;</span>레시피검색<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><br><h3 id="Recipe-js"><a href="#Recipe-js" class="headerlink" title="Recipe.js"></a>Recipe.js</h3><ul><li>App.js 에 넣어준 <code>RecipeDetail.js</code> <code>RecipeFind.js</code> … 각 화면은 아래와 같이 <code>Recipe.js</code> 와 같은 함수 구조로 되어있다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Recipe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>레시피<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><br><h2 id="server-js-서버를-생성하는-방법"><a href="#server-js-서버를-생성하는-방법" class="headerlink" title="server.js 서버를 생성하는 방법"></a>server.js 서버를 생성하는 방법</h2><blockquote><p>MongoDB 서버를 구축한다.<br>skip =&gt; offset 과 비슷하다.</p></blockquote><ul><li>라이브러리 로드</li><li>서버생성</li><li>서버구동</li><li>cross domain 허용</li><li>클라이언트 통신 및 몽고디비 연결</li><li>request 요청처리 =&gt; reponse 결과전송</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* bind() =&gt; IP, PORT 를 연결 =&gt; 개통</span></span><br><span class="line"><span class="comment">* listen() =&gt; 대기상태</span></span><br><span class="line"><span class="comment">* accept() =&gt; 클라이언트가 접속시에 처리</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">app.listen(<span class="number">3355</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Server Start ..."</span>, <span class="string">"http://localhost:3355"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// cross domain</span></span><br><span class="line">app.all(<span class="string">'/*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클라이언트 통신</span></span><br><span class="line"><span class="comment">// 사용자  URI =&gt; /recipe?page=1</span></span><br><span class="line"><span class="comment">// 몽고디비 연결</span></span><br><span class="line"><span class="comment">// MongoDB Connection</span></span><br><span class="line"><span class="keyword">const</span> Client = <span class="built_in">require</span>(<span class="string">"mongodb"</span>).MongoClient;</span><br><span class="line">app.get(<span class="string">'/recipe'</span>, (request, response)=&gt;&#123;</span><br><span class="line">    <span class="comment">// request =&gt; 사용자가 보낸 요청 : page, id, pwd</span></span><br><span class="line">    <span class="comment">// 요청 처리</span></span><br><span class="line">    <span class="comment">// response =&gt;  결과전송</span></span><br><span class="line">    <span class="keyword">var</span> page= request.query.page; <span class="comment">//request.getParameter("page")</span></span><br><span class="line">    <span class="keyword">var</span> rowSize =<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">var</span> skip = (page*rowSize) - rowSize;</span><br><span class="line">    <span class="comment">// 1page =&gt; skip=0</span></span><br><span class="line">    <span class="comment">// 2page =&gt; skip 12(버림) ==&gt; 13</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"mongodb://211.238.142.181:27017"</span>;</span><br><span class="line">    Client.connect(url, (err, client)=&gt;&#123;</span><br><span class="line">        <span class="keyword">var</span> db = client.db(<span class="string">'mydb'</span>);</span><br><span class="line">        <span class="comment">// SELECT * FROM recipe =&gt; find&#123;()&#125;</span></span><br><span class="line">        <span class="comment">// SELECT * FROM recipe WHERE no=1 =&gt; find&#123;(no:1)&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// skip =&gt; offset 과 비슷함.</span></span><br><span class="line">        <span class="comment">// toArray(err, docs) 콜백 함수: 가져온 데이터를 배열로 묶어줌. (docs에 있음)</span></span><br><span class="line">        db.collection(<span class="string">'recipe'</span>).find(&#123;&#125;).skip(skip).limit(rowSize)</span><br><span class="line">            .toArray(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</span><br><span class="line">                response.json(docs);</span><br><span class="line">                client.close();</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><br><h2 id="axios-서버에서-데이터-읽어오기"><a href="#axios-서버에서-데이터-읽어오기" class="headerlink" title="axios: 서버에서 데이터 읽어오기"></a>axios: 서버에서 데이터 읽어오기</h2><p>axios.get({<code>URL</code>, <code>params:{}</code>}).then((<code>result</code>)=&gt;{ <code>setState변수(result.data)</code> })</p><p><img src="https://user-images.githubusercontent.com/28856435/83317751-f3933c80-a269-11ea-9cbc-43443ad22eeb.png" alt="image"></p><ul><li>useState() 변수 <code>recipe</code> 데이터에 넣어준 값을 화면에 그려준다.</li></ul><p><img src="https://user-images.githubusercontent.com/28856435/83318025-23dbda80-a26c-11ea-8897-fa78ec1e7771.png" alt="image"></p><hr><br><h2 id="NavLink-props-넘기기"><a href="#NavLink-props-넘기기" class="headerlink" title="NavLink: props 넘기기"></a>NavLink: props 넘기기</h2><blockquote><p>Recipe.js 내의 음식 이미지를 클릭하면 그 이미지에 해당하는 상세보기로 넘어갈 수 있도록 NavLink 를 달아줄 것이다.</p></blockquote><p>_</p><ul><li><p>App.js<br><code>RecipeDetail</code>의 path를 다음과 같이 바꿔준다. (no 변수가 추가됨)<br><code>/recipe_detail</code> → <code>/recipe_detail/:no</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&#123;<span class="string">"/recipe_detail/:no"</span>&#125; component=&#123;RecipeDetail&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>Recipe.js<br><code>/recipe_detail/&quot;+m.no</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;NavLink to=&#123;<span class="string">"/recipe_detail/"</span>+m.no&#125;&gt;</span><br><span class="line">  &lt;img src=&#123;m.poster&#125; alt=<span class="string">"Lights"</span> style=&#123;&#123;<span class="string">"width"</span>:<span class="string">"100%"</span>&#125;&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/NavLink&gt;</span></span><br></pre></td></tr></table></figure><ul><li>RecipeDetail.js<br>no 라는 파라미터를 <code>match</code> 를 사용하여 넘길 수 있다.<br><code>props.match.params.no</code> </li></ul><p>방법1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RecipeDetail</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>레시피 상세보기: &#123;props.match.params.no&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>방법2) <code>match</code>클래스를 props에 할당.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RecipeDetail</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;match&#125; = props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>레시피 상세보기: &#123;match.params.no&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>sever.js<br>사용자가 넘겨준 <code>no</code> 라는 파라미터는 서버단에서 <code>request.query.no</code> 로 받을 수 있다.<br>이 때, 형변환이 필요하다는 사실도 잊지 않는다.<br>즉, <code>/recipe-detail?no=1</code> 의 형식이다.<br>이제, <code>http://localhost:3355/recipe-detail</code> 를 사용할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/recipe-detail'</span>, (request, response)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 파라미터를 받는 방법</span></span><br><span class="line">    <span class="keyword">var</span> no = request.query.no;</span><br><span class="line">    Client.connect(URL, (err, client)=&gt;&#123;</span><br><span class="line">        <span class="keyword">var</span> db = client.db(<span class="string">'mydb'</span>);</span><br><span class="line">        <span class="comment">// 형변환 : Number() or parseInt()</span></span><br><span class="line">        db.collection(<span class="string">'recipe_detail'</span>).find(&#123;<span class="attr">no</span>:<span class="built_in">Number</span>(no)&#125;).toArray(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</span><br><span class="line">            response.json(docs[<span class="number">0</span>]); <span class="comment">// Array 타입이기 때문에 하나의 Object 만 가져온다.</span></span><br><span class="line">            client.close();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>다시 RecipeDetail.js<br>server.js 에서 만들었던 API 를 사용하여 상세정보를 뿌려준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [detail, setDetail] = useState(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  axios.get(<span class="string">'http://localhost:3355/recipe-detail'</span>, &#123;</span><br><span class="line">    params:&#123;</span><br><span class="line">      no: match.params.no</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    setDetail(result.data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SPA 의 단점을 보완하고, 표준적으로 쓰이고 있는 &lt;code&gt;React Router&lt;/code&gt; : &lt;code&gt;code split&lt;/code&gt; 을 가능하게 해주는 라이브러리를 사용해 봅니다.&lt;br&gt;&lt;code&gt;React&lt;/code&gt; &lt;code&gt;react router&lt;/code&gt; &lt;code&gt;Hooks&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ React" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-React/"/>
    
    
      <category term="Hooks" scheme="http://yoursite.com/tags/Hooks/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react router" scheme="http://yoursite.com/tags/react-router/"/>
    
  </entry>
  
</feed>
