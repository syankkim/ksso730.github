<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>동글씨</title>
  
  <subtitle>동글씨의 LOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-29T01:25:28.070Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Suyan Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hooks 로 함수형 코딩을 해보자</title>
    <link href="http://yoursite.com/2020/05/29/Hooks/"/>
    <id>http://yoursite.com/2020/05/29/Hooks/</id>
    <published>2020-05-29T00:38:23.000Z</published>
    <updated>2020-05-29T01:25:28.070Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks ?"></a>Hooks ?</h1><blockquote><p>클래스에서 사용했던 기능을 함수에서도 사용할 수 있도록 해줌.</p></blockquote><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><blockquote><p> const [변수명, 메소드]= useState(“[]”)</p></blockquote><ul><li>EX<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [music, setMusic] = useState([]);</span><br></pre></td></tr></table></figure></li></ul><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><blockquote><p>React의 class  방식의 componentDidMount 생명주기를 흉내낼 수 있다.<br>useEffect(fn, [])</p></blockquote><ul><li><p>클래스 방식</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setstate(&#123;<span class="attr">music</span>:&#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>함수 방식 : <code>useState</code> 에서 정의해주었던 <code>music</code> 변수를 저장하고 있는 <code>setMusic</code> state를 사용.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        axios.get(<span class="string">"http://localhost:3000/music.json"</span>)</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;   <span class="comment">// res에 데이터 불러옴</span></span><br><span class="line">                setMusic(res.data);</span><br><span class="line">                <span class="built_in">console</span>.log(res.data);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;,[]);</span><br></pre></td></tr></table></figure></li><li><p>그런데 <code>[]</code> 는 뭔가요? deps 란?</p><blockquote><p>mount 할때마다 실행. =&gt; componentDidMount, componentDidUpdate<br>시작하자마자 한번만 읽어로려면, 즉 didMount 에만 함수를 적용하고 싶다면,<br>함수의 2번째 인자로 <code>[] deps</code> 를 줘야함.<br>내용 갱신 시에는 deps 를 쓰지 않는다.</p></blockquote></li></ul><hr><ul><li>잠깐 문법<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이렇게 하면 forEach 가능한데</span></span><br><span class="line">props.music.forEach(<span class="function">(<span class="params">m</span>)=&gt;</span>&#123;</span><br><span class="line">         ...   </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// html 에서 스크립트를 만들 때는 forEach 적용이 안됨.</span></span><br><span class="line"><span class="keyword">const</span> html = music.map(<span class="function">(<span class="params">m</span>)=&gt;</span></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&#123;m.rank&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tr&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="검색-이벤트-등록"><a href="#검색-이벤트-등록" class="headerlink" title="검색 이벤트 등록"></a>검색 이벤트 등록</h3><ul><li><p>사용 함수<br>AppMain() : main 함수이다.<br>SearchBar()<br>MusicTable()</p></li><li><p><code>handleUserInput</code> 라는 이벤트 등록함수를 만들어 준다.</p></li><li><p>이렇게 이벤트를 넘겨주는 방식은 <code>callByReference</code> 방식이다.<br>callByReference 는 주소값을 넘겨준다. javaScript 는 pointer 로 이루어져 있어 주소값으로 넘겨준다면 이 값은 변할 수 있다.</p></li><li><p>변수 str 을 넘겨주는 방식은 <code>callByValue</code> 방식이다.<br>복사라고 생각하면 된다. 가지고 있는 걸 사용하는 것이 아닌, 새로 똑같은 값을 만들어준다.</p></li></ul><p><strong>AppMain()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 변수 설정</span></span><br><span class="line">    <span class="keyword">const</span> [music, setMusic] = useState([]);</span><br><span class="line">    <span class="comment">// 변수 초기값</span></span><br><span class="line">    <span class="keyword">const</span> [str, setStr]= useState(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        axios.get(<span class="string">"http://localhost:3000/music.json"</span>)</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                setMusic(res.data);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;,[])  <span class="comment">// mount 할때마다 실행. =&gt; componentDidMount, componentDidUpdate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 이벤트 등록</span></span><br><span class="line">    <span class="keyword">const</span> handleUserInput= <span class="function">(<span class="params">str</span>)=&gt;</span>&#123;</span><br><span class="line">        setStr(str);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span>(</span><br><span class="line">        &lt;div className=&#123;<span class="string">"row"</span>&#125;&gt;</span><br><span class="line">            &lt;H/&gt;</span><br><span class="line">            &lt;SearchBar str=&#123;str&#125; onUserInput=&#123;handleUserInput&#125;/&gt;</span><br><span class="line">            &lt;div style=&#123;&#123;<span class="string">"height"</span>:<span class="string">"30px"</span>&#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            &lt;MusicTable music=&#123;music&#125; str=&#123;str&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>onUserInput</code> 이벤트를 연결한다. 이벤트가 발생한 곳의 값(input 태그의 값)을 가져와 <code>onUserInput</code>에 값을 넣어준다.<br><strong>SearchBar(str)</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SearchBar</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// useCallBack</span></span><br><span class="line">    <span class="keyword">const</span> onChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        props.onUserInput(e.target.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;table className=&#123;<span class="string">"table"</span>&#125;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;input type=&#123;<span class="string">"text"</span>&#125; size=&#123;<span class="string">"25"</span>&#125; className=&#123;<span class="string">"input-sm"</span>&#125;</span><br><span class="line">                        placeholder=&#123;<span class="string">"search"</span>&#125; onChange=&#123;onChange&#125; value=&#123;props.str&#125;/&gt;</span><br><span class="line">                &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tr&gt;</span><br><span class="line">        &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="CallBack-useCallBack"><a href="#CallBack-useCallBack" class="headerlink" title="CallBack : useCallBack()"></a>CallBack : useCallBack()</h2><blockquote><ul><li>hooks 의 기능중 <code>useCallBack()</code> 함수를 사용한다. :함수의 주소를 기억하고 있다. Paging 에서 많이 사용된다.<br>Memory 누수가 안됨.</li></ul></blockquote><ul><li>2번 째 인자로 deps :[str] 을 준다. : 검색내용이 변경 될 때에만 함수가 <code>handleUserInput</code> 호출되도록 변경해준다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleUserInput= useCallback(<span class="function">(<span class="params">str</span>)=&gt;</span>&#123;</span><br><span class="line">  setStr(str);</span><br><span class="line">&#125;, [str]) <span class="comment">// str 이 변경될 때에만 호출된다.</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>실제로 데이터를 출력해주는 함수<br><strong>MusicTable()</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MusicTable</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> row=[];</span><br><span class="line">    props.music.forEach(<span class="function">(<span class="params">m</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m.title.indexOf(props.str)==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 배열에 추가</span></span><br><span class="line">        row.push(<span class="xml"><span class="tag">&lt;<span class="name">MusicRow</span> <span class="attr">music</span>=<span class="string">&#123;m&#125;/</span>&gt;</span>);</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    return(</span></span><br><span class="line">        &lt;table className=&#123;"table"&#125;&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">                &lt;tr className=&#123;"danger"&#125;&gt;</span><br><span class="line">                    &lt;th&gt;순위&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;노래명&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;가수&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">            &#123;row&#125;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">    )</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h2><blockquote><ul><li>React 는 컴포넌트를 렌더링 한 뒤, 이전 렌더링 된 결과와 비교하여 DOM 업데이트를 결정한다. 이전 렌더링 결과와 비교하는 과정은 충분히 빠르지만 이 과정에서 속도를 줄일 수 있다.</li></ul></blockquote><ul><li><p><code>React.memo</code> 로 매핑될 때, React 는 컴퍼넌트를 렌더링 후 그 결과를 <code>메모이징(Memoizing)</code> 한다. 그 다음 렌더링 시 <code>props</code> 가 같다면 메모이징 했던 내용을 재사용한다.<br>[출처] <a href="https://ui.toast.com/weekly-pick/ko_20190731/" target="_blank" rel="noopener">https://ui.toast.com/weekly-pick/ko_20190731/</a></p></li><li><p>위에서 진행했던 예제로 계속 설명을 한다면,</p></li><li><p>SearchBar 에  입력할 때마다 즉, <code>onUserInput</code> 이벤트가 발생할 때마다  <code>MusicTable</code> 을 재렌더링 한다.<br>그 때마다 H1 태그는 글자 색상을 랜덤으로 가져온다. <code>Math.random()*5</code></p></li><li><p>즉, input 창에 뭔가를 적을 때마다 반짝반짝 하며 타이틀 색상이 수시로 바뀌게 되는 …뭔가 고쳐주고 싶은 현상을 발견한다.</p></li><li><p>이 때 사용하는것이 바로 <code>memo</code></p></li><li><p>React.memo 적용전</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> H=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// memo : 호출한것 기억.</span></span><br><span class="line">    <span class="keyword">const</span> color = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'yellow'</span>,<span class="string">'pink'</span>];</span><br><span class="line">    <span class="keyword">const</span> no = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">5</span>);</span><br><span class="line">   <span class="comment">// 배열 인덱스 5개중 랜덤수 선택</span></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;h1 className=&#123;<span class="string">"text-center"</span>&#125; style=&#123;&#123;<span class="string">"color"</span>:color[no]&#125;&#125;&gt;Music Top <span class="number">50</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>React.memo 적용 후: searchBar 에 입력해도 변하지 않음.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> H=React.memo(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// memo : 호출한것 기억.</span></span><br><span class="line">    <span class="keyword">const</span> color = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'yellow'</span>,<span class="string">'pink'</span>];</span><br><span class="line">    <span class="keyword">const</span> no = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">5</span>);</span><br><span class="line">   <span class="comment">// 배열 인덱스 5개중 랜덤수 선택</span></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;h1 className=&#123;<span class="string">"text-center"</span>&#125; style=&#123;&#123;<span class="string">"color"</span>:color[no]&#125;&#125;&gt;Music Top <span class="number">50</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;클래스에서 사용했던 기능을 함수에서도 사용할 수 있도록 해주는 HOOKS 를 사용해봅니다.&lt;br&gt;&lt;code&gt;useState&lt;/code&gt; &lt;code&gt;useEffect&lt;/code&gt; &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useCallBack&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ React" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-React/"/>
    
    
      <category term="Hooks" scheme="http://yoursite.com/tags/Hooks/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React 입문해보자</title>
    <link href="http://yoursite.com/2020/05/24/React-start/"/>
    <id>http://yoursite.com/2020/05/24/React-start/</id>
    <published>2020-05-24T13:21:00.000Z</published>
    <updated>2020-05-29T01:25:15.968Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="React"><a href="#React" class="headerlink" title="React ?"></a>React ?</h2><blockquote><dl><dt><strong>VirtualDom</strong></dt><dd>리액트가 관리하는 가상 DOM. (브라우저의 DOM과 별도)</dd></dl></blockquote><ul><li>페이지 내 내용이 변경되면 VirtualDom 은 차이가 있는 부분을 확인한다.</li><li>자체적으로 변경된 부분만 찾아서 Reflow(재렌더링) 한다.</li></ul><blockquote><dl><dt><strong>JSX</strong> (JavaScript+XML)</dt><dd>자바스크립트를 확장한 프로그래밍 언어.</dd></dl></blockquote><p><strong>장점?</strong></p><p>1) Component 를 사용하여 속도가 빠르다.<br>2) react-dom 이라는 가상돔에서 만든다.</p><p><strong>단점?</strong></p><p>1) 단방향, 데이터를 바꿀 때 전체(최상위)를 바꿔야 함. -개선된것 Redux<br>2) function 기반은 전역변수 사용이 어렵다. -개선 Hooks (속성으로 넘기기힘듦 - UserState: state를 자유자재로 쓸수있음)</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>리액트를 사용하기위해 아래 순서대로 설치를 진행해준다.</p><p><strong>1. Node.js 설치</strong></p><p><strong>2. React 설치</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\sist27&gt;npm install -g create-react-app</span><br></pre></td></tr></table></figure><p><strong>3. WebStorm 설치 (편집기)</strong></p><hr><h2 id="React-프로젝트-생성-실행-with-WebStorm"><a href="#React-프로젝트-생성-실행-with-WebStorm" class="headerlink" title="React 프로젝트 생성/실행 with WebStorm"></a>React 프로젝트 생성/실행 with WebStorm</h2><br><ol><li><p>New Project 생성 후 (왼쪽 사이드바에 React App 선택)<br><img src="https://user-images.githubusercontent.com/28856435/81461652-340e1600-91e8-11ea-838f-fc8db1b4fd87.png" alt="image"></p></li><li><p>App.js 에서 약간의 수정이후 터미널에서 <code>npm start</code> 를 실행한다.<br><img src="https://user-images.githubusercontent.com/28856435/81461659-45572280-91e8-11ea-9fda-e3a41631929e.png" alt="image (1)"></p></li><li><p>package.json 의 dependencies 에 axios 버전을 추가해준다.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"axios"</span>: <span class="string">"^0.19.2"</span></span><br></pre></td></tr></table></figure><h2 id="Component-기본-형식-class-기반-function-기반"><a href="#Component-기본-형식-class-기반-function-기반" class="headerlink" title="Component 기본 형식 [class 기반, function 기반]"></a>Component 기본 형식 [class 기반, function 기반]</h2><blockquote><p>class 기반 : 생명주기가 있음</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;&#125;</span><br><span class="line">    <span class="comment">// 화면에 불러오기 전 (데이터 받기전)</span></span><br><span class="line">    componentWillMount()</span><br><span class="line">    <span class="comment">// 화면 출력을 읽는 데이터 (데이터 받음)</span></span><br><span class="line">    render()&#123;&#125;</span><br><span class="line">    <span class="comment">// 화면을 출력 (onLoad() 와 비슷)</span></span><br><span class="line">    componentDidMount()</span><br><span class="line">    <span class="comment">//javaScript onLoad() 방식은 아래와 같음.</span></span><br><span class="line">    componentDidMount() =&gt; $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>function : 생명주기가 없음 -&gt; Data를 넘겨주는 방식 -&gt; 그런데 어려움 -&gt; Hooks 사용</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        &lt;html&gt;</span><br><span class="line">        &lt;<span class="regexp">/html&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="JSX-형식"><a href="#JSX-형식" class="headerlink" title="JSX 형식"></a>JSX 형식</h2><ol><li>반드시 계층구조를 만든다.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//- Error</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 계층구조로 아래와 같이 */</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>HTML 태그는 반드시 소문자<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Html</span>&gt;</span> =&gt; //- Error</span><br></pre></td></tr></table></figure></li><li>속성은 반드시 “”<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">100</span>&gt;</span> //- Error</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React 의 기본개념과 생명주기에 대해 알아봅니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ React" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-React/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>JPA-QueryDsl 간단 쿼리 작성법</title>
    <link href="http://yoursite.com/2020/05/05/JPA-Projection/"/>
    <id>http://yoursite.com/2020/05/05/JPA-Projection/</id>
    <published>2020-05-04T17:45:47.000Z</published>
    <updated>2020-05-28T05:39:32.740Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="BeforeEach"><a href="#BeforeEach" class="headerlink" title="@BeforeEach"></a>@BeforeEach</h2><p>각 테스트를 실행하기 전에 값을 세팅해준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        queryFactory = <span class="keyword">new</span> JPAQueryFactory(em);</span><br><span class="line">        Team teamA = <span class="keyword">new</span> Team(<span class="string">"teamA"</span>);</span><br><span class="line">        Team teamB = <span class="keyword">new</span> Team(<span class="string">"teamB"</span>);</span><br><span class="line"></span><br><span class="line">        em.persist(teamA);</span><br><span class="line">        em.persist(teamB);</span><br><span class="line"></span><br><span class="line">        Member mem1 = <span class="keyword">new</span> Member(<span class="string">"mem1"</span>, <span class="number">10</span>, teamA);</span><br><span class="line">        Member mem2 = <span class="keyword">new</span> Member(<span class="string">"mem2"</span>,<span class="number">20</span>, teamA);</span><br><span class="line">        Member mem3 = <span class="keyword">new</span> Member(<span class="string">"mem3"</span>,<span class="number">30</span>, teamB);</span><br><span class="line">        Member mem4 = <span class="keyword">new</span> Member(<span class="string">"mem4"</span>,<span class="number">40</span>, teamB);</span><br><span class="line"></span><br><span class="line">        em.persist(mem1);</span><br><span class="line">        em.persist(mem2);</span><br><span class="line">        em.persist(mem3);</span><br><span class="line">        em.persist(mem4);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Q-type-활용"><a href="#Q-type-활용" class="headerlink" title="Q-type 활용"></a>Q-type 활용</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startQuerydsl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        queryFactory = <span class="keyword">new</span> JPAQueryFactory(em);</span><br><span class="line"><span class="comment">// Q-type 활용 방법1</span></span><br><span class="line"><span class="comment">//        QMember m1 = new QMember("m1");</span></span><br><span class="line"><span class="comment">// Q-type 활용 방법2</span></span><br><span class="line"><span class="comment">//        QMember m1 = QMember.member;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Q-type 활용 방법3 -권장 static method QMember.member</span></span><br><span class="line">        Member findMember = queryFactory</span><br><span class="line">                .select(member)</span><br><span class="line">                .from(member)</span><br><span class="line">                .where(member.username.eq(<span class="string">"mem1"</span>))  <span class="comment">// PrepareStatement 의 parameterBinding 방식을 사용함.</span></span><br><span class="line">                .fetchOne();</span><br><span class="line"></span><br><span class="line">        assertThat(findMember.getUsername()).isEqualTo(<span class="string">"mem1"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="검색-조건"><a href="#검색-조건" class="headerlink" title="검색 조건"></a>검색 조건</h2><p><code>fetch</code> : 리스트 조회, 데이터 없으면 <code>null</code> 반환<br><code>fetchOne</code> : 단건 조회<br>&nbsp;&nbsp;&nbsp; - 결과 없으면 <code>null</code><br>&nbsp;&nbsp;&nbsp; - 둘 이상이면 <code>com.querydsl.core.NoneUniqueResultException</code><br><code>fetchFirst</code> = limit(1).fetchOne()<br><code>fetchResults</code> : 페이징 정보를 포함. (+)total count 쿼리<br><code>fetchCount</code> : count 쿼리로 변경하여 실행</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resultFetch</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 여러건 조회</span></span><br><span class="line">       List&lt;Member&gt; fetch = queryFactory</span><br><span class="line">               .select(member)</span><br><span class="line">               .fetch();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2 단건조회</span></span><br><span class="line">       Member fetchOne = queryFactory</span><br><span class="line">               .selectFrom(member)</span><br><span class="line">               .fetchOne();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3 처음 한건 조회</span></span><br><span class="line">       Member fetchFirst = queryFactory</span><br><span class="line">               .selectFrom(member)</span><br><span class="line">               .fetchFirst();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4 페이징에서 사용.</span></span><br><span class="line">        <span class="comment">//   쿼리를 두 번 실행함.</span></span><br><span class="line">        QueryResults&lt;Member&gt; results = queryFactory</span><br><span class="line">                .selectFrom(member)</span><br><span class="line">                .fetchResults();</span><br><span class="line">        <span class="keyword">long</span> total = results.getTotal();</span><br><span class="line">        System.out.println(<span class="string">"total =&gt; "</span>+total);</span><br><span class="line">        List&lt;Member&gt; content = results.getResults();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 count 만 조회</span></span><br><span class="line">       <span class="keyword">long</span> count = queryFactory</span><br><span class="line">               .selectFrom(member)</span><br><span class="line">               .fetchCount();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>4 페이징에서 사용</strong> <code>QueryResults</code> 를 사용하여 실행되는 쿼리를 확인해보면<br>count 를 조회하는 쿼리, 실제 member데이터들을 조회하는 쿼리, 2번 실행되는 것을 볼 수 있다.</p><blockquote><p>따라서 성능을 따진다면 count 쿼리를 따로 작성하여 실행해야 한다.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2020-05-06 22:22:57.278 DEBUG 15676 --- [    Test worker] org.hibernate.SQL                        : </span><br><span class="line">    select</span><br><span class="line">        count(member0_.member_id) as col_0_0_ </span><br><span class="line">    from</span><br><span class="line">        member member0_</span><br><span class="line">2020-05-06 22:22:57.418 DEBUG 15676 --- [    Test worker] org.hibernate.SQL                        : </span><br><span class="line">    select</span><br><span class="line">        member0_.member_id as member_i1_0_,</span><br><span class="line">        member0_.age as age2_0_,</span><br><span class="line">        member0_.team_id as team_id4_0_,</span><br><span class="line">        member0_.username as username3_0_ </span><br><span class="line">    from</span><br><span class="line">        member member0_</span><br><span class="line">total =&gt; 4</span><br></pre></td></tr></table></figure><p><strong>5 count 만 조회</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">       count(member0_.member_id) as col_0_0_ </span><br><span class="line">   from</span><br><span class="line">       member member0_</span><br></pre></td></tr></table></figure><h2 id="페이징"><a href="#페이징" class="headerlink" title="페이징"></a>페이징</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paging1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;Member&gt; results = queryFactory</span><br><span class="line">               .select(member)</span><br><span class="line">               .orderBy(member.username.desc())</span><br><span class="line">               .offset(<span class="number">1</span>)</span><br><span class="line">               .limit(<span class="number">2</span>)</span><br><span class="line">               .fetch();</span><br><span class="line"></span><br><span class="line">       assertThat(results.size()).isEqualTo(<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paging2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       QueryResults&lt;Member&gt; results = queryFactory</span><br><span class="line">               .select(member)</span><br><span class="line">               .orderBy(member.username.desc())</span><br><span class="line">               .offset(<span class="number">1</span>)</span><br><span class="line">               .limit(<span class="number">2</span>)</span><br><span class="line">               .fetchResults();</span><br><span class="line"></span><br><span class="line">       assertThat(results.getTotal()).isEqualTo(<span class="number">4</span>);</span><br><span class="line">       assertThat(results.getLimit()).isEqualTo(<span class="number">2</span>);</span><br><span class="line">       assertThat(results.getTotal()).isEqualTo(<span class="number">1</span>);</span><br><span class="line">       assertThat(results.getResults().size()).isEqualTo(<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="집합-함수"><a href="#집합-함수" class="headerlink" title="집합 함수"></a>집합 함수</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 집합함수</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aggregation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Tuple&gt; result = queryFactory</span><br><span class="line">                .select(</span><br><span class="line">                        member.count(),</span><br><span class="line">                        member.age.sum(),</span><br><span class="line">                        member.age.avg(),</span><br><span class="line">                        member.age.max(),</span><br><span class="line">                        member.age.min()</span><br><span class="line">                )</span><br><span class="line">                .from(member)</span><br><span class="line">                .fetch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 한개만 조회됨</span></span><br><span class="line">        Tuple tuple = result.get(<span class="number">0</span>);</span><br><span class="line">        assertThat(tuple.get(member.count())).isEqualTo(<span class="number">4</span>);</span><br><span class="line">        assertThat(tuple.get(member.age.sum())).isEqualTo(<span class="number">100</span>);</span><br><span class="line">        assertThat(tuple.get(member.age.avg())).isEqualTo(<span class="number">25</span>);</span><br><span class="line">        assertThat(tuple.get(member.age.max())).isEqualTo(<span class="number">40</span>);</span><br><span class="line">        assertThat(tuple.get(member.age.min())).isEqualTo(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="그룹-groupBy-having"><a href="#그룹-groupBy-having" class="headerlink" title="그룹 groupBy , having"></a>그룹 groupBy , having</h2><blockquote><p>팀의 이름과 각 팀의 평균연령을 구하는 예제</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">groupBy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Tuple&gt; results = queryFactory</span><br><span class="line">            .select(team.name, member.age.avg())</span><br><span class="line">            .from(member)</span><br><span class="line">            .join(member.team, team)</span><br><span class="line">            .groupBy(team.name)</span><br><span class="line">            .fetch();</span><br><span class="line"></span><br><span class="line">    Tuple teamA = results.get(<span class="number">0</span>);</span><br><span class="line">    Tuple teamB = results.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    assertThat(teamA.get(team.name)).isEqualTo(<span class="string">"teamA"</span>);</span><br><span class="line">    assertThat(teamA.get(member.age.avg())).isEqualTo(<span class="number">15</span>);</span><br><span class="line">    assertThat(teamB.get(team.name)).isEqualTo(<span class="string">"teamB"</span>);</span><br><span class="line">    assertThat(teamB.get(member.age.avg())).isEqualTo(<span class="number">35</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JPA 의 Querydsl 여러 문법에 활용하는 예제를 통해 쿼리를 작성해봅니다.&lt;br&gt;&lt;code&gt;Q-type&lt;/code&gt; &lt;code&gt;검색조건&lt;/code&gt; &lt;code&gt;fetch()&lt;/code&gt; &lt;code&gt;fetchCount()&lt;/code&gt; &lt;code&gt;QueryResults&lt;/code&gt; &lt;code&gt;페이징&lt;/code&gt;&lt;br&gt;&lt;code&gt;집합함수&lt;/code&gt; &lt;code&gt;groupBy&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ JPA" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-JPA/"/>
    
    
      <category term="jpa" scheme="http://yoursite.com/tags/jpa/"/>
    
      <category term="querydsl" scheme="http://yoursite.com/tags/querydsl/"/>
    
  </entry>
  
  <entry>
    <title>개발일지🌟 DB Connection Pool Error (DBCP)</title>
    <link href="http://yoursite.com/2020/04/27/DB-Connection-Pool/"/>
    <id>http://yoursite.com/2020/04/27/DB-Connection-Pool/</id>
    <published>2020-04-27T01:43:05.000Z</published>
    <updated>2020-05-28T05:39:32.737Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="ISSUE-1-DB-Connection-Pool-ERROR"><a href="#ISSUE-1-DB-Connection-Pool-ERROR" class="headerlink" title="ISSUE[1] DB Connection Pool ERROR"></a>ISSUE[1] DB Connection Pool ERROR</h2><h3 id="현상"><a href="#현상" class="headerlink" title="현상"></a>현상</h3><blockquote><p><strong>DB Connection pool error timeout waiting for idle object</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> DatabaseException - nested exception is org.apache.ibatis.exceptions.PersistenceException:</span><br><span class="line">### Error updating database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: </span><br><span class="line">Could not get JDBC Connection; nested exception is java.sql.SQLException: Cannot get a </span><br><span class="line">connection, pool error Timeout waiting for idle object</span><br></pre></td></tr></table></figure><h3 id="당시-DataBase-config"><a href="#당시-DataBase-config" class="headerlink" title="당시 DataBase config"></a>당시 DataBase config</h3><p><code>#max-active</code> <code>#min-idle</code> <code>#max-idle</code></p><blockquote><ul><li>풀의 초기 커넥션 갯수 : 10</li><li>Idle상태에 풀이 소유한 최소 커넥션 갯수 : 10</li><li>Idle상태에 풀이 소유한 최대 커넥션 갯수 : 30</li><li>최대 커넥션 갯수 : 50</li><li>커넥션이 존재하지 않을 때, 커넥션을 얻기까지 대기하는 최대 대기시간 : 5000</li></ul></blockquote><h3 id="원인-Transaction"><a href="#원인-Transaction" class="headerlink" title="원인 : @Transaction"></a>원인 : @Transaction</h3><p>특정 API 에서 <code>@Trnasaction</code> 이 걸려있었던 상태.<br>이 <code>transaction</code>이 <code>commit</code> 되지 않은 상태에서 이 API 의 요청이 급증하면서 connection 이 부족하게 되고, <strong>DB Dead Lock</strong> 에 빠지게 되었다.</p><p>게다가 해당 API 내에서 또다른 API나 외부호출 기능 수행단계는 7단계를 거쳐야 했다. 그러니 요청이 많이 오거나 중간단계에서 실패하면 부하가 걸릴 수 밖에 없었던 것이다.</p><h3 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h3><p>결론적으로는 @Transactional 어노테이션이 제거하기로 하였다.</p><hr><br/><p><code>JDBC</code> <code>DBCP</code></p><h2 id="일반적으로-DB-에서-Connection-을-얻어오는-과정"><a href="#일반적으로-DB-에서-Connection-을-얻어오는-과정" class="headerlink" title="일반적으로 DB 에서 Connection 을 얻어오는 과정"></a>일반적으로 DB 에서 Connection 을 얻어오는 과정</h2><blockquote><ol><li>DB 서버접속을 위한 JDBC 드라이버를 로드한다.</li><li>DB 접속정보와 DriverManager.getConnection() 을 통해 DB Connection 을 얻는다.</li><li>Connection 객체로부터 쿼리 수행을 위한 PreparedStatement 객체를 받는다.</li><li>executeQuery 를 수행후 ResultSet 객체로 결과를 처리한다.</li><li>완료 후, 사용된 리소스들을 close() 하여 반환한다.</li></ol></blockquote><p>웹 애플리케이션은 HTTP 요청에 의해 Thread 를 생성하게 되고 대부분의 비지니스 로직은 DB 서버로부터 데이터를 얻게 된다.<br>웹 어플리케이션을 지탱하는 WAS 에서 DB 서버에 접근을 시작하고 데이터를 가져오기까지 어느 단계에서 가장 많은 비용이 소비될까.</p><p><img src="https://user-images.githubusercontent.com/28856435/80331215-6764b280-8882-11ea-93f6-277ba2a0a99d.png" alt="image"></p><p>위와 같은 모든 요청에의해 DB접속을 위한 Driver를 로드하고 Connection 객체를 생성하여 연결한다면 물리적으로 DB 서버에 지속적으로 접근해야 한다.</p><h2 id="DBCP-HikariCP"><a href="#DBCP-HikariCP" class="headerlink" title="DBCP (HikariCP)"></a>DBCP (HikariCP)</h2><blockquote><p>이러한 문제를 해결하기 위해 나온 것이 <strong>DBCP</strong> 이다. DB Connection 객체를 생성하고 연결하는데 드는 비용과 시간을 줄이고 네트워크 연결에 대한 부담을 줄여준다.<br>SpringBoot 2.x 출범 이후 HikariCP 를 기본JDBC Connection Pool 로 사용 가능하게 되었다고 한다. 다른 Connection Pool 에 비해 성능이 압도적이라고 한다.<br><em><a href="https://woowabros.github.io/experience/2020/02/06/hikaricp-avoid-dead-lock.html" target="_blank" rel="noopener">HikariCP Dead lock에서 벗어나기 - 우아한형제들 기술블로그</a> 를 바탕으로 작성되었습니다.</em></p></blockquote><h3 id="getConnection"><a href="#getConnection" class="headerlink" title="getConnection"></a>getConnection</h3><p><strong>1. hikariPool.<em>getConnection()</em></strong><br>Thread 는 HikariCP 로부터 <code>connection</code> 을 요청한다.</p><p><strong>2. hikariPool.<em>concurrentBag.borrow()</em></strong><br><strong>2-a)</strong> 현재 Thread 가 이전에 사용했던 <code>connection</code> 리스트 중에 현재 사용가능한(idle) connection이 있는가<br><code>?connection:2-b</code><br><strong>2-b)</strong> hikari pool 전체 connection 중 현재 사용가능한(idle) connection이 있는가<br><code>?connection:2-c</code><br><strong>2-c)</strong> <em>concurrentBag.handOffQueue</em> (다른 Thread 가 쓰고 반납) 에 사용가능한(idle) connection이 있는가<br><code>?connection:2-d</code><br><strong>2-d)</strong> connectionTimeout 이 지났는지 확인한다. (HikariCP default Connection Timeout 은 30초)</p><h3 id="connection-close"><a href="#connection-close" class="headerlink" title="connection.close()"></a>connection.close()</h3><p>transaction 이 정상적으로 commit 혹은 오류로 인한 rollback 이 되면 <code>connection.close()</code> 가 호출되어 connection 을 Pool 에 반납한다.</p><ol><li>Thread : connection.close() </li><li>Hiraki<br>2-a) poolEntry.setState(SATE_NOT_IN_USE) idle Connetion 으로 변환.<br>2-b) concurrentBag.handOffQueue.off(poolEntry)</li></ol><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>위에서 해결한 connection pool error 의 원인은 transaction 에 의한 오류였다. 다음 포스팅에서는 이상적인 <code>#max-active</code> <code>#min-idle</code> <code>#max-idle</code> 을 설정하기 위해서는 무엇을 고려해봐야 하는지 끄적여보려 한다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DB Connection Pool Error 의 원인을 찾아보며&lt;br&gt;&lt;code&gt;DB Connection Pool&lt;/code&gt; 이 무엇인지, &lt;code&gt;DBCP&lt;/code&gt; 의 개념, &lt;code&gt;Hikari Pool&lt;/code&gt; 의 작동방식을 공부.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ DataBase" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-DataBase/"/>
    
    
      <category term="DBCP" scheme="http://yoursite.com/tags/DBCP/"/>
    
      <category term="DataBase" scheme="http://yoursite.com/tags/DataBase/"/>
    
  </entry>
  
  <entry>
    <title>Python 내장함수</title>
    <link href="http://yoursite.com/2020/04/22/Python%20%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98/"/>
    <id>http://yoursite.com/2020/04/22/Python%20%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98/</id>
    <published>2020-04-22T07:10:28.000Z</published>
    <updated>2020-04-28T01:36:01.147Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h3 id="zip-내장-함수-이진연산"><a href="#zip-내장-함수-이진연산" class="headerlink" title="zip 내장 함수, 이진연산"></a>zip 내장 함수, 이진연산</h3><h4 id="zip-은-길이가-같은-자료형을-묶어준다"><a href="#zip-은-길이가-같은-자료형을-묶어준다" class="headerlink" title="zip() 은 길이가 같은 자료형을 묶어준다."></a>zip() 은 길이가 같은 자료형을 묶어준다.</h4><p><strong>예를 들면, 다음과 같다.</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip([3,4,5], [1,2,3]) =&gt; (3,1),(4,2),(5,3)</span><br><span class="line">zip('ABC', [1,2,3])   =&gt; (A,1), (B,2), (C,3)</span><br></pre></td></tr></table></figure><h4 id="1-두-배열을-받아-n-을-받아-2-binary-연산후-3-자릿수만큼-빈곳은-“-”을-채운다"><a href="#1-두-배열을-받아-n-을-받아-2-binary-연산후-3-자릿수만큼-빈곳은-“-”을-채운다" class="headerlink" title="(1)두 배열을 받아, n 을 받아 (2)binary 연산후 (3)자릿수만큼 빈곳은 “#”을 채운다."></a>(1)두 배열을 받아, n 을 받아 (2)binary 연산후 (3)자릿수만큼 빈곳은 “#”을 채운다.</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ziplist</span><span class="params">(n)</span>:</span></span><br><span class="line">    arr1 =[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    n = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num1, num2 <span class="keyword">in</span> zip(arr1, arr2):</span><br><span class="line">        print(num1, num2)</span><br><span class="line">        tmp = bin(num1|num2)[<span class="number">2</span>:] <span class="comment"># 여기서 파이썬의만의 '문자열 슬라이싱' 아래에서 개념확인</span></span><br><span class="line">        print(<span class="string">'이진연산 후 '</span>+tmp)</span><br><span class="line"></span><br><span class="line">        tmp = tmp.rjust(n, <span class="string">'#'</span>)</span><br><span class="line">        print(<span class="string">'결과 '</span>+tmp)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure><p><strong>출력결과</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(3, 1)</span><br><span class="line">이진연산 후 11</span><br><span class="line">결과 ###11</span><br><span class="line">(4, 2)</span><br><span class="line">이진연산 후 110</span><br><span class="line">결과 ##110</span><br><span class="line">(5, 3)</span><br><span class="line">이진연산 후 111</span><br><span class="line">결과 ##111</span><br></pre></td></tr></table></figure><h3 id="python-문자열-슬라이싱"><a href="#python-문자열-슬라이싱" class="headerlink" title="python 문자열 슬라이싱"></a>python 문자열 슬라이싱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"Pithon"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">1</span>]</span><br><span class="line"><span class="string">'P'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:]</span><br><span class="line"><span class="string">'thon'</span></span><br></pre></td></tr></table></figure><h3 id="rJust-함수-N자릿수로-리턴-빈곳은”-”-으로-채우기"><a href="#rJust-함수-N자릿수로-리턴-빈곳은”-”-으로-채우기" class="headerlink" title="rJust 함수 : N자릿수로 리턴(빈곳은”#” 으로 채우기)"></a>rJust 함수 : N자릿수로 리턴(빈곳은”#” 으로 채우기)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rjst</span><span class="params">(n)</span>:</span></span><br><span class="line">    list= [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</span><br><span class="line">    tostring = <span class="string">""</span>.join(list)</span><br><span class="line">    <span class="keyword">if</span> n &gt; len(tostring):</span><br><span class="line">        tostring = tostring.rjust(n, <span class="string">'#'</span>)</span><br><span class="line">    print(<span class="string">"tostring : "</span> + tostring)</span><br><span class="line">    <span class="comment"># tostring : #######123</span></span><br><span class="line"></span><br><span class="line"> rjst(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="번외-숫자를-한-자리수로-잘라-각각-리스트에-담기"><a href="#번외-숫자를-한-자리수로-잘라-각각-리스트에-담기" class="headerlink" title="(번외) 숫자를 한 자리수로 잘라 각각 리스트에 담기"></a>(번외) 숫자를 한 자리수로 잘라 각각 리스트에 담기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numToList</span><span class="params">(number)</span>:</span></span><br><span class="line">    n = <span class="number">234</span></span><br><span class="line">    list = [ int(i) <span class="keyword">for</span> i <span class="keyword">in</span> str(n)]</span><br><span class="line">    print(list)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">    <span class="comment"># list= [2, 3, 4]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1) 알고리즘 문제 예제를 통해 zip 내장 함수, 이진연산, rJust함수 알아보기&lt;br&gt;2) (번외) 숫자를 한 자리수로 잘라 각각 리스트에 담기&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Python" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="python 이진연산" scheme="http://yoursite.com/tags/python-%EC%9D%B4%EC%A7%84%EC%97%B0%EC%82%B0/"/>
    
      <category term="rJust" scheme="http://yoursite.com/tags/rJust/"/>
    
  </entry>
  
  <entry>
    <title>CODING TEST {&quot;싱글숫자 구하기&quot;} with Java</title>
    <link href="http://yoursite.com/2020/04/22/CODING-TEST-with-Java-0/"/>
    <id>http://yoursite.com/2020/04/22/CODING-TEST-with-Java-0/</id>
    <published>2020-04-22T07:03:14.000Z</published>
    <updated>2020-04-28T01:36:01.136Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h2 id="문제-싱글숫자-구하기"><a href="#문제-싱글숫자-구하기" class="headerlink" title="[문제] 싱글숫자 구하기"></a>[문제] 싱글숫자 구하기</h2><blockquote><p>Q. Given a non-empty array of integers, every element appears twice except for one. Find that single one.</p></blockquote><p><strong>문제가 생겼다.</strong><br>다들 아시겠지만, 해석해보자면 배열 안에 자기 짝이 없는 Single N 을 리턴하는 문제이다.<br>누구나 생각할 수 있는 이중 for 문을 사용해 풀었는데<br>이상하게도 아래 주석된 부분의 <code>if(list.get(i)==list.get(j))</code> 이 부분에서 비교를 잘 못하는 오류가 발생했다.<br>두 자리 수 까지는 비교연산이 잘 되는데 왠지 세자리 수 부터 안되는 듯 보였다.<br>혹시 하여 세자리 수에서 십의자리를 늘려가며 까지 연산 테스트를 했는데 130부터 비교되지 않는것..</p><p><strong>해결 되었다.</strong><br>해결책은 가장 근본적인 데에 있었다.<br>리스트의 Generics 가 Integer 로 되어 있었는데 <code>==</code> 연산자를 써서 비교했던것 ..<br>자세한 설명은 아래에서 더 하겠다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> single = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.stream(nums).boxed().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> isSingle = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;list.size(); j++)&#123;</span><br><span class="line">                <span class="comment">// if(list.get(i)==list.get(j))&#123;        ----&gt; ERROR</span></span><br><span class="line">                <span class="keyword">if</span>(list.get(i).equals(list.get(j)))&#123;</span><br><span class="line">                    isSingle = <span class="keyword">false</span>;</span><br><span class="line">                    list.remove(list.get(i));</span><br><span class="line">                    j--;</span><br><span class="line">                    list.remove(list.get(j));</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isSingle)&#123;</span><br><span class="line">                single = list.get(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br/><h2 id="JAVA-기본형-Primitive-type-vs-참조형-Reference-type"><a href="#JAVA-기본형-Primitive-type-vs-참조형-Reference-type" class="headerlink" title="JAVA 기본형(Primitive type) vs 참조형(Reference type)"></a>JAVA 기본형(Primitive type) vs 참조형(Reference type)</h2><p><strong>기본형 (Primitive type)</strong><br>o 연산자를 <code>값</code> 으로 비교할 수 있다. 즉, 산술연산이 가능하다.<br>o 초기값을 필요로 한다.<br>o 종류<br>  <code>void</code>, <code>boolean</code>, <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>char</code>, <code>boolean</code>, <code>void</code></p><p><strong>참조형의 종류에는 아래와 같은 타입들이 존재한다.</strong><br>o 연산자가 객체의 <code>주소값</code> 으로 비교된다. 산술연산이 불가하다.<br>o 초기값을 NULL 로 지정할 수 있다.<br>o 종류<br>  <code>Void</code>, <code>Boolean</code>, <code>Byte</code>, <code>Short</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, <code>Double</code>, <code>Character</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 매일매일 코딩테스트 with 자바&lt;/p&gt;
&lt;p&gt;1) 배열안에는 커플숫자 여러개와 싱글숫자 하나만 존재한다. 싱글숫자 구하기.&lt;br&gt;2) 여기서 다시 깨닫는 기초. JAVA 기본형(Primitive type) vs 참조형(Reference type)&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ coding test" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-coding-test/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="codingtest" scheme="http://yoursite.com/tags/codingtest/"/>
    
  </entry>
  
  <entry>
    <title>CODING TEST with Java</title>
    <link href="http://yoursite.com/2020/04/14/coding-test-with-Java/"/>
    <id>http://yoursite.com/2020/04/14/coding-test-with-Java/</id>
    <published>2020-04-13T15:05:31.000Z</published>
    <updated>2020-04-28T01:36:01.150Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="최대공약수와-최소공배수"><a href="#최대공약수와-최소공배수" class="headerlink" title="최대공약수와 최소공배수"></a>최대공약수와 최소공배수</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =====================================================================================================</span></span><br><span class="line"><span class="comment">// 문제 설명</span></span><br><span class="line"><span class="comment">// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수,</span></span><br><span class="line"><span class="comment">// solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.</span></span><br><span class="line"><span class="comment">// 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 제한 사항</span></span><br><span class="line"><span class="comment">// 두 수는 1이상 1000000이하의 자연수입니다.</span></span><br><span class="line"><span class="comment">// =====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] solution(<span class="keyword">int</span> n, <span class="keyword">int</span> m) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">1000000</span>; <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> fstnum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sndnum = <span class="number">0</span>;</span><br><span class="line">    List&lt;Integer&gt; fstnumArr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> multi = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m)&#123;</span><br><span class="line">        fstnum= n;</span><br><span class="line">        sndnum = m;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; fstnum =m; sndnum=n; &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"fstnum : "</span>+fstnum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=fstnum; i++)&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"i= %d/ fstnum 나머지= %d"</span>, i, fstnum%i));</span><br><span class="line">        <span class="keyword">if</span>(fstnum%i==<span class="number">0</span>) &#123;</span><br><span class="line">            fstnumArr.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"fstnumArr : "</span>+ fstnumArr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= fstnumArr.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sndnum%fstnumArr.get(i)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min&gt;fstnumArr.get(i))&#123;</span><br><span class="line">                min = fstnumArr.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            multi *= fstnumArr.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"최대 공약수 : "</span> + min);</span><br><span class="line">    System.out.println(<span class="string">"multi : "</span> + multi);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 최대공배수는 각 2개 숫자를 (최소공약수들의 곱의 값으로 나눈 수)* (최소공약수들의 곱)</span></span><br><span class="line">    max = (n/multi) * (m/multi) * multi;</span><br><span class="line">    System.out.println(<span class="string">"최소 공배수 : "</span>+ max);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] answer = <span class="keyword">new</span> Solution().solution(<span class="number">3</span>, <span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="행렬의-덧셈"><a href="#행렬의-덧셈" class="headerlink" title="행렬의 덧셈"></a>행렬의 덧셈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// =====================================================================================================</span></span><br><span class="line">    <span class="comment">// 문제 설명</span></span><br><span class="line">    <span class="comment">// 행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. </span></span><br><span class="line">    <span class="comment">// 2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요.</span></span><br><span class="line">    <span class="comment">// =====================================================================================================</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] solution2(<span class="keyword">int</span>[][] arr1, <span class="keyword">int</span>[][] arr2) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr1.length;</span><br><span class="line">    <span class="keyword">int</span>[][] answer =  <span class="keyword">new</span> <span class="keyword">int</span>[len][arr1[<span class="number">0</span>].length];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr1[i].length; j++)&#123;</span><br><span class="line">            answer[i][j] = arr1[i][j] + arr2[i][j];</span><br><span class="line">            System.out.println(<span class="string">"answer : "</span>+ Arrays.deepToString(answer));</span><br><span class="line">            <span class="comment">//1차원 배열에서는 toString 가능, 2차원 이상에서는 Arrays.deepToString(answer) </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// int[] answer = new Solution().solution(3, 12);</span></span><br><span class="line">    <span class="keyword">int</span>[][] arr1 = &#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] arr2 = &#123;&#123;<span class="number">2</span>&#125;,&#123;<span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] answer = <span class="keyword">new</span> Solution().solution2(arr1, arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 매일매일 코딩테스트 with 자바&lt;/p&gt;
&lt;p&gt;1) 최대공약수와 최소공배수를 반환하는 함수 구현&lt;br&gt;2) 행렬의 덧셈을 반환하는 함수구현&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ coding test" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-coding-test/"/>
    
    
  </entry>
  
  <entry>
    <title>CODING TEST with Java</title>
    <link href="http://yoursite.com/2020/04/14/coding-test-with-Java%20copy/"/>
    <id>http://yoursite.com/2020/04/14/coding-test-with-Java%20copy/</id>
    <published>2020-04-13T15:05:31.000Z</published>
    <updated>2020-04-28T01:36:01.149Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="최대공약수와-최소공배수"><a href="#최대공약수와-최소공배수" class="headerlink" title="최대공약수와 최소공배수"></a>최대공약수와 최소공배수</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =====================================================================================================</span></span><br><span class="line"><span class="comment">// 문제 설명</span></span><br><span class="line"><span class="comment">// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수,</span></span><br><span class="line"><span class="comment">// solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.</span></span><br><span class="line"><span class="comment">// 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 제한 사항</span></span><br><span class="line"><span class="comment">// 두 수는 1이상 1000000이하의 자연수입니다.</span></span><br><span class="line"><span class="comment">// =====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] solution(<span class="keyword">int</span> n, <span class="keyword">int</span> m) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">1000000</span>; <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> fstnum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sndnum = <span class="number">0</span>;</span><br><span class="line">    List&lt;Integer&gt; fstnumArr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> multi = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m)&#123;</span><br><span class="line">        fstnum= n;</span><br><span class="line">        sndnum = m;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; fstnum =m; sndnum=n; &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"fstnum : "</span>+fstnum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=fstnum; i++)&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"i= %d/ fstnum 나머지= %d"</span>, i, fstnum%i));</span><br><span class="line">        <span class="keyword">if</span>(fstnum%i==<span class="number">0</span>) &#123;</span><br><span class="line">            fstnumArr.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"fstnumArr : "</span>+ fstnumArr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= fstnumArr.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sndnum%fstnumArr.get(i)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min&gt;fstnumArr.get(i))&#123;</span><br><span class="line">                min = fstnumArr.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            multi *= fstnumArr.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"최대 공약수 : "</span> + min);</span><br><span class="line">    System.out.println(<span class="string">"multi : "</span> + multi);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 최대공배수는 각 2개 숫자를 (최소공약수들의 곱의 값으로 나눈 수)* (최소공약수들의 곱)</span></span><br><span class="line">    max = (n/multi) * (m/multi) * multi;</span><br><span class="line">    System.out.println(<span class="string">"최소 공배수 : "</span>+ max);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] answer = <span class="keyword">new</span> Solution().solution(<span class="number">3</span>, <span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="행렬의-덧셈"><a href="#행렬의-덧셈" class="headerlink" title="행렬의 덧셈"></a>행렬의 덧셈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// =====================================================================================================</span></span><br><span class="line">    <span class="comment">// 문제 설명</span></span><br><span class="line">    <span class="comment">// 행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. </span></span><br><span class="line">    <span class="comment">// 2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요.</span></span><br><span class="line">    <span class="comment">// =====================================================================================================</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] solution2(<span class="keyword">int</span>[][] arr1, <span class="keyword">int</span>[][] arr2) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr1.length;</span><br><span class="line">    <span class="keyword">int</span>[][] answer =  <span class="keyword">new</span> <span class="keyword">int</span>[len][arr1[<span class="number">0</span>].length];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr1[i].length; j++)&#123;</span><br><span class="line">            answer[i][j] = arr1[i][j] + arr2[i][j];</span><br><span class="line">            System.out.println(<span class="string">"answer : "</span>+ Arrays.deepToString(answer));</span><br><span class="line">            <span class="comment">//1차원 배열에서는 toString 가능, 2차원 이상에서는 Arrays.deepToString(answer) </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// int[] answer = new Solution().solution(3, 12);</span></span><br><span class="line">    <span class="keyword">int</span>[][] arr1 = &#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] arr2 = &#123;&#123;<span class="number">2</span>&#125;,&#123;<span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] answer = <span class="keyword">new</span> Solution().solution2(arr1, arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 매일매일 코딩테스트 with 자바&lt;/p&gt;
&lt;p&gt;1) 최대공약수와 최소공배수를 반환하는 함수 구현&lt;br&gt;2) 행렬의 덧셈을 반환하는 함수구현&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ coding test" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-coding-test/"/>
    
    
  </entry>
  
  <entry>
    <title>CODING TEST with Python</title>
    <link href="http://yoursite.com/2020/04/12/CODING-TEST-with-Python/"/>
    <id>http://yoursite.com/2020/04/12/CODING-TEST-with-Python/</id>
    <published>2020-04-12T14:51:24.000Z</published>
    <updated>2020-04-28T01:36:01.137Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="Return-n-정수를-받아서-각자리수의-합"><a href="#Return-n-정수를-받아서-각자리수의-합" class="headerlink" title="Return  n 정수를 받아서 각자리수의 합"></a>Return  n 정수를 받아서 각자리수의 합</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment">## 코딩 테스트</span></span><br><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment"># 문제 설명</span></span><br><span class="line"><span class="comment"># n 정수를 받아서 각자리수의 합을 구함 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">substring</span><span class="params">(n)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    num = str(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(num)):</span><br><span class="line">        print(<span class="string">"i = "</span>+str(i))</span><br><span class="line"></span><br><span class="line">        cut= num[i:i+<span class="number">1</span>]</span><br><span class="line">        print(<span class="string">"num &#123;0&#125;=&gt; cut &#123;1&#125;"</span>.format(num, cut))</span><br><span class="line">        sum += cut</span><br><span class="line">        print(sum)</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n)</span>:</span></span><br><span class="line">    answer = substring(n)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line">print(<span class="string">"result : "</span> + str(solution(<span class="number">123</span>)))</span><br></pre></td></tr></table></figure><h2 id="Return-x부터-시작해-x씩-증가하는-숫자를-n개-지니는-리스트"><a href="#Return-x부터-시작해-x씩-증가하는-숫자를-n개-지니는-리스트" class="headerlink" title="Return x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트"></a>Return x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment">## 코딩 테스트</span></span><br><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment"># 문제 설명</span></span><br><span class="line"><span class="comment"># 함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 </span></span><br><span class="line"><span class="comment"># 지니는 리스트를 리턴해야 합니다. 다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 제한 조건</span></span><br><span class="line"><span class="comment"># x는 -10000000 이상, 10000000 이하인 정수입니다.</span></span><br><span class="line"><span class="comment"># n은 1000 이하인 자연수입니다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution2</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    answer= []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        answer.append(x*i)</span><br><span class="line">        print(<span class="string">"answer : &#123;0&#125;"</span>.format(answer))</span><br><span class="line">solution2(<span class="number">2</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="각-문자열의-인덱스-n번째-글자기준-정렬"><a href="#각-문자열의-인덱스-n번째-글자기준-정렬" class="headerlink" title="각 문자열의 인덱스 n번째 글자기준 정렬"></a>각 문자열의 인덱스 n번째 글자기준 정렬</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment">## 코딩 테스트</span></span><br><span class="line"><span class="comment">#========================================================</span></span><br><span class="line"><span class="comment"># 문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 </span></span><br><span class="line"><span class="comment"># 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 [sun, bed, car]이고 n이 1이면 </span></span><br><span class="line"><span class="comment"># 각 단어의 인덱스 1의 문자 u, e, a로 strings를 정렬합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 제한 조건</span></span><br><span class="line"><span class="comment"># strings는 길이 1 이상, 50이하인 배열입니다.</span></span><br><span class="line"><span class="comment"># strings의 원소는 소문자 알파벳으로 이루어져 있습니다.</span></span><br><span class="line"><span class="comment"># strings의 원소는 길이 1 이상, 100이하인 문자열입니다.</span></span><br><span class="line"><span class="comment"># 모든 strings의 원소의 길이는 n보다 큽니다.</span></span><br><span class="line"><span class="comment"># 인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 입출력 예 1</span></span><br><span class="line"><span class="comment"># sun, bed, car의 1번째 인덱스 값은 각각 u, e, a 입니다. 이를 기준으로 strings를 정렬하면 [car, bed, sun] 입니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 입출력 예 2</span></span><br><span class="line"><span class="comment"># abce와 abcd, cdx의 2번째 인덱스 값은 c, c, x입니다. 따라서 정렬 후에는 cdx가 가장 뒤에 위치합니다. </span></span><br><span class="line"><span class="comment"># abce와 abcd는 사전순으로 정렬하면 abcd가 우선하므로, 답은 [abcd, abce, cdx] 입니다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeArr</span><span class="params">(strings, n)</span>:</span></span><br><span class="line">    answer = []</span><br><span class="line">    tupList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strings:</span><br><span class="line">        tmp = i[n:n+<span class="number">1</span>]</span><br><span class="line">        tup = (i, tmp)</span><br><span class="line">        tupList.append(tup)</span><br><span class="line">        print(tupList) </span><br><span class="line">        <span class="comment"># 기본 튜플 정렬 </span></span><br><span class="line">        <span class="comment"># key = lambda x : x[0]</span></span><br><span class="line">        <span class="comment"># 1) 1번째 원소 정렬후 0번째 원소로 정렬</span></span><br><span class="line">        <span class="comment"># key = lambda x : (x[1], x[0])</span></span><br><span class="line">        <span class="comment"># 2) 1번째 원소 내림차순 정렬후 0번째 원소로 정렬</span></span><br><span class="line">        <span class="comment"># key = lambda x : (-x[1], x[0])</span></span><br><span class="line">    tupList.sort(key = <span class="keyword">lambda</span> x : (x[<span class="number">1</span>],x[<span class="number">0</span>]))</span><br><span class="line">    print(<span class="string">"after sort"</span>)</span><br><span class="line">    print(tupList)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">stringList = [<span class="string">'abcw'</span>, <span class="string">'abce'</span>, <span class="string">'cdx'</span>]</span><br><span class="line">n = <span class="number">2</span></span><br><span class="line">makeArr(stringList, n);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📜 매일매일 코딩테스트 with 파이썬&lt;/p&gt;
&lt;p&gt;1) 정수N 자릿수의 합&lt;br&gt;2) X부터 X만큼 증가, N개를 저장하는 리스트&lt;br&gt;3) 배열내 갹 문자열의 인덱스 n번째 글자기준 정렬&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ coding test" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-coding-test/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>스프링 시큐리티 OAuth 사용한 로그인 기능구현</title>
    <link href="http://yoursite.com/2020/03/26/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0%20%EB%A1%9C%EA%B7%B8%EC%9D%B8%EA%B5%AC%ED%98%84/"/>
    <id>http://yoursite.com/2020/03/26/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0%20%EB%A1%9C%EA%B7%B8%EC%9D%B8%EA%B5%AC%ED%98%84/</id>
    <published>2020-03-26T13:17:40.000Z</published>
    <updated>2020-04-28T01:36:01.152Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><br/><h3 id="스프링-시큐리티-Spring-Security"><a href="#스프링-시큐리티-Spring-Security" class="headerlink" title="스프링 시큐리티 Spring Security"></a>스프링 시큐리티 Spring Security</h3><blockquote><p>인증(Authentication)과 인가(Authorization) (권한부여)를 가진 프레임워크이다.</p></blockquote><ul><li>2.0 버전에서 부터는 client 인증정보만 필요로 하게 되었다.</li></ul><h3 id="Google-Cloud-Platform-에서-인증용-API-신청하기"><a href="#Google-Cloud-Platform-에서-인증용-API-신청하기" class="headerlink" title="Google Cloud Platform 에서 인증용 API 신청하기"></a>Google Cloud Platform 에서 인증용 API 신청하기</h3><blockquote><p><a href="https://console.cloud.google.com/home/dashboard?project=fruite" target="_blank" rel="noopener">구글클라우드 플랫폼</a> 에 접속하여 프로젝트를 생성한다. 여기서 발급된 인증정보 <code>clientId</code>, <code>clientSecret</code> 을 통해 스프링 시큐리티를 사용한 로그인 기능을 구현할 수 있다.</p></blockquote><p><strong>생성된 프로젝트에서 OAuth 동의화면을 구성한다.</strong><br><img src="https://user-images.githubusercontent.com/28856435/77653327-e1b7c380-6fb2-11ea-98bd-5ac9eb7393db.png" alt="image"><br><br/></p><p><strong>웹 어플리케이션 유형의 사용자 인증정보를 만든다.</strong><br><img src="https://user-images.githubusercontent.com/28856435/77651410-17a77880-6fb0-11ea-9bf4-5ee0d1c1fed2.png" alt="image"><br><br/></p><p><strong>아래와 같이 웹 어플리케이션의 클라이언트ID가 생성되었다.</strong><br><img src="https://user-images.githubusercontent.com/28856435/77651295-ecbd2480-6faf-11ea-85b2-09bbb8da3f9d.png" alt="image"><br><br/></p><h3 id="로그인-구현을-위한-설정"><a href="#로그인-구현을-위한-설정" class="headerlink" title="로그인 구현을 위한 설정"></a>로그인 구현을 위한 설정</h3><p><strong>build.gradle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-security:2.1.2.RELEASE'</span></span><br><span class="line">implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-oauth2:2.1.2.RELEASE'</span></span><br><span class="line"></span><br><span class="line">compile(<span class="string">'org.springframework.security:spring-security-oauth2-client'</span>)</span><br><span class="line">compile(<span class="string">'org.springframework.security:spring-security-oauth2-jose'</span>)</span><br></pre></td></tr></table></figure><p> <strong>application-oauth.properties</strong><br> /src/main/resources/static/application-oauth.properties 파일을 추가한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.security.oauth2.client.registration.google.client-id=&#123;클라이언트 ID&#125;</span><br><span class="line">spring.security.oauth2.client.registration.google.client-secret=&#123;secret 코드&#125;</span><br><span class="line">spring.security.oauth2.client.registration.google.scope=profile,email</span><br></pre></td></tr></table></figure><p><strong>.gitIgnore</strong><br>해당 설정파일을 gitIgnore 에 넣어준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application-oauth.properties</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong><br><code>include: oauth</code> 를 추가한다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">include:</span> <span class="string">oauth</span></span><br></pre></td></tr></table></figure><h3 id="소셜-인증-구현하기"><a href="#소셜-인증-구현하기" class="headerlink" title="소셜 인증 구현하기"></a>소셜 인증 구현하기</h3><h4 id="ClientResources-클래스"><a href="#ClientResources-클래스" class="headerlink" title="ClientResources 클래스"></a>ClientResources 클래스</h4><p>프로퍼티 설정을 편리하게 이용 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientResources</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NestedConfigurationProperty</span></span><br><span class="line"><span class="keyword">private</span> AuthorizationCodeResourceDetails client = <span class="keyword">new</span> AuthorizationCodeResourceDetails();</span><br><span class="line"><span class="meta">@NestedConfigurationProperty</span></span><br><span class="line"><span class="keyword">private</span> ResourceServerProperties resource = <span class="keyword">new</span> ResourceServerProperties();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationCodeResourceDetails <span class="title">geClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResourceServerProperties <span class="title">getResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> resource;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>** 혹시나 AuthorizationCodeResourceDetails 이 추가되지 않으면 oauth2-autoconfigure 디펜던시가 필요하다.<br>   build.gradle 에 아래와 같이 추가해준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.1.7.RELEASE'</span></span><br></pre></td></tr></table></figure><h4 id="SecurityConfig-클래스-작성"><a href="#SecurityConfig-클래스-작성" class="headerlink" title="SecurityConfig 클래스 작성"></a>SecurityConfig 클래스 작성</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableOAuth</span>2Client</span><br><span class="line"><span class="function"><span class="keyword">public</span> class SecurityConfig extends <span class="title">WebSecurityConfigAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConfigurationProperties</span>(<span class="string">"google"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ClientResources <span class="title">google</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ClientResources();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 인증 요청에 따른 리다이렉션을 위한 빈 등록</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">oauth2ClientFilterRegistration</span><span class="params">(OAuth2ClientContextFilter filter)</span> </span>&#123;</span><br><span class="line">FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">registration.setFilter(filter);</span><br><span class="line">registration.setOrder(-<span class="number">100</span>); <span class="comment">//Spring Security 필터보다 우선순위를 낮게 둔다.</span></span><br><span class="line"><span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Filter <span class="title">ssoFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CompositeFilter filter = <span class="keyword">new</span> CompositeFilter();</span><br><span class="line">List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;Filter&gt;();</span><br><span class="line"></span><br><span class="line">filters.add(ssoFilter(google(), <span class="string">"/login/google"</span>));</span><br><span class="line">filter.setFilters(filters);</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Filter <span class="title">ssoFilter</span><span class="params">(ClientResources client, String path)</span> </span>&#123;</span><br><span class="line"><span class="comment">// OAuth2ClientAuthenticationProcessingFilter</span></span><br><span class="line"><span class="comment">// -&gt; OAuth2 인증 서버에서 OAuth2 액세스 토큰을 획득.</span></span><br><span class="line"><span class="comment">// -&gt; 인증 객체를 SecurityContext 에 로드하는 데 사용할 수 있는 OAuth2 클라이언트 필터</span></span><br><span class="line">OAuth2ClientAuthenticationProcessingFilter filter = <span class="keyword">new</span> OAuth2ClientAuthenticationProcessingFilter(path);</span><br><span class="line">OAuth2RestTemplate restTemplate = <span class="keyword">new</span> OAuth2RestTemplate(client.getClient(), oauth2ClientContext);</span><br><span class="line">filter.setRestTemplate(restTemplate);</span><br><span class="line">UserInfoTokenServices tokenServices = </span><br><span class="line"><span class="keyword">new</span> UserInfoTokenServices(client.getResource().getUserInfoUri(), client.getClient().getClientId());</span><br><span class="line">filter.setTokenServices(tokenServices);</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🍃 SpringBoot, SpringSecurity, OAuth2 를 이용해 Google 로그인을 구현해 봅니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Spring" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Spring/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="OAuth2" scheme="http://yoursite.com/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>Git pull 오류: Nothing to fetch</title>
    <link href="http://yoursite.com/2020/03/17/Git-pull-%EC%98%A4%EB%A5%98-Nothing-to-fetch/"/>
    <id>http://yoursite.com/2020/03/17/Git-pull-%EC%98%A4%EB%A5%98-Nothing-to-fetch/</id>
    <published>2020-03-17T03:09:22.000Z</published>
    <updated>2020-04-28T01:36:01.139Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h3 id="Git-pull-오류"><a href="#Git-pull-오류" class="headerlink" title="Git pull 오류"></a>Git pull 오류</h3><p>이클립스에서 git pull 을 실행하고 아래와 같으 오류를 직면했다.</p><p><img src="https://user-images.githubusercontent.com/28856435/76814014-f969ac00-683c-11ea-865c-62c14c550d22.png" alt="image"></p><h4 id="원인"><a href="#원인" class="headerlink" title="원인?"></a>원인?</h4><blockquote><p>remote 에 fetch 가 잡히지 않아서이다.</p></blockquote><p>그럼 또 의문이 생긴다. 왜 remote 에 fetch 를 잡아줘야 할까 ?<br>Git 에 대해 정확한 개념이 잡혀 있지 않은 듯해서 모호한 개념들에 대해 찾아봤다.</p><h3 id="origin-remote-정확히-짚고-가기"><a href="#origin-remote-정확히-짚고-가기" class="headerlink" title="origin remote 정확히 짚고 가기"></a>origin remote 정확히 짚고 가기</h3><p>필자의 블로그 repository 주소는 <code>https://github.com/ksso730/myblog.git</code> 이다.<br>로컬에 이 서버를 clone 하게되면 Git 은 자동으로 <code>origin</code> 이라는 이름을 붙인다.<br><code>origin</code> 으로부터 해당 repository 데이터를 모두 받고, <code>master</code> 브랜치를 가리키는 포인터를 만든다. 이 포인터를 <code>origin/master</code> 라 부른다.<br>Git 은 로컬의 <code>master</code> 브랜치가 <code>origin/master</code> 를 가리키게 한다.</p><p>정리해보자면 ,</p><p><code>https://github.com/ksso730/myblog.git</code></p><p>(My Computer - origin/master) -&gt; </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;💬 &lt;em&gt;작성중&lt;/em&gt;&lt;br&gt;이클립스에서 Git pull 오류: Nothing to fetch 해결 방법입니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Git" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>gradle 프로젝트 MariaDB 연동</title>
    <link href="http://yoursite.com/2020/03/16/gradle-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-MariaDB-%EC%97%B0%EB%8F%99/"/>
    <id>http://yoursite.com/2020/03/16/gradle-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-MariaDB-%EC%97%B0%EB%8F%99/</id>
    <published>2020-03-16T07:26:02.000Z</published>
    <updated>2020-04-28T01:36:01.150Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h3 id="Test-소스-구조"><a href="#Test-소스-구조" class="headerlink" title="Test 소스 구조"></a>Test 소스 구조</h3><p><img src="https://user-images.githubusercontent.com/28856435/77139690-4efebc80-6aba-11ea-858e-ae959d58ea4a.png" alt="image"></p><br/><h3 id="build-gradle-에-의존성-주입"><a href="#build-gradle-에-의존성-주입" class="headerlink" title="build.gradle 에 의존성 주입"></a>build.gradle 에 의존성 주입</h3><p><strong>build.gradle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.1.7.RELEASE'</span></span><br><span class="line">    id <span class="string">'io.spring.dependency-management'</span> version <span class="string">'1.0.7.RELEASE'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.sue'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="string">'1.8'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123; url <span class="string">"https://plugins.gradle.org/m2/"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//mybatis</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-dependencies:2.0.5.RELEASE'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 스프링 부트를 사용하기 위함</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 데이터를 연동하기 위함</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">//mariadb 사용</span></span><br><span class="line">    compile(<span class="string">"mysql:mysql-connector-java:5.1.34"</span>)</span><br><span class="line">    compile(<span class="string">"org.mariadb.jdbc:mariadb-java-client"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use JUnit test framework</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml-설정파일-생성"><a href="#application-yml-설정파일-생성" class="headerlink" title="application.yml 설정파일 생성"></a>application.yml 설정파일 생성</h3><h4 id="DB-연동-실패한-application-yml"><a href="#DB-연동-실패한-application-yml" class="headerlink" title="DB 연동 실패한 application.yml"></a>DB 연동 실패한 application.yml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /</span><br><span class="line">      </span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//127.0.0.1/sosi?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    username: root</span><br><span class="line">    password: mysql1234</span><br><span class="line">    </span><br><span class="line">    jpa:</span><br><span class="line">    show-sql: <span class="keyword">true</span></span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: create</span><br><span class="line">      naming:</span><br><span class="line">        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span><br><span class="line">      use-<span class="keyword">new</span>-id-generator-mappings: <span class="keyword">false</span></span><br><span class="line">    properties:</span><br><span class="line">       hibernate:</span><br><span class="line">          dialect: org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">          format_sql: <span class="keyword">true</span></span><br><span class="line">    open-in-view: <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-<span class="number">8</span></span><br><span class="line">      enabled: <span class="keyword">true</span></span><br><span class="line">      force: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>위와 같았던 application.yml 파일을 아래와 같이 고쳤더니 DB 연동에 성공했다.<br>DB 연동에 필요했던 profile 이 없었던것.<br>그리고 <code>datasource</code> 상위의 속성도 빠뜨려져 있었다.<br><code>ddl-auto</code> 속성은 DB 생성 이후 <code>create</code> -&gt; <code>update</code> 로 바꿔주었다.</p><h4 id="DB-연동-성공한-application-yml"><a href="#DB-연동-성공한-application-yml" class="headerlink" title="DB 연동 성공한 application.yml"></a>DB 연동 성공한 application.yml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /</span><br><span class="line">    </span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active:       </span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/sue</span></span><br><span class="line">    username: root</span><br><span class="line">    password: ehdrmf</span><br><span class="line">    </span><br><span class="line">  jpa:</span><br><span class="line">    show-sql: <span class="keyword">true</span></span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">      naming:</span><br><span class="line">        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span><br><span class="line">      use-<span class="keyword">new</span>-id-generator-mappings: <span class="keyword">false</span></span><br><span class="line">    properties:</span><br><span class="line">       hibernate:</span><br><span class="line">          dialect: org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">          format_sql: <span class="keyword">true</span></span><br><span class="line">    open-in-view: <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-<span class="number">8</span></span><br><span class="line">      enabled: <span class="keyword">true</span></span><br><span class="line">      force: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gradle 프로젝트에서의 mariaDB 연동방법을 알아봅니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Config" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Config/"/>
    
    
      <category term="jpa" scheme="http://yoursite.com/tags/jpa/"/>
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
      <category term="mariadb" scheme="http://yoursite.com/tags/mariadb/"/>
    
  </entry>
  
  <entry>
    <title>JPA 공통 매핑정보 사용</title>
    <link href="http://yoursite.com/2020/03/04/JPA-%EA%B3%B5%ED%86%B5-%EB%A7%A4%ED%95%91%EC%A0%95%EB%B3%B4-%EC%82%AC%EC%9A%A9/"/>
    <id>http://yoursite.com/2020/03/04/JPA-%EA%B3%B5%ED%86%B5-%EB%A7%A4%ED%95%91%EC%A0%95%EB%B3%B4-%EC%82%AC%EC%9A%A9/</id>
    <published>2020-03-04T14:07:50.000Z</published>
    <updated>2020-04-28T01:36:01.142Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h3 id="MappedSuperclass"><a href="#MappedSuperclass" class="headerlink" title="@MappedSuperclass"></a>@MappedSuperclass</h3><p><code>BaseEntity</code> 클래스.<br>자주쓰이는 공통으로 사용되는 매핑정보들을 모아, 상속받아 사용.<br>실무에서 많이 사용되는 방식이다.<br>추상 클래스로 만들어둔다. <code>abstract</code><br>물론 조회는 안된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String modDate;</span><br><span class="line">    <span class="keyword">private</span> String regDate;</span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예를 들어 Member 가 BasdEnty 를 상속받는다면,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"MEMBER_ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"USERNAME"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long username;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Member member = <span class="keyword">new</span> Member();</span><br><span class="line">    member.setCreatedBy(<span class="string">"Sue"</span>);</span><br><span class="line">    member.setModDate(<span class="string">"20200212"</span>);</span><br><span class="line">    member.setRegDate(<span class="string">"20200110"</span>);</span><br><span class="line"></span><br><span class="line">    em.persist(member);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래와 같이 상속받은 슈퍼 클래스의 값이 잘 입력된것을 확인 !</p><p><img src="https://user-images.githubusercontent.com/28856435/75888907-6cebe080-5e6f-11ea-9e33-17dc4321d674.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@MappedSuperclass 공통 속성을 모아두는 클래스.&lt;br&gt;공통 객체에서 상속받아 공통 속성들을 사용한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ JPA" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-JPA/"/>
    
    
      <category term="jpa" scheme="http://yoursite.com/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>JPA 상속관계 매핑</title>
    <link href="http://yoursite.com/2020/03/04/JPA-%EC%83%81%EC%86%8D%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91/"/>
    <id>http://yoursite.com/2020/03/04/JPA-%EC%83%81%EC%86%8D%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91/</id>
    <published>2020-03-03T15:32:57.000Z</published>
    <updated>2020-04-28T01:36:01.143Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h3 id="상속관계-매핑"><a href="#상속관계-매핑" class="headerlink" title="상속관계 매핑"></a>상속관계 매핑</h3><h4 id="논리모델을-실제-물리모델로"><a href="#논리모델을-실제-물리모델로" class="headerlink" title="논리모델을 실제 물리모델로"></a>논리모델을 실제 물리모델로</h4><p><img src="https://user-images.githubusercontent.com/28856435/75794895-ce9b4480-5db4-11ea-97a9-7151cbffc627.jpg" alt="modeling"></p><p>1) 조인전략: 각각 테이블로 변환<br> 상속관계로 가져옴 item 이 부모(라고 가정) &gt; 자식들(alberm, movie, book)<br> 각 자식들은 부모의 id 를 상속받는다.</p><p>2) 단일 테이블전략 : 통합 테이블로 변환<br> item 테이블에 모두 들어있음.</p><p>3) 구현 클래스마다 : 서브타입 테이블로 변환<br> 부모없이, (alberm, movie, book) 각 클래스마다 테이블전략</p><br/><h4 id="어노테이션"><a href="#어노테이션" class="headerlink" title="어노테이션"></a>어노테이션</h4><h5 id="Inheritance-strategy-InheritanceType"><a href="#Inheritance-strategy-InheritanceType" class="headerlink" title="@Inheritance(strategy=InheritanceType. ~~)"></a>@Inheritance(strategy=InheritanceType. ~~)</h5><p>조인전략: <code>JOINED</code><br>단일 테이블전략: <code>SINGEL_TABLE</code><br>각 클래스마다 테이블: <code>TABLE_PER_CLASS</code></p><h5 id="DiscriminatorColumn-name-”DTYPE”"><a href="#DiscriminatorColumn-name-”DTYPE”" class="headerlink" title="@DiscriminatorColumn(name=”DTYPE”)"></a>@DiscriminatorColumn(name=”DTYPE”)</h5><p>컬럼을 구분하기 위한 기능.<br>단일 테이블 전략에서 사용된다. (현재는 추가하지 않아도 자동으로 setting됨)</p><h5 id="DiscriminatorValue"><a href="#DiscriminatorValue" class="headerlink" title="@DiscriminatorValue(~)"></a>@DiscriminatorValue(<del>~</del>)</h5><hr><h4 id="조인전략"><a href="#조인전략" class="headerlink" title="조인전략"></a>조인전략</h4><p><strong>장점</strong></p><blockquote><p>테이블 정규화<br><code>외래키 참조 무결성 제약조건</code> 활용가능<br>저장공간 효율화</p></blockquote><p><strong>단점</strong></p><blockquote><p>조인을 많이 사용, 성능 저하<br>조회 쿼리복잡<br>데이터 저장시 INSERT 2번 호출</p></blockquote><p>여기서 잠깐짚고 넘어가는.. 잊혀진 상식..!</p><p><strong>무결성 제약조건</strong><br>데이터베이스에 들어있는 데이터의 정확성(일관성)을 보장하기 위해 부정확한 자료가 데이터베이스 내에 저장되는 것을 방지하기 위한 제약 조건을 의미함</p><table><thead><tr><th>무결성의 종류</th><th>설명</th></tr></thead><tbody><tr><td>널 무결성</td><td>릴레이션의 특정속성 값이 Null이 될 수 없도록 하는 규정</td></tr><tr><td>고유 무결성</td><td>릴레이션의 특정 속성에 대해서 각 튜플이 갖는 값들이 서로 달라야 한다는 규정</td></tr><tr><td>참조 무결성</td><td>외래키 값은 Null이거나 참조 릴레이션의 기본키 값과 동일해야 한다는 규정 즉 릴레이션은 참조할 수 없는 외래키 값을 가질 수 없다는 규정</td></tr><tr><td>도메인 무결성</td><td>특정 속성의 값이, 그 속성이 정의된 도메인에 속한 값이어야 한다는 규정</td></tr><tr><td>키 무결성</td><td>하나의 테이블에는 적어도 하나의 키가 존재해야 한다는 규정</td></tr></tbody></table><p><strong>ITEM</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance</span>(strategy = InheritanceType.JOINED)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MOVIE</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String director;</span><br><span class="line">    <span class="keyword">private</span> String actor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ALBUM</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Album</span> <span class="keyword">extends</span> <span class="title">Item</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String artist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BOOK</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span>  String isbn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실행해 주면,<br>아래와 같이 테이블 생성이 된다.</p><img width="456" alt="h2_item" src="https://user-images.githubusercontent.com/28856435/75796170-985ec480-5db6-11ea-9421-cd47c5af54b6.PNG"><br/><p>movie 객체 하나를 생성해서 넣어준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Movie movie = <span class="keyword">new</span> Movie();</span><br><span class="line">movie.setDirector(<span class="string">"suyeon"</span>);</span><br><span class="line">movie.setActor(<span class="string">"nam"</span>);</span><br><span class="line">movie.setName(<span class="string">"바람과함께"</span>);</span><br><span class="line">movie.setPrice(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">em.persist(movie);</span><br></pre></td></tr></table></figure><p>아래와 같이 ITEM 을 상속받은 MOVIE 에 ID 가 동일하게 들어갔음을 확인할수 있다.<br><img src="https://user-images.githubusercontent.com/28856435/75882576-cac6fb00-5e64-11ea-8060-57c9cb79bfe4.png" alt="image"></p><br/><hr><h4 id="단일-테이블-전략"><a href="#단일-테이블-전략" class="headerlink" title="단일 테이블 전략"></a>단일 테이블 전략</h4><p>설계시 간단한 조건일 경우 많이 사용.<br>단일 테이블 전략은 한 테이블에 모두 밀어넣는 방법!</p><p><strong>장점</strong></p><blockquote><p>조인이 필요없음, 조회성능 빠름<br>조회쿼리가 단순.</p></blockquote><p><strong>단점</strong></p><blockquote><p>자식 엔티티가 매핑한 컬럼은 모두 NULL<br>하나의 테이블에 모두 저장되므로 오히려 느려질 수도 있는 상황 발생우려.</p></blockquote><p>아까 조인전략에서 했던 그대로에서 Items 클래스의 상속전략만 <code>SINGLE_TABLE</code> 로 바꿔준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inheritance</span>(strategy = InheritanceType.SINGLE_TABLE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Items</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 다시실행!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* insert intelli_mapping.Movie</span><br><span class="line">    */ insert </span><br><span class="line">    into</span><br><span class="line">        Items</span><br><span class="line">        (name, price, actor, director, DTYPE, id) </span><br><span class="line">    values</span><br><span class="line">        (?, ?, ?, ?, <span class="string">'Movie'</span>, ?)</span><br></pre></td></tr></table></figure><p>조인전략에서는 실행되는 insert 쿼리가 ITems, Movie 두번이었지만<br>단일테이블 전략은 한번 실행되는걸 확인가능하다.</p><p>테이블이 다시 생성되고,<br>하나의 테이블에 모든 데이터가 들어갔다.<br>실행된 query 를 보면 <code>@DiscriminatorColumn</code> 을 추가하지 않았지만,<br><code>DTYPE</code> 이 자동으로 들어간것을 볼 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create table Items (</span><br><span class="line">       DTYPE varchar(31) not null,</span><br><span class="line">        id bigint not null,</span><br><span class="line">        name varchar(255),</span><br><span class="line">        price <span class="built_in">integer</span> not null,</span><br><span class="line">        actor varchar(255),</span><br><span class="line">        director varchar(255),</span><br><span class="line">        author varchar(255),</span><br><span class="line">        isbn varchar(255),</span><br><span class="line">        artist varchar(255),</span><br><span class="line">        primary key (id)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28856435/75884771-bbe24780-5e68-11ea-84a2-0d168b20c0df.png" alt="image"></p><br/><h4 id="서브타입-테이블로-변환"><a href="#서브타입-테이블로-변환" class="headerlink" title="서브타입 테이블로 변환"></a>서브타입 테이블로 변환</h4><p>이 방법은 실로 잘 쓰이지 않는다고 한다.<br>각 테이블마다 데이터가 저장되고 조인이 가능한 값이 없어서 ..<br>만약 ITEM_ID 를 조회하고 싶다면, MOVIE, BOOK, ALBUM 세개 테이블을 모두 조회해봐야 한다는 단점이 있다.<br>또한, 추후 DB 변동시에도 수정이 어렵다고 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance</span>(strategy = InheritanceType.TABLE_PER_CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Items</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main은 조인전략과 같이 Movie 에 값을 넣어주도록.<br>실행하면, Moive 에만 값이 입력된다.<br>아무튼 비추라니까 .. 간단하게만 짚고 넘어가자.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;상속관계 매핑을 통해 모델링 전략을 알아봅니다.&lt;br&gt;조인전략, 단일 테이블전략, 구현 클래스마다의 서브테이블로,의 전략.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ JPA" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-JPA/"/>
    
    
      <category term="jpa" scheme="http://yoursite.com/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>Python 가상환경 구성, 장고 프로젝트</title>
    <link href="http://yoursite.com/2020/02/29/Python-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1-py-%EC%8B%A4%ED%96%89/"/>
    <id>http://yoursite.com/2020/02/29/Python-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1-py-%EC%8B%A4%ED%96%89/</id>
    <published>2020-02-29T01:56:21.000Z</published>
    <updated>2020-04-28T01:36:01.147Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h2 id="가상환경-설치"><a href="#가상환경-설치" class="headerlink" title="가상환경 설치"></a>가상환경 설치</h2><p><strong>pyenv &amp; Python</strong><br>Python 설치시, 인터프리터와 라이브러리도 함께 설치한다.<br>Python은 기본적으로 하나의 의존성에 대해 한 가지 버전만 설치가 가능하다.<br>Window 환경이 아니라면 인터프리터 환경을 변경해주는 version manager를 설치해줘야 한다. Node.js 의 nvm도 version manager라고 할 수 있다.<br>Python 의 version manager 는 <code>pyenv</code> 이다.</p><p><strong>Python 다운로드</strong><br>기본적으로 Python 설치가 필요하다.<br>공식사이트에서 Window 용, v3.6.0 을 설치했다.</p><hr><h3 id="virtualenv-를-이용한-가상환경-설치"><a href="#virtualenv-를-이용한-가상환경-설치" class="headerlink" title="virtualenv 를 이용한 가상환경 설치"></a>virtualenv 를 이용한 가상환경 설치</h3><p>원하는 경로에서 실행하거나 명령어 뒤에 경로를 포함하여 실행해준다.<br>필자의 경우 <code>pythonPrj</code>라는 작업 디렉토리에서 <code>test-prj</code>명으로 설치를 진행했다.<br><code>python -m pip install virtualenv &quot;가상환경경로&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">$ /c/Users/SUYEON/pythonPrj</span><br><span class="line">$ python -m pip install virtualenv</span><br></pre></td></tr></table></figure><p><strong>가상환경 생성</strong><br>원하는 가상환경명으로 생성해준다.<br><code>virtualenv &quot;가상환경명&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv <span class="built_in">test</span>-prj</span><br></pre></td></tr></table></figure><p><strong>가상환경 실행</strong><br><code>source {가상환경/Scripts/activate}</code> 를 실행하면 가상환경이 구동된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> <span class="built_in">test</span>-prj/Scripts/activate</span><br><span class="line">(<span class="built_in">test</span>-prj)</span><br></pre></td></tr></table></figure><p><strong>가상환경 종료</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ deactivate</span><br></pre></td></tr></table></figure><hr><br/><h3 id="anaconda-를-이용한-가상환경-설치"><a href="#anaconda-를-이용한-가상환경-설치" class="headerlink" title="anaconda 를 이용한 가상환경 설치"></a>anaconda 를 이용한 가상환경 설치</h3><p>개인적으로 anaconda 의 명령어가 더 간단하다고 느꼈다.<br>방법은 virtualenv 와 비슷하다. <code>Anaconda3</code> 가장 최신 버전으로 다운받았다.<br>가볍게 사용할 분들은 anaconda의 축소판인 <code>miniconda</code> 도 추천한다.</p><p><strong>가상환경 생성</strong><br>원하는 가상환경명으로 생성해준다.<br><code>conda create -n &quot;가상환경명&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create -n logon python=3.8</span><br></pre></td></tr></table></figure><p><strong>가상환경 list 보기</strong><br>생성된 가상환경 리스트를 보여준다.<br><code>conda env list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ conda env list</span><br><span class="line"><span class="comment"># conda environments:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                  *  C:\ProgramData\Anaconda3</span><br><span class="line">logon                    C:\ProgramData\Anaconda3\envs\logon</span><br></pre></td></tr></table></figure><p><strong>가상환경 실행</strong><br><code>conda {가상환경명}</code> 를 실행하면 가상환경이 구동된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ conda activate logon</span><br><span class="line">(logon)</span><br></pre></td></tr></table></figure><p><strong>가상환경 종료</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(logon)$ conda deactivate</span><br></pre></td></tr></table></figure><h2 id="장고-설치"><a href="#장고-설치" class="headerlink" title="장고 설치"></a>장고 설치</h2><p>장고 설치 명령어를 실행해준다.<br><code>pip install django</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install django</span><br><span class="line">Installing collected packages: asgiref, sqlparse, pytz, django</span><br><span class="line">Successfully installed asgiref-3.2.7 django-3.0.5 pytz-2019.3 sqlparse-0.3.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;작성중&lt;/em&gt;&lt;br&gt;Python 가상환경을 virtualenv, anaconda 를 사용하여 설치해봅니다.&lt;br&gt;가상환경에 장고 프로젝트를 생성합니다.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="virtualenv" scheme="http://yoursite.com/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>JPA-연관관계 매핑</title>
    <link href="http://yoursite.com/2020/02/23/%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91/"/>
    <id>http://yoursite.com/2020/02/23/%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91/</id>
    <published>2020-02-23T14:32:55.000Z</published>
    <updated>2020-04-28T01:36:01.153Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h3 id="연관관계-매핑"><a href="#연관관계-매핑" class="headerlink" title="연관관계 매핑"></a>연관관계 매핑</h3><blockquote><p>단방향, 양방향 매핑이 있다. 항상 기본이 되는것은 단방향 매핑이고,<br>여기에 양방향으로 조회를 가능토록 해준다면 양방향.<br>여기서는 양방향에 단방향이 포함되므로 양방향을 기록하도록 하겠다.</p></blockquote><p>우선 기본 설계를 구두화하자면,<br>MEMBER, ORDERS, ORDERITEM, ITEM 테이블이 존재한다.</p><p>각 테이블의 연관관계는 아래와 같다.</p><table><thead><tr><th>TABLES</th><th>RELATION</th><th>table(FK)</th></tr></thead><tbody><tr><td>MEMBER : ORDERS</td><td>1 : N</td><td>ORDERS(MEMBER_ID)</td></tr><tr><td>ORDERS : ORDERITEM</td><td>1 : N</td><td>ORDERITEM(ORDER_ID)</td></tr><tr><td>ORDERITEM : ITEM</td><td>N : 1</td><td>ORDERITEM(ITEM_ID)</td></tr><tr><td><br/></td><td></td><td></td></tr></tbody></table><h4 id="ManyToOne"><a href="#ManyToOne" class="headerlink" title="@ManyToOne"></a>@ManyToOne</h4><blockquote><p>1:N 관계에서 N 인쪽 객체에 설정해준다.<br>아래는 <strong>Order.java</strong> 객체 일부이다.<br>위 연관관계를 기준으로 MEMBER 는 여러 ORDER 를 생성할 수 있다.</p></blockquote><p>@ManyToOne 을 MEMBER_ID 에 설정해 주었는데,<br>Order 객체가 MEMBER_ID 를 FK 로 갖는다는 의미이다.<br>그리고 member 의 타입은 MEMBER 객체를 가져와 사용한다.</p><p><strong>Order.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"ORDERS"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(<span class="string">"MEMBER_ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Member member;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="OneToMany"><a href="#OneToMany" class="headerlink" title="@OneToMany"></a>@OneToMany</h4><p>위에서 @ManyToOne 을 MEMBER_ID 에 설정해 주었다면,<br>그 MEMBER_ID 가 있는 MEMBER 객체에<br>ORDER 객체로 orderList 를 생성해준다.</p><h4 id="연관관계-주인"><a href="#연관관계-주인" class="headerlink" title="연관관계 주인"></a>연관관계 주인</h4><p>여기서 연관관계 주인이 결정된다.<br><code>@OneToMany(mappedBy = &quot;&quot;)</code> mappedBy 속성에 연관관계 주인을 넣어준다.<br>여기서 연관관계 주인은 Order.java 에서 <code>@ManyToOne</code> 으로 설정해준 Member 객체의 member 변수 이다.</p><blockquote><p><strong>연관관계 주인은 FK 에 설정해준다.</strong></p></blockquote><p>아래와 같이 Member 객체 내에 <code>orderList</code> 리스트 객체가 만들어진다.</p><p><strong>Member.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"MEMBER_ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// mappedBy -&gt; Order.java 의 member 변수</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"member"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList = <span class="keyword">new</span> ArrayList&lt;Order&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OrderItem.java</strong> 도 마찬가지로 ORDER_ID 와 ITEM_ID 가 FK 이므로<br>@ManyToOne 을 설정해주고 객체타입을 각 Order, Item 객체로.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"ORDER_ITEM"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"ORDER_ITEM_ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long orderItemId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"ORDER_ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"ITEM_ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Item item;</span><br></pre></td></tr></table></figure><p>Order 객체에는<br>@OneToMany 를 추가해준다.<br>Order 는 OderItem 리스트를 갖는다.</p><p><strong>Order.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"ORDERS"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"MEMBER_ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Member member;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy=<span class="string">"order"</span>)</span><br><span class="line">    List&lt;OrderItem&gt; orderItemList = <span class="keyword">new</span> ArrayList()&lt;&gt;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Item 에서는 조회할 필요없으니 원래대로 기본키만 지정.</p><p><strong>Item.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"ITEM_ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long itemId;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 방식대로 매핑을 마치면 터미널에서 아래와 같이<br>객체를 기준으로 한 테이블이 생성되는걸 확인할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">   create table ITEM (</span><br><span class="line">       ITEM_ID bigint not null,</span><br><span class="line">        name varchar(255),</span><br><span class="line">        price <span class="built_in">integer</span> not null,</span><br><span class="line">        stockQuantity <span class="built_in">integer</span> not null,</span><br><span class="line">        primary key (ITEM_ID)</span><br><span class="line">    )</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table Member (</span><br><span class="line">       MEMBER_ID bigint not null,</span><br><span class="line">        city varchar(255),</span><br><span class="line">        name varchar(255),</span><br><span class="line">        street varchar(255),</span><br><span class="line">        zipcode varchar(255),</span><br><span class="line">        primary key (MEMBER_ID)</span><br><span class="line">    )</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table ORDER_ITEM (</span><br><span class="line">       ORDER_ITEM_ID bigint not null,</span><br><span class="line">        count <span class="built_in">integer</span> not null,</span><br><span class="line">        orderPrice <span class="built_in">integer</span> not null,</span><br><span class="line">        ITEM_ID bigint,</span><br><span class="line">        ORDER_ID bigint,</span><br><span class="line">        primary key (ORDER_ITEM_ID)</span><br><span class="line">    )</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table ORDERS (</span><br><span class="line">       id bigint not null,</span><br><span class="line">        status varchar(255),</span><br><span class="line">        MEMBER_ID bigint,</span><br><span class="line">        primary key (id)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;연관관계 매핑에서의 @ManyToOne, @OneToMany 사용법과&lt;br&gt;연관관계 주인을 지정해본다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ JPA" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-JPA/"/>
    
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>JPA 기본키 매핑</title>
    <link href="http://yoursite.com/2020/02/20/%EA%B8%B0%EB%B3%B8%ED%82%A4-%EB%A7%A4%ED%95%91/"/>
    <id>http://yoursite.com/2020/02/20/%EA%B8%B0%EB%B3%B8%ED%82%A4-%EB%A7%A4%ED%95%91/</id>
    <published>2020-02-20T13:08:15.000Z</published>
    <updated>2020-04-28T01:36:01.151Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h3 id="기본키-매핑"><a href="#기본키-매핑" class="headerlink" title="기본키 매핑"></a>기본키 매핑</h3><h4 id="직접할당"><a href="#직접할당" class="headerlink" title="직접할당"></a>직접할당</h4><blockquote><p>@Id 만 사용한다.</p></blockquote><hr><h4 id="자동생성-GeneratedValue"><a href="#자동생성-GeneratedValue" class="headerlink" title="자동생성 (@GeneratedValue)"></a>자동생성 (@GeneratedValue)</h4><h5 id="IDENTITY-전략"><a href="#IDENTITY-전략" class="headerlink" title="IDENTITY 전략"></a>IDENTITY 전략</h5><blockquote><p>IDENTITY : 데이터베이스에 위임한다.</p></blockquote><p><strong>Member.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name =<span class="string">"name"</span>)</span><br><span class="line"><span class="keyword">private</span> String username;</span><br></pre></td></tr></table></figure><p><strong>JpaMain.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Member member= <span class="keyword">new</span> Member();</span><br><span class="line">member.setUsername(<span class="string">"C"</span>);</span><br><span class="line"></span><br><span class="line">em.persist(member);</span><br></pre></td></tr></table></figure><p>를 두 번 실행하면 아래와 같이 순차적으로 name 에 “C” 가 입력된다.<br><img src="https://user-images.githubusercontent.com/28856435/74938723-e6c4a880-5431-11ea-9388-f1c3f39bd6b0.png" alt="image"></p><br/><h5 id="IDENTITY-전략-특징"><a href="#IDENTITY-전략-특징" class="headerlink" title="IDENTITY 전략 특징"></a>IDENTITY 전략 특징</h5><p>identity 전략은 1차 캐시에 있는 값을 모른다.<br>트랜젝션 <code>COMMIT</code> 이 아닌<br><code>em.persist</code> 호출하는 시점에 <code>INSERT</code> 쿼리가 수행된다.<br>(원래는 <code>COMMIT</code> 할 때 DB 에 수행됨.)</p><h5 id="SEQUENCE-시퀀스-전략"><a href="#SEQUENCE-시퀀스-전략" class="headerlink" title="SEQUENCE 시퀀스 전략"></a>SEQUENCE 시퀀스 전략</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@SequenceGenerator</span>(name = <span class="string">"member_seq_gen"</span>, sequenceName = <span class="string">"member_seq"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.SEQUENCE, generator = <span class="string">"member_seq_gen"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><p>다음과 같이 테이블이 생성된다.<br><code>Hibernate: create sequence member_seq start with 1 increment by 50</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: create sequence member_seq start with 1 increment by 50</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table Member (</span><br><span class="line">       id bigint not null,</span><br><span class="line">        name varchar(255),</span><br><span class="line">        primary key (id)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h5 id="SEQUENCE-전략-특징"><a href="#SEQUENCE-전략-특징" class="headerlink" title="SEQUENCE 전략 특징"></a>SEQUENCE 전략 특징</h5><blockquote><p><code>allocationSize</code> 는 시퀀스를 미리 가져와 확보해준다.<br>두번 째 INSERT 시에는 MEMBER_SEQ 테이블 조회가 아닌, MEMORY 에 있는 값을 사용하여,<br><strong>성능이 증가된다.</strong></p></blockquote><p>__Member.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@SequenceGenerator</span>(</span><br><span class="line">        name = <span class="string">"MEMBER_SEQ_GEN"</span>,</span><br><span class="line">        sequenceName = <span class="string">"MEMBER_SEQ"</span>,</span><br><span class="line">        initialValue = <span class="number">1</span>, allocationSize = <span class="number">50</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.SEQUENCE, generator = <span class="string">"MEMBER_SEQ_GEN"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><p><strong>MEMBER_SEQ 조회</strong></p><table><thead><tr><th>실행 순서</th><th>SEQ</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>51</td></tr></tbody></table><p><strong>JpaMain.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Member member1= <span class="keyword">new</span> Member();</span><br><span class="line">            member1.setUsername(<span class="string">"A"</span>);</span><br><span class="line">            Member member2= <span class="keyword">new</span> Member();</span><br><span class="line">            member2.setUsername(<span class="string">"B"</span>);</span><br><span class="line">            Member member3= <span class="keyword">new</span> Member();</span><br><span class="line">            member3.setUsername(<span class="string">"C"</span>);</span><br><span class="line">            <span class="comment">//DB SEQ = 1   |1</span></span><br><span class="line">            <span class="comment">//DB SEQ = 51  |2</span></span><br><span class="line">            em.persist(member1); <span class="comment">//1, 51 까지 확보</span></span><br><span class="line">            em.persist(member2); <span class="comment">//MEMORY</span></span><br><span class="line">            em.persist(member3); <span class="comment">// MEMORY</span></span><br></pre></td></tr></table></figure><p>실행하면, <code>MEMBER_SEQ start with 1 increment by 50</code> 구문을 확인할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: create sequence MEMBER_SEQ start with 1 increment by 50</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table Member (</span><br><span class="line">       id bigint not null,</span><br><span class="line">        name varchar(255),</span><br><span class="line">        primary key (id)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><strong>H2 DB</strong><br><img src="https://user-images.githubusercontent.com/28856435/74943988-a0267c80-5438-11ea-837d-4bb74456289b.png" alt="image"><br><br/></p><h5 id="TABLE-전략"><a href="#TABLE-전략" class="headerlink" title="TABLE 전략"></a>TABLE 전략</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@TableGenerator</span>(</span><br><span class="line">        name = <span class="string">"MEMBER_SEQ_GEN"</span>,</span><br><span class="line">        table = <span class="string">"MY_SEQ"</span>,</span><br><span class="line">        pkColumnName=<span class="string">"MEMBER_SEQ"</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.TABLE, generator = <span class="string">"MEMBER_SEQ_GEN"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><p>다음과 같이 <code>MY_SEQ</code> 라는 시퀀스 테이블이 생성된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    create table MY_SEQ (</span><br><span class="line">       MEMBER_SEQ varchar(255) not null,</span><br><span class="line">        next_val bigint,</span><br><span class="line">        primary key (MEMBER_SEQ)</span><br><span class="line">    )</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    insert into MY_SEQ(MEMBER_SEQ, next_val) values (<span class="string">'Member'</span>,0)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28856435/74940568-fd203380-5434-11ea-8f4c-ee95ccbe2a01.png" alt="image"><br><br/></p><h3 id="기본키-제약조건"><a href="#기본키-제약조건" class="headerlink" title="기본키 제약조건"></a>기본키 제약조건</h3><blockquote><p>1) null 이 아니어야한다.<br>2) 유일해야 한다.<br>3) 변하면 안된다.</p></blockquote><p><code>Long 형 + 대체키 + 키 생성 전략 사용</code> 이 권장된다고 한다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;기본키의 strategy;전략들의 타입들을 알아보고&lt;br&gt;타입별 데이터베이스에 수행되는 원리를 알아봅니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ JPA" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-JPA/"/>
    
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
      <category term="H2" scheme="http://yoursite.com/tags/H2/"/>
    
  </entry>
  
  <entry>
    <title>Node 로 서버 생성하기</title>
    <link href="http://yoursite.com/2020/02/20/Node-%EB%A1%9C-%EC%84%9C%EB%B2%84-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/"/>
    <id>http://yoursite.com/2020/02/20/Node-%EB%A1%9C-%EC%84%9C%EB%B2%84-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</id>
    <published>2020-02-20T05:42:47.000Z</published>
    <updated>2020-04-28T01:36:01.146Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h4 id="Node-js-에서-ES6-모듈-사용"><a href="#Node-js-에서-ES6-모듈-사용" class="headerlink" title="Node.js 에서 ES6 모듈 사용"></a>Node.js 에서 ES6 모듈 사용</h4><p>아래 명령어로 ES6 를 사용하기 위한 설치를 진행합니다.</p><h5 id="babel-이란"><a href="#babel-이란" class="headerlink" title="babel 이란?"></a>babel 이란?</h5><blockquote><p>최신 사양의 JS 코드를 ES5 이하 코드로 변환해준다. 덕분에 구형 IE 나 구형 브라우저에서도 동작할 수 있게 해준다.</p></blockquote><h5 id="babel-cli-설치"><a href="#babel-cli-설치" class="headerlink" title="babel-cli 설치"></a>babel-cli 설치</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @babel/cli @babel/core</span><br></pre></td></tr></table></figure><h5 id="babel-preset-env"><a href="#babel-preset-env" class="headerlink" title="@babel/preset-env"></a>@babel/preset-env</h5><blockquote><p><code>@babel/preset-env</code> 는 함께 사용해야 하는 Babel 플러그인을 모아둔 것이다.<br>필요한 플러그인들을 프로젝트 지원 환경에 맞춰 동적으로 결정해준다.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @babel/preset-env</span><br></pre></td></tr></table></figure><p><em>… 작성중입니다.</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;작성중&lt;/em&gt;&lt;br&gt;Node.js 를 이용하여 서버를 생성해봅니다.&lt;br&gt;ES6 문법을 사용할 수 있도록 설정합니다.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="server" scheme="http://yoursite.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>Maven 501 HTTPS Required , protocol_version Error</title>
    <link href="http://yoursite.com/2020/02/18/Maven-501-HTTPS-Required-%EC%97%90%EB%9F%AC/"/>
    <id>http://yoursite.com/2020/02/18/Maven-501-HTTPS-Required-%EC%97%90%EB%9F%AC/</id>
    <published>2020-02-18T05:58:11.000Z</published>
    <updated>2020-04-28T01:36:01.145Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h3 id="Maven-Repository-정책변경"><a href="#Maven-Repository-정책변경" class="headerlink" title="Maven Repository 정책변경"></a>Maven Repository 정책변경</h3><p>2020.01.15 이후 Maven Repository 정책이 아래와 같이 변경되었다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Effective January 15, 2020, The Central Repository no longer supports insecure communication over plain HTTP and requires that all requests to the repository are encrypted over HTTPS.</span><br><span class="line">If you&#39;re receiving this error, then you need to replace all URL references to Maven Central with their canonical HTTPS counterparts.</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28856435/74709270-1de45f80-5262-11ea-94af-7495280c30c0.png" alt="image"></p><p>Central Repository  는 일반 HTTP를 통한 통신을 지원하지 않으며 <code>HTTPS</code> 를 통해 암호화 되어야 한다는 이야기다. settings.xml 에 Maven Central 에 대한 URL 참조를 <code>HTTP -&gt; HTTPS</code> 로 바꿔주면 된다.</p><p>아래와 같이 <url> 값을 바꿔주고 <pluginRepositories> 설정을 추가해준다.</p><hr><h4 id="maven-501-해결법"><a href="#maven-501-해결법" class="headerlink" title="maven 501 해결법 ?"></a>maven 501 해결법 ?</h4><p><strong>settings.xml 에 수정</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>myprofile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><br/><h3 id="Received-fatal-alert-protocol-version"><a href="#Received-fatal-alert-protocol-version" class="headerlink" title="Received fatal alert: protocol_version"></a>Received fatal alert: protocol_version</h3><p>501 에러는 벗어났지만 위와 같은 설정후에도 또 다른 오류가 났다.<br>이번엔 프로토콜 오류.</p><p><code>Received fatal alert: protocol_version</code><br>아래 로그에서 이 오류를 찾을 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] The build could not <span class="built_in">read</span> 1 project -&gt; [Help 1]</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR]   The project com.olleh.gigaeyes:gigaeyes-cvsaas-ems:1.3.3 (C:\Users\ksso7\eclipse_trunk\vsaas-api-center\gigaeyes-cvsaas-ems\pom.xml) has 1 error</span><br><span class="line">[ERROR]     Non-resolvable parent POM <span class="keyword">for</span> com.olleh.gigaeyes:gigaeyes-cvsaas-ems:1.3.3: Could not transfer artifact org.springframework.boot:spring-boot-starter-parent:pom:1.5.2.RELEASE from/to central (https://repo.maven.apache.org/maven2): Transfer failed <span class="keyword">for</span> https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/1.5.2.RELEASE/spring-boot-starter-parent-1.5.2.RELEASE.pom and <span class="string">'parent.relativePath'</span> points at no <span class="built_in">local</span> POM @ line 12, column 10: Received fatal alert: protocol_version -&gt; [Help 2]</span><br></pre></td></tr></table></figure><h4 id="protocol-version-해결법"><a href="#protocol-version-해결법" class="headerlink" title="protocol_version 해결법 ?"></a>protocol_version 해결법 ?</h4><p>JDK 버전에 따라 지원하는 TLS 버전이 달랐다</p><table><thead><tr><th>JDK version</th><th>지원 프로토콜 버전</th></tr></thead><tbody><tr><td>JDK 1.7</td><td>TLS v1.0~v1.1</td></tr><tr><td>JDK 1.8</td><td>TLS ~v1.2</td></tr></tbody></table><p>1) JDK 버전이 1.7 이라면 1.8 로 버전업 시켜주거나<br>2) maven build 시에 아래 옵션을 추가해준다.<br> <code>-Dhttps.protocols=TLSv1.2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn install -Dhttps.protocols=TLSv1.2</span><br></pre></td></tr></table></figure><h3 id="cached-in-the-local-repository-resolution-will-not-be-reattempted"><a href="#cached-in-the-local-repository-resolution-will-not-be-reattempted" class="headerlink" title="cached in the local repository, resolution will not be reattempted"></a>cached in the local repository, resolution will not be reattempted</h3><p>그리고 또다른 오류 직면 ..</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Failed to execute goal on project gigaeyes-cvsaas-ems: Could not resolve dependencies <span class="keyword">for</span> project com.olleh.gigaeyes:gigaeyes-cvsaas-ems:war:1.3.3: Failure to find com.olleh.gigaeyes:gigaeyes-cvsaas-lib-commons:jar:1.1.0 <span class="keyword">in</span> https://repo.maven.apache.org/maven2 was cached <span class="keyword">in</span> the <span class="built_in">local</span> repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced -&gt; [Help 1]</span><br></pre></td></tr></table></figure><h4 id="메이븐-강제-업데이트하기"><a href="#메이븐-강제-업데이트하기" class="headerlink" title="메이븐 강제 업데이트하기"></a>메이븐 강제 업데이트하기</h4><p><code>-U</code> 를 추가해준다. 메이븐 강제 업데이트 옵션이다.</p><blockquote><p>-U 명령어 = Force Update of Snapshots/Releases</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn -Dhttps.protocols=TLSv1.2 -U install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;+Maven 빌드 중, 501 HTTPS Required 에러&lt;br&gt;+jdk 버전에 따른 protocol_version 버전 불일치 에러&lt;br&gt;+cached in the local repository, resolution will not be reattempted&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Config" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Config/"/>
    
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
      <category term="maven-err" scheme="http://yoursite.com/tags/maven-err/"/>
    
  </entry>
  
  <entry>
    <title>구글 검색엔진 +사이트맵 생성</title>
    <link href="http://yoursite.com/2020/02/17/SearchConsole-sitemap/"/>
    <id>http://yoursite.com/2020/02/17/SearchConsole-sitemap/</id>
    <published>2020-02-17T13:54:49.000Z</published>
    <updated>2020-04-28T01:36:01.148Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h3 id="Google-search-console-등록"><a href="#Google-search-console-등록" class="headerlink" title="Google search console 등록"></a>Google search console 등록</h3><p><a href="https://search.google.com/search-console/welcome?hl=ko" target="_blank" rel="noopener">Google search console</a> 에 접속하여 일반적인 github.blog.io 를 사용하고 있다면 다음 창에 주소를 써 넣어준다.</p><p><img src="https://user-images.githubusercontent.com/28856435/74661554-863c2e00-51db-11ea-97a6-eb2365f5d594.png" alt="image"></p><p>아래과 같이 타 도메인이 아닌 깃헙 블로그는 쉽게 인증이 가능하다.</p><p><img src="https://user-images.githubusercontent.com/28856435/74668917-893e1b00-51e9-11ea-8b6a-8f83dbcb6bdb.png" alt="image"><br><br/></p><h3 id="sitemap-xml-등록하기"><a href="#sitemap-xml-등록하기" class="headerlink" title="sitemap.xml 등록하기"></a>sitemap.xml 등록하기</h3><h5 id="hexo-sitemap-플러그인-설치"><a href="#hexo-sitemap-플러그인-설치" class="headerlink" title="hexo sitemap 플러그인 설치"></a>hexo sitemap 플러그인 설치</h5><p>필자는 <code>hexo</code> 를 사용중이기에 hexo 플러그인을 사용해 sitemap 을 생성해주도록 설정했다.</p><p>아래 명령을 실행해 플러그인을 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure><p>root 위치의 _config.yml 에 아래와 같이 sitemap 이 생성될 경로와 이름을 추가해준다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure><p>그리고 배포하면 이렇게 자동 생성된 파일들을 확인할 수 있다.</p><p><img src="https://user-images.githubusercontent.com/28856435/74671260-1d11e600-51ee-11ea-810c-83422a1e4544.png" alt="image"><br><br/></p><h5 id="Search-Console-에-Sitemap-등록"><a href="#Search-Console-에-Sitemap-등록" class="headerlink" title="Search Console 에 Sitemap 등록"></a>Search Console 에 Sitemap 등록</h5><p>Google Search Console 에서 sitemap 을 올린 경로로 등록해준다.</p><p>sitemap 에 성공했다 !</p><p><img src="https://user-images.githubusercontent.com/28856435/74671401-71b56100-51ee-11ea-9bdb-1ec55b30eea5.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/28856435/74671443-8abe1200-51ee-11ea-947f-f901b7b9628c.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo 플러그인을 이용해 Google Search Console 에 github 블로그 소유권을 인증하고 사이트맵을 등록해봅니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="☁️ Git" scheme="http://yoursite.com/categories/%E2%98%81%EF%B8%8F-Git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="google" scheme="http://yoursite.com/tags/google/"/>
    
      <category term="search-engine" scheme="http://yoursite.com/tags/search-engine/"/>
    
      <category term="sitemap" scheme="http://yoursite.com/tags/sitemap/"/>
    
  </entry>
  
</feed>
